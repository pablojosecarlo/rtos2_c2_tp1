
examples/c/app/out/app.elf:     file format elf32-littlearm
examples/c/app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000ad5

Program Header:
0x70000001 off    0x00015018 vaddr 0x1a005018 paddr 0x1a005018 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000100a8 vaddr 0x100000a8 paddr 0x100000a8 align 2**16
         filesz 0x00000000 memsz 0x00002338 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005020 memsz 0x00005020 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005020 align 2**16
         filesz 0x000000a8 memsz 0x000000a8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005014  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  10000000  1a005020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a8  2**2
                  CONTENTS
  6 .bss          00002338  100000a8  100000a8  000100a8  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a8  2**2
                  CONTENTS
 11 .init_array   00000004  1a005014  1a005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005018  1a005018  00015018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a8  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a8  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a8  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a8  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a8  2**2
                  CONTENTS
 18 .noinit       00000000  100023e0  100023e0  000200a8  2**2
                  CONTENTS
 19 .debug_info   00030d5a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00005e7b  00000000  00000000  00050e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000ff8  00000000  00000000  00056c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00001108  00000000  00000000  00057c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000116f1  00000000  00000000  00058d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00016e8f  00000000  00000000  0006a46e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0002f9f4  00000000  00000000  000812fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  000b0cf1  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000b0d70  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002e64  00000000  00000000  000b0da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    0000b1bc  00000000  00000000  000b3c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005014 l    d  .init_array	00000000 .init_array
1a005018 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100023e0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a003504 l     F .text	000000a4 uartProcessIRQ
10002324 l     O .bss	00000004 rxIsrCallbackUART0
10002328 l     O .bss	00000004 rxIsrCallbackUART2
1000232c l     O .bss	00000004 rxIsrCallbackUART3
10002330 l     O .bss	00000004 txIsrCallbackUART0
10002334 l     O .bss	00000004 txIsrCallbackUART2
10002338 l     O .bss	00000004 txIsrCallbackUART3
1a004e4c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 rtos2_c2_tp1.c
100000a8 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 qf_mem2.c
00000000 l    df *ABS*	00000000 keysMef.c
1a000458 l     F .text	0000013c srvKeysMef
100000b8 l     O .bss	00000014 bKEY_ABA_LONG.14358
100000cc l     O .bss	00000014 bKEY_ARR_LONG.14359
100000e0 l     O .bss	000000a0 teclas
10000000 l     O .data	00000004 nKEYS
00000000 l    df *ABS*	00000000 QueueToUART.c
1a000708 l     F .text	00000016 strlen0
1a00071e l     F .text	0000001c copiarStrToStr
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 c2_tp1.c
00000000 l    df *ABS*	00000000 system.c
1000018c l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a000c28 l     F .text	00000064 prvHeapInit
10000194 l     O .bss	00002000 ucHeap
1a000c8c l     F .text	00000058 prvInsertBlockIntoFreeList
10000190 l     O .bss	00000004 pxEnd
10002194 l     O .bss	00000004 xBlockAllocatedBit
10002198 l     O .bss	00000004 xFreeBytesRemaining
1000219c l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100021a0 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000e70 l     F .text	0000001e prvIsQueueFull
1a000e8e l     F .text	0000001a prvIsQueueEmpty
1a000ea8 l     F .text	00000076 prvCopyDataToQueue
1a000f1e l     F .text	00000024 prvCopyDataFromQueue
1a000f42 l     F .text	0000006e prvUnlockQueue
1a001034 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a0015b0 l     F .text	0000002c prvResetNextTaskUnblockTime
1a0015dc l     F .text	00000012 prvDeleteTCB
1a0015ee l     F .text	00000092 prvInitialiseNewTask
1a001680 l     F .text	00000068 prvInitialiseTaskLists
1a0016e8 l     F .text	000000ac prvAddNewTaskToReadyList
1a001794 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0017e0 l     F .text	00000028 prvIdleTask
1a001808 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100021ac l     O .bss	00000004 pxDelayedTaskList
100021b0 l     O .bss	00000004 pxOverflowDelayedTaskList
100021b4 l     O .bss	0000008c pxReadyTasksLists
10002240 l     O .bss	00000004 uxCurrentNumberOfTasks
10002244 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002248 l     O .bss	00000004 uxPendedTicks
1000224c l     O .bss	00000004 uxSchedulerSuspended
10002250 l     O .bss	00000004 uxTaskNumber
10002254 l     O .bss	00000004 uxTopReadyPriority
10002258 l     O .bss	00000014 xDelayedTaskList1
1000226c l     O .bss	00000014 xDelayedTaskList2
10002280 l     O .bss	00000004 xIdleTaskHandle
10002284 l     O .bss	00000004 xNextTaskUnblockTime
10002288 l     O .bss	00000004 xNumOfOverflows
1000228c l     O .bss	00000014 xPendingReadyList
100022a0 l     O .bss	00000004 xSchedulerRunning
100022a4 l     O .bss	00000014 xSuspendedTaskList
100022b8 l     O .bss	00000014 xTasksWaitingTermination
100022cc l     O .bss	00000004 xTickCount
100022d0 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001fd0 l     F .text	00000020 prvGetNextExpireTime
1a001ff0 l     F .text	00000048 prvInsertTimerInActiveList
1a002038 l     F .text	0000005c prvCheckForValidListAndQueue
1a0023bc l     F .text	00000016 prvTimerTask
1a002150 l     F .text	00000078 prvSwitchTimerLists
1a0021c8 l     F .text	0000002c prvSampleTimeNow
1a0021f4 l     F .text	00000060 prvProcessExpiredTimer
1a002254 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0022c8 l     F .text	000000f4 prvProcessReceivedCommands
100022d4 l     O .bss	00000004 pxCurrentTimerList
100022d8 l     O .bss	00000004 pxOverflowTimerList
100022dc l     O .bss	00000014 xActiveTimerList1
100022f0 l     O .bss	00000014 xActiveTimerList2
10002304 l     O .bss	00000004 xLastTime.11732
10002308 l     O .bss	00000004 xTimerQueue
1000230c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a0023d4 l     F .text	00000040 prvTaskExitError
1a002414 l     F .text	00000022 prvPortStartFirstTask
1a00243c l     F .text	0000000e vPortEnableVFP
1a0024a0 l       .text	00000000 pxCurrentTCBConst2
1a002580 l       .text	00000000 pxCurrentTCBConst
10002310 l     O .bss	00000001 ucMaxSysCallPriority
10002314 l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a002774 l     F .text	00000044 Board_LED_Init
1a0027b8 l     F .text	00000040 Board_TEC_Init
1a0027f8 l     F .text	00000040 Board_GPIO_Init
1a002838 l     F .text	00000030 Board_ADC_Init
1a002868 l     F .text	00000038 Board_SPI_Init
1a0028a0 l     F .text	00000024 Board_I2C_Init
1a004cd8 l     O .text	00000008 GpioButtons
1a004ce0 l     O .text	0000000c GpioLeds
1a004cec l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004d04 l     O .text	00000004 InitClkStates
1a004d08 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002a14 l     F .text	0000002c Chip_UART_GetIndex
1a004d7c l     O .text	00000008 UART_BClock
1a004d84 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002bbc l     F .text	00000014 Chip_ADC_GetClockIndex
1a002bd0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002c98 l     F .text	000000a4 pll_calc_divs
1a002d3c l     F .text	0000010c pll_get_frac
1a002e48 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0030bc l     F .text	00000022 Chip_Clock_GetDivRate
1000231c l     O .bss	00000008 audio_usb_pll_freq
1a004d98 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a004e04 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0033fc l     F .text	00000014 Chip_SSP_GetClockIndex
1a003410 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003698 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000233c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003e5c l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00457c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000048 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005018 l       .init_array	00000000 __init_array_end
1a005014 l       .bss_RAM5	00000000 __preinit_array_end
1a005014 l       .init_array	00000000 __init_array_start
1a005014 l       .bss_RAM5	00000000 __preinit_array_start
1a002ee0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000b74 g     F .text	00000012 _isatty_r
1a0041e0 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
100000b0 g     O .bss	00000004 updKeysMef_Handle
1a000b86 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0007f0 g     F .text	0000000e Led_setOnOff
1a0024e8 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0041b0 g     F .text	00000030 printf
1a00295a g     F .text	00000008 __stdio_init
1a004302 g     F .text	00000024 __sseek
1a003edc g     F .text	00000060 __sinit
1a004330 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001468 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003eb0 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002c76 g     F .text	0000000c Chip_ADC_SetResolution
1a00457a g     F .text	00000002 __malloc_unlock
1a002584 g     F .text	0000002c SysTick_Handler
1a002a94 g     F .text	00000040 Chip_UART_SetBaud
1a000ad0  w    F .text	00000002 initialise_monitor_handles
1a0039e4 g     F .text	00000008 printString
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0028fc g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a002520 g     F .text	00000064 PendSV_Handler
1a00121c g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005020 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
100000b4 g     O .bss	00000004 updQueueToUARTHandle
1a0007dc g     F .text	00000014 Led_ctor
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a000768 g     F .text	00000034 updQueueToUART
100021a8 g     O .bss	00000004 pxCurrentTCB
1a000b6a g     F .text	0000000a _fstat_r
53ff6dba g       *ABS*	00000000 __valid_user_code_checksum
1a005020 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001e5c g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a00315e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
10002350 g     O .bss	00000014 miMemPool2
1a0001a8 g     F .text	00000012 bss_init
1a0025e8 g     F .text	00000110 xPortStartScheduler
1a004038 g     F .text	00000016 memcpy
1a001d68 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a003ea4 g     F .text	0000000c _cleanup_r
1a0025b0  w    F .text	00000038 vPortSetupTimerInterrupt
1a0039fc g     F .text	00000000 .hidden __aeabi_uldivmod
100023e0 g       .noinit	00000000 _noinit
1a004298 g     F .text	00000010 puts
1a000e00 g     F .text	00000070 vPortFree
1a00366a g     F .text	00000018 uartWriteString
100023d8 g     O .bss	00000004 SystemCoreClock
1a002a40 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a0026f8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a0031dc g     F .text	0000004c Chip_Clock_GetRate
1a0014d6 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0039d4 g     F .text	00000010 printInitUart
1a00299c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003a2c g     F .text	000002cc .hidden __udivmoddi4
1a000c08 g     F .text	00000020 _sbrk_r
1a004cd4 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000b90 g     F .text	0000004e _read_r
1a0014d0 g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0012e8 g     F .text	00000158 xQueueReceive
10002398 g     O .bss	00000040 xQueueRegistry
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
10002348 g     O .bss	00000003 led1
1a005018 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a004fdc g     O .text	00000004 _global_impure_ptr
1a003ff0 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000ce4 g     F .text	0000011c pvPortMalloc
1a002918 g     F .text	00000030 Board_Init
1a000b5e  w    F .text	00000002 _init
1a0014ba g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a001998 g     F .text	0000000c xTaskGetTickCount
1a0010a0 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100023e0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000428 g     F .text	0000002e QMPool_get
1a000ad4 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0033c4 g     F .text	00000038 Chip_I2C_SetClockRate
1a001f20 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0008ac g     F .text	00000218 BIN16_A_DIGITAL5
1a002e94 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001dd0 g     F .text	0000008c xTaskRemoveFromEventList
1a001578  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a004f7c g     O .text	00000020 __sf_fake_stderr
1a0033a0 g     F .text	00000024 Chip_I2C_Init
1a003682 g     F .text	0000000a UART2_IRQHandler
1a0039ec g     F .text	00000010 printEnter
1a003050 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a004e94 g     O .text	000000e6 gpioPinsInit
1a000802 g     F .text	00000004 Led_setBlink
1a00154c  w    F .text	0000002c vAssertCalled
1a003650 g     F .text	0000001a uartWriteByte
1a003428 g     F .text	00000012 Chip_SSP_SetClockRate
1a0045aa g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a004b10 g     F .text	00000000 memchr
1a001e74 g     F .text	00000080 xTaskCheckForTimeOut
1a004060 g     F .text	0000009c _free_r
1a003138 g     F .text	00000026 Chip_Clock_GetBaseClock
100000a8 g       .bss	00000000 _bss
1a002c44 g     F .text	00000032 Chip_ADC_SetSampleRate
10002318 g     O .bss	00000004 freeRtosInterruptCallback
1a001988 g     F .text	00000010 vTaskSuspendAll
1a0007fe g     F .text	00000004 Led_getOnOff
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00343a g     F .text	0000003e Chip_SSP_SetBitRate
1a001522 g     F .text	00000028 uxListRemove
1a00337c g     F .text	00000002 Chip_GPIO_Init
1a004d00 g     O .text	00000004 OscRateIn
1a0035d4 g     F .text	0000007c uartInit
1a000ac4 g     F .text	0000000c uint16ToAscii
100023e0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001ca0 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001d98 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a000b60 g     F .text	0000000a _close_r
1a0036cc g     F .text	000001ac gpioInit
10000184 g     O .bss	00000005 NUM
1a0020e4 g     F .text	0000006c xTimerGenericCommand
1a0043d4 g     F .text	000000dc __swsetup_r
1a001594  w    F .text	0000001c vApplicationStackOverflowHook
1a003cf8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003f3c g     F .text	00000078 __sfp
10002364 g     O .bss	00000032 memPoolSto2
1a0042a8 g     F .text	00000022 __sread
1a00394c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004578 g     F .text	00000002 __malloc_lock
1a0028e8 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a003e08 g     F .text	00000054 _fflush_r
1a004f9c g     O .text	00000020 __sf_fake_stdin
1a002efc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
100000ac g     O .bss	00000004 myTaskLedPeriodicoHandle
1a00404e g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	000000cc main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0014ee g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002480 g     F .text	00000024 SVC_Handler
1a004326 g     F .text	00000008 __sclose
1a00081c g     F .text	00000090 myTaskLedPeriodico
1a002094 g     F .text	00000050 xTimerCreateTimerTask
1a00079c g     F .text	00000040 sendQueueToUART
1a0040fc g     F .text	000000b4 _malloc_r
1a0035a8 g     F .text	00000018 uartTxReady
1a001bb0 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a00316c g     F .text	0000003c Chip_Clock_EnableOpts
1a002952 g     F .text	00000008 __stdio_getchar
1a000594 g     F .text	00000058 initKeysMef
1a001056 g     F .text	00000048 xQueueGenericCreate
1a002f18 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002fd0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0034b0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003878 g     F .text	0000006a gpioWrite
1a000b5c  w    F .text	00000002 _fini
1a0041b0 g     F .text	00000030 iprintf
1a001abc g     F .text	000000f4 xTaskResumeAll
1a001904 g     F .text	00000084 vTaskStartScheduler
1a002c04 g     F .text	00000040 Chip_ADC_Init
100023dc g     O .bss	00000004 g_pUsbApi
1a002964 g     F .text	00000038 Board_SetupMuxing
1a000418 g     F .text	00000010 QMPool_put
1a002ad4 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000bde g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0047fc g     F .text	000000ea _printf_common
10000044 g     O .data	00000004 _impure_ptr
1a003cfc g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
10000180 g     O .bss	00000004 myQueueToUARTHandle
1a0035c0 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a00073c g     F .text	0000002c initQueueToUART
1a001ef4 g     F .text	0000000c vTaskMissedYield
100023e0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003478 g     F .text	00000038 Chip_SSP_Init
1a000806 g     F .text	00000016 Led_twist
1a001440 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0019a4 g     F .text	00000118 xTaskIncrementTick
1a0044b0 g     F .text	00000048 __swhatbuf_r
1a002754 g     F .text	00000020 DAC_IRQHandler
1a0028c4 g     F .text	00000024 Board_Debug_Init
1a002948 g     F .text	0000000a __stdio_putchar
1a000fb0 g     F .text	00000084 xQueueGenericReset
100000a8 g       .data	00000000 _edata
1a003380 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0018a0 g     F .text	00000062 xTaskCreate
1a003228 g     F .text	00000154 Chip_SetupCoreClock
1a0042ca g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a0045d0 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a003fb4 g     F .text	0000003c _fwalk_reent
1a002c84 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001c54 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a004fbc g     O .text	00000020 __sf_fake_stdout
1a0005ec g     F .text	0000011c updKeysMef
1a0003cc g     F .text	0000004c QMPool_init
1a001f00 g     F .text	00000020 xTaskGetSchedulerState
1a003cf8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0044f8 g     F .text	00000080 __smakebuf_r
1a002450 g     F .text	0000002c pxPortInitialiseStack
1a0048e8 g     F .text	00000224 _printf_i
1a0031a8 g     F .text	00000034 Chip_Clock_Enable
1a00368c g     F .text	0000000a UART3_IRQHandler
10002344 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0038e2 g     F .text	00000068 gpioRead
1a003968 g     F .text	0000006c boardInit
1a0024a4 g     F .text	00000044 vPortEnterCritical
10002340 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0045d0 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1000234c g     O .bss	00000003 led2
1a0030e0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0034e8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002a08 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 d5 0a 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a ba 6d ff 53     }............m.S
	...
1a00002c:	81 24 00 1a 85 01 00 1a 00 00 00 00 21 25 00 1a     .$..........!%..
1a00003c:	85 25 00 1a                                         .%..

1a000040 <g_pfnVendorVectors>:
1a000040:	55 27 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     U'..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	4d 39 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     M9..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 83 36 00 1a 8d 36 00 1a     .........6...6..
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005020 	.word	0x1a005020
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a8 	.word	0x000000a8
1a000120:	1a005020 	.word	0x1a005020
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005020 	.word	0x1a005020
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005020 	.word	0x1a005020
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005020 	.word	0x1a005020
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a8 	.word	0x100000a8
1a000154:	00002338 	.word	0x00002338
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:


}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f003 f9a0 	bl	1a003504 <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:
Led led1, led2; /* multiples instancias de Led */

/*==================[start of original code]=================================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000300:	b500      	push	{lr}
1a000302:	b083      	sub	sp, #12

   /* ------------- INICIALIZACIONES ------------- */

   /* Inicializar la placa */
   boardConfig();
1a000304:	f003 fb30 	bl	1a003968 <boardInit>

   // Inicializar UART for debug messages
   debugPrintConfigUart( UART_USB, 115200 );
1a000308:	4c23      	ldr	r4, [pc, #140]	; (1a000398 <main+0x98>)
1a00030a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a00030e:	2103      	movs	r1, #3
1a000310:	4620      	mov	r0, r4
1a000312:	f003 fb5f 	bl	1a0039d4 <printInitUart>
   debugPrintlnString( "RTOS2 Clase2_TP1" );
1a000316:	4921      	ldr	r1, [pc, #132]	; (1a00039c <main+0x9c>)
1a000318:	7820      	ldrb	r0, [r4, #0]
1a00031a:	f003 fb63 	bl	1a0039e4 <printString>
1a00031e:	7820      	ldrb	r0, [r4, #0]
1a000320:	f003 fb64 	bl	1a0039ec <printEnter>

   /* Inicialización de la Keys-Mef. Inicializo las 4 teclas de la CIAA*/
   initKeysMef( 4, TEC1, TEC2, TEC3, TEC4 );
1a000324:	2327      	movs	r3, #39	; 0x27
1a000326:	9300      	str	r3, [sp, #0]
1a000328:	2326      	movs	r3, #38	; 0x26
1a00032a:	2225      	movs	r2, #37	; 0x25
1a00032c:	2124      	movs	r1, #36	; 0x24
1a00032e:	2004      	movs	r0, #4
1a000330:	f000 f930 	bl	1a000594 <initKeysMef>

   /* Inicialización de los Leds. Inicializo dos leds de la CIAA*/
   Led_ctor(&led1, LED3 );
1a000334:	212d      	movs	r1, #45	; 0x2d
1a000336:	481a      	ldr	r0, [pc, #104]	; (1a0003a0 <main+0xa0>)
1a000338:	f000 fa50 	bl	1a0007dc <Led_ctor>
   Led_ctor(&led2, LED2 );
1a00033c:	212c      	movs	r1, #44	; 0x2c
1a00033e:	4819      	ldr	r0, [pc, #100]	; (1a0003a4 <main+0xa4>)
1a000340:	f000 fa4c 	bl	1a0007dc <Led_ctor>

   /* Inicialización de las comunicaciones con la UART */
   initQueueToUART( 100 );
1a000344:	2064      	movs	r0, #100	; 0x64
1a000346:	f000 f9f9 	bl	1a00073c <initQueueToUART>

   // Led para dar señal de vida
   gpioWrite( LEDB, ON );
1a00034a:	2101      	movs	r1, #1
1a00034c:	202a      	movs	r0, #42	; 0x2a
1a00034e:	f003 fa93 	bl	1a003878 <gpioWrite>

   // Crear tareas en freeRTOS

   //Task: Maquina de estados y servicios de las teclas
   xTaskCreate(
1a000352:	4b15      	ldr	r3, [pc, #84]	; (1a0003a8 <main+0xa8>)
1a000354:	681b      	ldr	r3, [r3, #0]
1a000356:	9301      	str	r3, [sp, #4]
1a000358:	2401      	movs	r4, #1
1a00035a:	9400      	str	r4, [sp, #0]
1a00035c:	2300      	movs	r3, #0
1a00035e:	22b4      	movs	r2, #180	; 0xb4
1a000360:	4912      	ldr	r1, [pc, #72]	; (1a0003ac <main+0xac>)
1a000362:	4813      	ldr	r0, [pc, #76]	; (1a0003b0 <main+0xb0>)
1a000364:	f001 fa9c 	bl	1a0018a0 <xTaskCreate>
      tskIDLE_PRIORITY+1,
	  updKeysMef_Handle
   );

   //Task: servicio de parpadeo de leds
   xTaskCreate(
1a000368:	4b12      	ldr	r3, [pc, #72]	; (1a0003b4 <main+0xb4>)
1a00036a:	681b      	ldr	r3, [r3, #0]
1a00036c:	9301      	str	r3, [sp, #4]
1a00036e:	9400      	str	r4, [sp, #0]
1a000370:	2300      	movs	r3, #0
1a000372:	22b4      	movs	r2, #180	; 0xb4
1a000374:	4910      	ldr	r1, [pc, #64]	; (1a0003b8 <main+0xb8>)
1a000376:	4811      	ldr	r0, [pc, #68]	; (1a0003bc <main+0xbc>)
1a000378:	f001 fa92 	bl	1a0018a0 <xTaskCreate>
      tskIDLE_PRIORITY+1,
	  myTaskLedPeriodicoHandle
   );

   //Task: servicio de recepción e impresion de cola de mensajes
   xTaskCreate(
1a00037c:	4b10      	ldr	r3, [pc, #64]	; (1a0003c0 <main+0xc0>)
1a00037e:	681b      	ldr	r3, [r3, #0]
1a000380:	9301      	str	r3, [sp, #4]
1a000382:	9400      	str	r4, [sp, #0]
1a000384:	2300      	movs	r3, #0
1a000386:	22b4      	movs	r2, #180	; 0xb4
1a000388:	490e      	ldr	r1, [pc, #56]	; (1a0003c4 <main+0xc4>)
1a00038a:	480f      	ldr	r0, [pc, #60]	; (1a0003c8 <main+0xc8>)
1a00038c:	f001 fa88 	bl	1a0018a0 <xTaskCreate>
	  updQueueToUARTHandle
   );


   // Iniciar scheduler
   vTaskStartScheduler();
1a000390:	f001 fab8 	bl	1a001904 <vTaskStartScheduler>
1a000394:	e7fe      	b.n	1a000394 <main+0x94>
1a000396:	bf00      	nop
1a000398:	100000a8 	.word	0x100000a8
1a00039c:	1a004bb0 	.word	0x1a004bb0
1a0003a0:	10002348 	.word	0x10002348
1a0003a4:	1000234c 	.word	0x1000234c
1a0003a8:	100000b0 	.word	0x100000b0
1a0003ac:	1a004bc4 	.word	0x1a004bc4
1a0003b0:	1a0005ed 	.word	0x1a0005ed
1a0003b4:	100000ac 	.word	0x100000ac
1a0003b8:	1a004bd0 	.word	0x1a004bd0
1a0003bc:	1a00081d 	.word	0x1a00081d
1a0003c0:	100000b4 	.word	0x100000b4
1a0003c4:	1a004be4 	.word	0x1a004be4
1a0003c8:	1a000769 	.word	0x1a000769

1a0003cc <QMPool_init>:

#include "qmpool2.h"
#include "FreeRTOS.h"

void QMPool_init(QMPool * const me, void * const poolSto, uint_fast32_t poolSize, uint_fast16_t blockSize)
{
1a0003cc:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock       *fb;
    uint_fast16_t nblocks;
    me->free_head = poolSto;
1a0003ce:	6001      	str	r1, [r0, #0]
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock); /* round up the blockSize to fit an integer free blocks, no division */
1a0003d0:	2404      	movs	r4, #4
1a0003d2:	8184      	strh	r4, [r0, #12]
    nblocks       = (uint_fast16_t)1;               /* start with just one */
1a0003d4:	2601      	movs	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) { /* #free blocks that fit in one memory block */
1a0003d6:	e002      	b.n	1a0003de <QMPool_init+0x12>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
1a0003d8:	3404      	adds	r4, #4
1a0003da:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a0003dc:	3601      	adds	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) { /* #free blocks that fit in one memory block */
1a0003de:	8984      	ldrh	r4, [r0, #12]
1a0003e0:	b29d      	uxth	r5, r3
1a0003e2:	42ac      	cmp	r4, r5
1a0003e4:	d3f8      	bcc.n	1a0003d8 <QMPool_init+0xc>
    }
    blockSize = (uint_fast16_t)me->blockSize;       /* round-up to nearest block */
1a0003e6:	4627      	mov	r7, r4
    poolSize -= (uint_fast32_t)blockSize;           /* don't count the last block */
1a0003e8:	1b14      	subs	r4, r2, r4
    me->nTot  = (QMPoolCtr)1;                       /* the last block already in the pool */
1a0003ea:	2301      	movs	r3, #1
1a0003ec:	81c3      	strh	r3, [r0, #14]
    fb        = (QFreeBlock *)me->free_head;        /* start at the head of the free list */
1a0003ee:	6803      	ldr	r3, [r0, #0]
    while (poolSize >= (uint_fast32_t)blockSize) {  /* chain all blocks together in a free-list... */
1a0003f0:	e007      	b.n	1a000402 <QMPool_init+0x36>
        fb->next  = &fb[nblocks];                   /* point next link to next block */
1a0003f2:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a0003f6:	601a      	str	r2, [r3, #0]
        fb        = fb->next;                       /* advance to the next block */
1a0003f8:	681b      	ldr	r3, [r3, #0]
        poolSize -= (uint_fast32_t)blockSize;       /* reduce available pool size */
1a0003fa:	1be4      	subs	r4, r4, r7
        ++me->nTot;                                 /* increment the number of blocks so far */
1a0003fc:	89c5      	ldrh	r5, [r0, #14]
1a0003fe:	3501      	adds	r5, #1
1a000400:	81c5      	strh	r5, [r0, #14]
    while (poolSize >= (uint_fast32_t)blockSize) {  /* chain all blocks together in a free-list... */
1a000402:	42bc      	cmp	r4, r7
1a000404:	d2f5      	bcs.n	1a0003f2 <QMPool_init+0x26>
    }
    fb->next  = (QFreeBlock *)0;                    /* the last link points to NULL */
1a000406:	2200      	movs	r2, #0
1a000408:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;                           /* all blocks are free */
1a00040a:	89c2      	ldrh	r2, [r0, #14]
1a00040c:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;                           /* the minimum number of free blocks */
1a00040e:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;                            /* the original start this pool buffer */
1a000410:	6041      	str	r1, [r0, #4]
    me->end   = fb;                                 /* the last block in this pool */
1a000412:	6083      	str	r3, [r0, #8]
}
1a000414:	bcf0      	pop	{r4, r5, r6, r7}
1a000416:	4770      	bx	lr

1a000418 <QMPool_put>:

void QMPool_put(QMPool * const me, void *b )
{
      ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head; /* link into list */
1a000418:	6803      	ldr	r3, [r0, #0]
1a00041a:	600b      	str	r3, [r1, #0]
      me->free_head = b;                                     /* set as new head of the free list */
1a00041c:	6001      	str	r1, [r0, #0]
      ++me->nFree;                                           /* one more free block in this pool */
1a00041e:	8a03      	ldrh	r3, [r0, #16]
1a000420:	3301      	adds	r3, #1
1a000422:	b29b      	uxth	r3, r3
1a000424:	8203      	strh	r3, [r0, #16]
}
1a000426:	4770      	bx	lr

1a000428 <QMPool_get>:

void *QMPool_get(QMPool * const me, uint_fast16_t const margin )
{
1a000428:	4603      	mov	r3, r0
   QFreeBlock *fb;
      if (me->nFree > (QMPoolCtr)margin) {               /* have more free blocks than the requested margin? */
1a00042a:	8a02      	ldrh	r2, [r0, #16]
1a00042c:	b292      	uxth	r2, r2
1a00042e:	b289      	uxth	r1, r1
1a000430:	428a      	cmp	r2, r1
1a000432:	d90e      	bls.n	1a000452 <QMPool_get+0x2a>
         fb            = (QFreeBlock *)me->free_head;    /* get a free block */
1a000434:	6800      	ldr	r0, [r0, #0]
         me->free_head = fb->next;                       /* set the head to the next free block */
1a000436:	6802      	ldr	r2, [r0, #0]
1a000438:	601a      	str	r2, [r3, #0]
         --me->nFree;                                    /* one less free block */
1a00043a:	8a1a      	ldrh	r2, [r3, #16]
1a00043c:	3a01      	subs	r2, #1
1a00043e:	b292      	uxth	r2, r2
1a000440:	821a      	strh	r2, [r3, #16]
         if (me->nMin > me->nFree) me->nMin = me->nFree; /* remember the new minimum */
1a000442:	8a59      	ldrh	r1, [r3, #18]
1a000444:	8a1a      	ldrh	r2, [r3, #16]
1a000446:	b292      	uxth	r2, r2
1a000448:	4291      	cmp	r1, r2
1a00044a:	d903      	bls.n	1a000454 <QMPool_get+0x2c>
1a00044c:	8a1a      	ldrh	r2, [r3, #16]
1a00044e:	825a      	strh	r2, [r3, #18]
1a000450:	4770      	bx	lr
      }
      else
         fb = (QFreeBlock *)0;
1a000452:	2000      	movs	r0, #0
   return fb;                                         /* return the block or NULL pointer to the caller */
}
1a000454:	4770      	bx	lr
1a000456:	Address 0x000000001a000456 is out of bounds.


1a000458 <srvKeysMef>:
// Para no complicarla, pongo las acciones (f) directamente en los case y la dejo como: void srvKeysMef ( void )
//
// Como demo mando al serie un string con los estados y eventos activados por las teclas/botones/pulsadores
//
/*------------------------------------------------------------------------------------------------------------- */
void srvKeysMef( void ){
1a000458:	b510      	push	{r4, lr}
1a00045a:	b084      	sub	sp, #16
	void *ptr = NULL;			//El puntero para comunicaciones

	// ---------- REPETIR POR SIEMPRE --------------------------

	//Loop de servicios de la Mef
	for (uint8_t i = 0; i < nKEYS; i++) {
1a00045c:	2400      	movs	r4, #0
1a00045e:	e02f      	b.n	1a0004c0 <srvKeysMef+0x68>
				//LED_DEBUG( (LEDB + i, OFF ) );
				PRINT_DEBUG( ("KEY_ARR_SHORT: \t key: %i \t gpio: %i\n", i, teclas[i].tecla ) );
			    //TO-DO

				//preparo para enviar
				uint16ToAscii( (uint16_t)teclas[i].tiempoDOWN );					//convierto el tiempo en digitos
1a000460:	4b47      	ldr	r3, [pc, #284]	; (1a000580 <srvKeysMef+0x128>)
1a000462:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
1a000466:	8890      	ldrh	r0, [r2, #4]
1a000468:	f000 fb2c 	bl	1a000ac4 <uint16ToAscii>

				uint8_t elMsj[11];

			    elMsj[ 0 ] = 't';
1a00046c:	2374      	movs	r3, #116	; 0x74
1a00046e:	f88d 3004 	strb.w	r3, [sp, #4]
			    elMsj[ 1 ] = 'e';
1a000472:	2265      	movs	r2, #101	; 0x65
1a000474:	f88d 2005 	strb.w	r2, [sp, #5]
			    elMsj[ 2 ] = 'c';
1a000478:	2263      	movs	r2, #99	; 0x63
1a00047a:	f88d 2006 	strb.w	r2, [sp, #6]
			    elMsj[ 3 ] =  1 + 48;
1a00047e:	2231      	movs	r2, #49	; 0x31
1a000480:	f88d 2007 	strb.w	r2, [sp, #7]
			    elMsj[ 4 ] = ' ';
1a000484:	2220      	movs	r2, #32
1a000486:	f88d 2008 	strb.w	r2, [sp, #8]
			    elMsj[ 5 ] = 't';
1a00048a:	f88d 3009 	strb.w	r3, [sp, #9]
			    elMsj[ 6 ] = NUM[3] + 48;	//pongo los dígitos como ASCII
1a00048e:	4b3d      	ldr	r3, [pc, #244]	; (1a000584 <srvKeysMef+0x12c>)
1a000490:	78da      	ldrb	r2, [r3, #3]
1a000492:	3230      	adds	r2, #48	; 0x30
1a000494:	f88d 200a 	strb.w	r2, [sp, #10]
			    elMsj[ 7 ] = NUM[2] + 48;
1a000498:	789a      	ldrb	r2, [r3, #2]
1a00049a:	3230      	adds	r2, #48	; 0x30
1a00049c:	f88d 200b 	strb.w	r2, [sp, #11]
			    elMsj[ 8 ] = NUM[1] + 48;
1a0004a0:	785a      	ldrb	r2, [r3, #1]
1a0004a2:	3230      	adds	r2, #48	; 0x30
1a0004a4:	f88d 200c 	strb.w	r2, [sp, #12]
			    elMsj[ 9 ] = NUM[0] + 48;
1a0004a8:	781b      	ldrb	r3, [r3, #0]
1a0004aa:	3330      	adds	r3, #48	; 0x30
1a0004ac:	f88d 300d 	strb.w	r3, [sp, #13]
			    elMsj[ 10] =  0;
1a0004b0:	2300      	movs	r3, #0
1a0004b2:	f88d 300e 	strb.w	r3, [sp, #14]

			    sendQueueToUART( elMsj );
1a0004b6:	a801      	add	r0, sp, #4
1a0004b8:	f000 f970 	bl	1a00079c <sendQueueToUART>
	for (uint8_t i = 0; i < nKEYS; i++) {
1a0004bc:	3401      	adds	r4, #1
1a0004be:	b2e4      	uxtb	r4, r4
1a0004c0:	4622      	mov	r2, r4
1a0004c2:	4b31      	ldr	r3, [pc, #196]	; (1a000588 <srvKeysMef+0x130>)
1a0004c4:	681b      	ldr	r3, [r3, #0]
1a0004c6:	429c      	cmp	r4, r3
1a0004c8:	da57      	bge.n	1a00057a <srvKeysMef+0x122>
		if ( teclas[i].estado != KEY_ARR_LONG ) bKEY_ARR_LONG[i] = FALSE;
1a0004ca:	4b2d      	ldr	r3, [pc, #180]	; (1a000580 <srvKeysMef+0x128>)
1a0004cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a0004d0:	785b      	ldrb	r3, [r3, #1]
1a0004d2:	2b04      	cmp	r3, #4
1a0004d4:	d002      	beq.n	1a0004dc <srvKeysMef+0x84>
1a0004d6:	492d      	ldr	r1, [pc, #180]	; (1a00058c <srvKeysMef+0x134>)
1a0004d8:	2000      	movs	r0, #0
1a0004da:	5488      	strb	r0, [r1, r2]
		if ( teclas[i].estado != KEY_ABA_LONG ) bKEY_ABA_LONG[i] = FALSE;
1a0004dc:	2b07      	cmp	r3, #7
1a0004de:	d002      	beq.n	1a0004e6 <srvKeysMef+0x8e>
1a0004e0:	492b      	ldr	r1, [pc, #172]	; (1a000590 <srvKeysMef+0x138>)
1a0004e2:	2000      	movs	r0, #0
1a0004e4:	5488      	strb	r0, [r1, r2]
		switch ( teclas[i].estado ){
1a0004e6:	2b07      	cmp	r3, #7
1a0004e8:	d8e8      	bhi.n	1a0004bc <srvKeysMef+0x64>
1a0004ea:	a101      	add	r1, pc, #4	; (adr r1, 1a0004f0 <srvKeysMef+0x98>)
1a0004ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1a0004f0:	1a000557 	.word	0x1a000557
1a0004f4:	1a00055f 	.word	0x1a00055f
1a0004f8:	1a000461 	.word	0x1a000461
1a0004fc:	1a000571 	.word	0x1a000571
1a000500:	1a000511 	.word	0x1a000511
1a000504:	1a000521 	.word	0x1a000521
1a000508:	1a000567 	.word	0x1a000567
1a00050c:	1a00052d 	.word	0x1a00052d

				break;

			case KEY_ARR_LONG:
				LED_DEBUG( (LEDB + i, OFF ) );
				if ( ! bKEY_ARR_LONG[i] ){			//Inhibiendo en la repetición KEY_ARR_LONG
1a000510:	4b1e      	ldr	r3, [pc, #120]	; (1a00058c <srvKeysMef+0x134>)
1a000512:	5c9b      	ldrb	r3, [r3, r2]
1a000514:	2b00      	cmp	r3, #0
1a000516:	d1d1      	bne.n	1a0004bc <srvKeysMef+0x64>
					   bKEY_ARR_LONG[i]  = TRUE;
1a000518:	4b1c      	ldr	r3, [pc, #112]	; (1a00058c <srvKeysMef+0x134>)
1a00051a:	2101      	movs	r1, #1
1a00051c:	5499      	strb	r1, [r3, r2]
1a00051e:	e7cd      	b.n	1a0004bc <srvKeysMef+0x64>
					   //TO-DO
				}
				break;

			case KEY_ABA_SHORT:
				teclas[i].tiempoDOWN = xTiempoMinFall;          //contando el 1er tiempo abajo. Esto tambien es el RESET del contador
1a000520:	4b17      	ldr	r3, [pc, #92]	; (1a000580 <srvKeysMef+0x128>)
1a000522:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
1a000526:	2332      	movs	r3, #50	; 0x32
1a000528:	6053      	str	r3, [r2, #4]
				//LED_DEBUG( (LEDB + i, ON) );
				PRINT_DEBUG( ("KEY_ABA_SHORT: \t key: %i \t gpio: %i\n", i, teclas[i].tecla ) );
			     //TO-DO
				break;
1a00052a:	e7c7      	b.n	1a0004bc <srvKeysMef+0x64>

			case KEY_ABA_LONG:
				LED_DEBUG( (LEDB + i, ON) );
				if ( bKEY_ABA_LONG[i]  )  {
1a00052c:	4b18      	ldr	r3, [pc, #96]	; (1a000590 <srvKeysMef+0x138>)
1a00052e:	5c9b      	ldrb	r3, [r3, r2]
1a000530:	b133      	cbz	r3, 1a000540 <srvKeysMef+0xe8>
					teclas[i].tiempoDOWN += xTiempoAntiRebote;  //sumando el 3er y sucesivos tiempos abajo
1a000532:	4b13      	ldr	r3, [pc, #76]	; (1a000580 <srvKeysMef+0x128>)
1a000534:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
1a000538:	6853      	ldr	r3, [r2, #4]
1a00053a:	3319      	adds	r3, #25
1a00053c:	6053      	str	r3, [r2, #4]
1a00053e:	e7bd      	b.n	1a0004bc <srvKeysMef+0x64>
				}else{
				     bKEY_ABA_LONG[i]  = TRUE;           	   //Inhibo la repetición KEY_ABA_LONG
1a000540:	4b13      	ldr	r3, [pc, #76]	; (1a000590 <srvKeysMef+0x138>)
1a000542:	2101      	movs	r1, #1
1a000544:	5499      	strb	r1, [r3, r2]
				     teclas[i].tiempoDOWN += xTiempoMinDown;   //sumando el 2do tiempo abajo
1a000546:	4b0e      	ldr	r3, [pc, #56]	; (1a000580 <srvKeysMef+0x128>)
1a000548:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
1a00054c:	6853      	ldr	r3, [r2, #4]
1a00054e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
1a000552:	6053      	str	r3, [r2, #4]
1a000554:	e7b2      	b.n	1a0004bc <srvKeysMef+0x64>
				}
				break;

			//Estados transitorios No recomiendo usarlos para TO-DO
			case KEY_FALL:
				vTaskDelay( xTiempoMinFall );
1a000556:	2032      	movs	r0, #50	; 0x32
1a000558:	f001 fb7c 	bl	1a001c54 <vTaskDelay>
				break;
1a00055c:	e7ae      	b.n	1a0004bc <srvKeysMef+0x64>
			case KEY_RISE:
				vTaskDelay( xTiempoMinRise );
1a00055e:	2032      	movs	r0, #50	; 0x32
1a000560:	f001 fb78 	bl	1a001c54 <vTaskDelay>
				break;
1a000564:	e7aa      	b.n	1a0004bc <srvKeysMef+0x64>
			case KEY_ABA_TRANS:
				vTaskDelay( xTiempoMinDown );
1a000566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00056a:	f001 fb73 	bl	1a001c54 <vTaskDelay>
				break;
1a00056e:	e7a5      	b.n	1a0004bc <srvKeysMef+0x64>
			case KEY_ARR_TRANS:
				vTaskDelay( xTiempoMinUp );
1a000570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000574:	f001 fb6e 	bl	1a001c54 <vTaskDelay>
				break;
1a000578:	e7a0      	b.n	1a0004bc <srvKeysMef+0x64>
				//DEBUG_PRINT( ("EVENT_NULL: %i\n", teclas[i].tecla ) );
			     //TO-DO
				break;
		}
	}
}
1a00057a:	b004      	add	sp, #16
1a00057c:	bd10      	pop	{r4, pc}
1a00057e:	bf00      	nop
1a000580:	100000e0 	.word	0x100000e0
1a000584:	10000184 	.word	0x10000184
1a000588:	10000000 	.word	0x10000000
1a00058c:	100000cc 	.word	0x100000cc
1a000590:	100000b8 	.word	0x100000b8

1a000594 <initKeysMef>:
void initKeysMef( int nArgs, ... ){
1a000594:	b40f      	push	{r0, r1, r2, r3}
1a000596:	b570      	push	{r4, r5, r6, lr}
1a000598:	b082      	sub	sp, #8
1a00059a:	9e06      	ldr	r6, [sp, #24]
	if ( nArgs > KEYSMAX ) nArgs = KEYSMAX;  //APB sencillo, podria complicarlo un poco pero ahora no. . .
1a00059c:	2e14      	cmp	r6, #20
1a00059e:	dd00      	ble.n	1a0005a2 <initKeysMef+0xe>
1a0005a0:	2614      	movs	r6, #20
	va_start(ap, nArgs);
1a0005a2:	ab07      	add	r3, sp, #28
1a0005a4:	9301      	str	r3, [sp, #4]
	for(uint8_t i = 0; i < nArgs; i++){
1a0005a6:	2400      	movs	r4, #0
1a0005a8:	e013      	b.n	1a0005d2 <initKeysMef+0x3e>
		teclas[i].tecla =  va_arg(ap, int); 		//Si quiero castear a gpioMap_t lo permite revirtiendo a int y luego se cuelga :-(
1a0005aa:	9b01      	ldr	r3, [sp, #4]
1a0005ac:	1d1a      	adds	r2, r3, #4
1a0005ae:	9201      	str	r2, [sp, #4]
1a0005b0:	f993 0000 	ldrsb.w	r0, [r3]
1a0005b4:	4d0b      	ldr	r5, [pc, #44]	; (1a0005e4 <initKeysMef+0x50>)
1a0005b6:	f805 0034 	strb.w	r0, [r5, r4, lsl #3]
		gpioConfig( teclas[i].tecla, GPIO_INPUT );  //supongo que podria ser también GPIO_INPUT_PULLUP. . . hay que ver que puertos lo toleran. . .
1a0005ba:	2100      	movs	r1, #0
1a0005bc:	f003 f886 	bl	1a0036cc <gpioInit>
		teclas[i].estado     = KEY_ARR_LONG;		//También podría en teoría ser KEY_ABA_LONG. . .
1a0005c0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
1a0005c4:	2204      	movs	r2, #4
1a0005c6:	705a      	strb	r2, [r3, #1]
		teclas[i].evento     = EVENT_KEY_NULL;		//No hay eventos al inicializar
1a0005c8:	709a      	strb	r2, [r3, #2]
		teclas[i].tiempoDOWN = 0;					//No hay tiempo abajo de la key
1a0005ca:	2200      	movs	r2, #0
1a0005cc:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < nArgs; i++){
1a0005ce:	3401      	adds	r4, #1
1a0005d0:	b2e4      	uxtb	r4, r4
1a0005d2:	42b4      	cmp	r4, r6
1a0005d4:	dbe9      	blt.n	1a0005aa <initKeysMef+0x16>
	nKEYS = nArgs;	//Recupero el verdadero número de teclas a loopear.
1a0005d6:	4b04      	ldr	r3, [pc, #16]	; (1a0005e8 <initKeysMef+0x54>)
1a0005d8:	601e      	str	r6, [r3, #0]
}
1a0005da:	b002      	add	sp, #8
1a0005dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a0005e0:	b004      	add	sp, #16
1a0005e2:	4770      	bx	lr
1a0005e4:	100000e0 	.word	0x100000e0
1a0005e8:	10000000 	.word	0x10000000

1a0005ec <updKeysMef>:
void updKeysMef( void* taskParmPtr ){
1a0005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0005ee:	e081      	b.n	1a0006f4 <updKeysMef+0x108>
				transState = TRANS_KEY_BOTT;
1a0005f0:	2301      	movs	r3, #1
1a0005f2:	e01a      	b.n	1a00062a <updKeysMef+0x3e>
					switch ( transState ){
1a0005f4:	2b00      	cmp	r3, #0
1a0005f6:	d063      	beq.n	1a0006c0 <updKeysMef+0xd4>
1a0005f8:	bb63      	cbnz	r3, 1a000654 <updKeysMef+0x68>
			nextEvent = EVENT_KEY_NULL;
1a0005fa:	2204      	movs	r2, #4
			teclas[i].estado = nextState;
1a0005fc:	4b40      	ldr	r3, [pc, #256]	; (1a000700 <updKeysMef+0x114>)
1a0005fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
1a000602:	705e      	strb	r6, [r3, #1]
			teclas[i].evento = nextEvent;
1a000604:	709a      	strb	r2, [r3, #2]
		for (uint8_t i = 0; i < nKEYS; i++) {
1a000606:	3401      	adds	r4, #1
1a000608:	b2e4      	uxtb	r4, r4
1a00060a:	4627      	mov	r7, r4
1a00060c:	4b3d      	ldr	r3, [pc, #244]	; (1a000704 <updKeysMef+0x118>)
1a00060e:	681b      	ldr	r3, [r3, #0]
1a000610:	429c      	cmp	r4, r3
1a000612:	da6d      	bge.n	1a0006f0 <updKeysMef+0x104>
			prevState = teclas[i].estado;
1a000614:	4b3a      	ldr	r3, [pc, #232]	; (1a000700 <updKeysMef+0x114>)
1a000616:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
1a00061a:	7855      	ldrb	r5, [r2, #1]
			if ( gpioRead( teclas[i].tecla ) ) {
1a00061c:	f913 0034 	ldrsb.w	r0, [r3, r4, lsl #3]
1a000620:	f003 f95f 	bl	1a0038e2 <gpioRead>
1a000624:	2800      	cmp	r0, #0
1a000626:	d0e3      	beq.n	1a0005f0 <updKeysMef+0x4>
				transState = TRANS_KEY_TOP;
1a000628:	2300      	movs	r3, #0
			switch ( prevState ){
1a00062a:	2d07      	cmp	r5, #7
1a00062c:	d846      	bhi.n	1a0006bc <updKeysMef+0xd0>
1a00062e:	a201      	add	r2, pc, #4	; (adr r2, 1a000634 <updKeysMef+0x48>)
1a000630:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
1a000634:	1a00065b 	.word	0x1a00065b
1a000638:	1a000693 	.word	0x1a000693
1a00063c:	1a0006a1 	.word	0x1a0006a1
1a000640:	1a0006af 	.word	0x1a0006af
1a000644:	1a0005f5 	.word	0x1a0005f5
1a000648:	1a000669 	.word	0x1a000669
1a00064c:	1a000677 	.word	0x1a000677
1a000650:	1a000685 	.word	0x1a000685
			nextEvent = EVENT_KEY_NULL;
1a000654:	2204      	movs	r2, #4
					  case TRANS_KEY_BOTT: nextState = KEY_FALL;       break;
1a000656:	2600      	movs	r6, #0
1a000658:	e7d0      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a00065a:	b3a3      	cbz	r3, 1a0006c6 <updKeysMef+0xda>
1a00065c:	b90b      	cbnz	r3, 1a000662 <updKeysMef+0x76>
			nextEvent = EVENT_KEY_NULL;
1a00065e:	2204      	movs	r2, #4
1a000660:	e7cc      	b.n	1a0005fc <updKeysMef+0x10>
										   nextEvent = EVENT_KEY_DOWN; break;	//EVENT_KEY_DOWN
1a000662:	2201      	movs	r2, #1
					  case TRANS_KEY_BOTT: nextState = KEY_ABA_SHORT;
1a000664:	2605      	movs	r6, #5
										   nextEvent = EVENT_KEY_DOWN; break;	//EVENT_KEY_DOWN
1a000666:	e7c9      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a000668:	b383      	cbz	r3, 1a0006cc <updKeysMef+0xe0>
1a00066a:	b90b      	cbnz	r3, 1a000670 <updKeysMef+0x84>
			nextEvent = EVENT_KEY_NULL;
1a00066c:	2204      	movs	r2, #4
1a00066e:	e7c5      	b.n	1a0005fc <updKeysMef+0x10>
1a000670:	2204      	movs	r2, #4
					  case TRANS_KEY_BOTT: nextState = KEY_ABA_TRANS;  break;
1a000672:	2606      	movs	r6, #6
1a000674:	e7c2      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a000676:	b363      	cbz	r3, 1a0006d2 <updKeysMef+0xe6>
1a000678:	b90b      	cbnz	r3, 1a00067e <updKeysMef+0x92>
			nextEvent = EVENT_KEY_NULL;
1a00067a:	2204      	movs	r2, #4
1a00067c:	e7be      	b.n	1a0005fc <updKeysMef+0x10>
1a00067e:	2204      	movs	r2, #4
					  case TRANS_KEY_BOTT: nextState = KEY_ABA_LONG;   break;
1a000680:	2607      	movs	r6, #7
1a000682:	e7bb      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a000684:	b343      	cbz	r3, 1a0006d8 <updKeysMef+0xec>
1a000686:	b90b      	cbnz	r3, 1a00068c <updKeysMef+0xa0>
			nextEvent = EVENT_KEY_NULL;
1a000688:	2204      	movs	r2, #4
1a00068a:	e7b7      	b.n	1a0005fc <updKeysMef+0x10>
					  case TRANS_KEY_BOTT: nextState = KEY_ABA_LONG;   break;   //permanece pulsada abajo
1a00068c:	462e      	mov	r6, r5
			nextEvent = EVENT_KEY_NULL;
1a00068e:	2204      	movs	r2, #4
					  case TRANS_KEY_BOTT: nextState = KEY_ABA_LONG;   break;   //permanece pulsada abajo
1a000690:	e7b4      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a000692:	b323      	cbz	r3, 1a0006de <updKeysMef+0xf2>
1a000694:	b90b      	cbnz	r3, 1a00069a <updKeysMef+0xae>
			nextEvent = EVENT_KEY_NULL;
1a000696:	2204      	movs	r2, #4
1a000698:	e7b0      	b.n	1a0005fc <updKeysMef+0x10>
1a00069a:	2204      	movs	r2, #4
					  case TRANS_KEY_BOTT: nextState = KEY_ABA_SHORT;  break;
1a00069c:	2605      	movs	r6, #5
1a00069e:	e7ad      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a0006a0:	b303      	cbz	r3, 1a0006e4 <updKeysMef+0xf8>
1a0006a2:	b90b      	cbnz	r3, 1a0006a8 <updKeysMef+0xbc>
			nextEvent = EVENT_KEY_NULL;
1a0006a4:	2204      	movs	r2, #4
1a0006a6:	e7a9      	b.n	1a0005fc <updKeysMef+0x10>
1a0006a8:	2204      	movs	r2, #4
					  case TRANS_KEY_BOTT: nextState = KEY_FALL;       break;
1a0006aa:	2600      	movs	r6, #0
1a0006ac:	e7a6      	b.n	1a0005fc <updKeysMef+0x10>
					  switch ( transState ){
1a0006ae:	b1e3      	cbz	r3, 1a0006ea <updKeysMef+0xfe>
1a0006b0:	b90b      	cbnz	r3, 1a0006b6 <updKeysMef+0xca>
			nextEvent = EVENT_KEY_NULL;
1a0006b2:	2204      	movs	r2, #4
1a0006b4:	e7a2      	b.n	1a0005fc <updKeysMef+0x10>
										   nextEvent = EVENT_KEY_2CLICK;break;	//EVENT_KEY_2CLICK
1a0006b6:	2203      	movs	r2, #3
					  case TRANS_KEY_BOTT: nextState = KEY_FALL;
1a0006b8:	2600      	movs	r6, #0
										   nextEvent = EVENT_KEY_2CLICK;break;	//EVENT_KEY_2CLICK
1a0006ba:	e79f      	b.n	1a0005fc <updKeysMef+0x10>
			nextEvent = EVENT_KEY_NULL;
1a0006bc:	2204      	movs	r2, #4
1a0006be:	e79d      	b.n	1a0005fc <updKeysMef+0x10>
					  case TRANS_KEY_TOP : nextState = KEY_ARR_LONG;   break;
1a0006c0:	462e      	mov	r6, r5
			nextEvent = EVENT_KEY_NULL;
1a0006c2:	2204      	movs	r2, #4
1a0006c4:	e79a      	b.n	1a0005fc <updKeysMef+0x10>
1a0006c6:	2204      	movs	r2, #4
					  case TRANS_KEY_TOP : nextState = KEY_ARR_SHORT;  break;
1a0006c8:	2602      	movs	r6, #2
1a0006ca:	e797      	b.n	1a0005fc <updKeysMef+0x10>
			nextEvent = EVENT_KEY_NULL;
1a0006cc:	2204      	movs	r2, #4
					  case TRANS_KEY_TOP : nextState = KEY_RISE;       break;
1a0006ce:	2601      	movs	r6, #1
1a0006d0:	e794      	b.n	1a0005fc <updKeysMef+0x10>
										   nextEvent = EVENT_KEY_CLICK;break;	//EVENT_KEY_CLICK
1a0006d2:	2202      	movs	r2, #2
					  case TRANS_KEY_TOP : nextState = KEY_RISE;
1a0006d4:	2601      	movs	r6, #1
1a0006d6:	e791      	b.n	1a0005fc <updKeysMef+0x10>
			nextEvent = EVENT_KEY_NULL;
1a0006d8:	2204      	movs	r2, #4
					  case TRANS_KEY_TOP : nextState = KEY_RISE;       break;
1a0006da:	2601      	movs	r6, #1
1a0006dc:	e78e      	b.n	1a0005fc <updKeysMef+0x10>
										   nextEvent = EVENT_KEY_UP;   break;	//EVENT_KEY_UP
1a0006de:	2200      	movs	r2, #0
					  case TRANS_KEY_TOP : nextState = KEY_ARR_SHORT;
1a0006e0:	2602      	movs	r6, #2
1a0006e2:	e78b      	b.n	1a0005fc <updKeysMef+0x10>
			nextEvent = EVENT_KEY_NULL;
1a0006e4:	2204      	movs	r2, #4
					  case TRANS_KEY_TOP : nextState = KEY_ARR_TRANS;  break;
1a0006e6:	2603      	movs	r6, #3
1a0006e8:	e788      	b.n	1a0005fc <updKeysMef+0x10>
			nextEvent = EVENT_KEY_NULL;
1a0006ea:	2204      	movs	r2, #4
					  case TRANS_KEY_TOP : nextState = KEY_ARR_LONG;    break;
1a0006ec:	4616      	mov	r6, r2
1a0006ee:	e785      	b.n	1a0005fc <updKeysMef+0x10>
		srvKeysMef();
1a0006f0:	f7ff feb2 	bl	1a000458 <srvKeysMef>
 	    vTaskDelay( xTiempoAntiRebote );
1a0006f4:	2019      	movs	r0, #25
1a0006f6:	f001 faad 	bl	1a001c54 <vTaskDelay>
		for (uint8_t i = 0; i < nKEYS; i++) {
1a0006fa:	2400      	movs	r4, #0
1a0006fc:	e785      	b.n	1a00060a <updKeysMef+0x1e>
1a0006fe:	bf00      	nop
1a000700:	100000e0 	.word	0x100000e0
1a000704:	10000000 	.word	0x10000000

1a000708 <strlen0>:
/* strlen0: retorna la longitud del string s incluido el 0 final */
static uint8_t strlen0( uint8_t * s )
{
    uint8_t n;

    for (n = 0; *s != '\0'; s++)
1a000708:	2300      	movs	r3, #0
1a00070a:	e002      	b.n	1a000712 <strlen0+0xa>
        n++;
1a00070c:	3301      	adds	r3, #1
1a00070e:	b2db      	uxtb	r3, r3
    for (n = 0; *s != '\0'; s++)
1a000710:	3001      	adds	r0, #1
1a000712:	7802      	ldrb	r2, [r0, #0]
1a000714:	2a00      	cmp	r2, #0
1a000716:	d1f9      	bne.n	1a00070c <strlen0+0x4>
    return n + 1;
1a000718:	1c58      	adds	r0, r3, #1
}
1a00071a:	b2c0      	uxtb	r0, r0
1a00071c:	4770      	bx	lr

1a00071e <copiarStrToStr>:

/*Copia el strI en el strO, solo considera la longitud del inicial */
static void copiarStrToStr( uint8_t * strI,  uint8_t * strO){
1a00071e:	b538      	push	{r3, r4, r5, lr}
1a000720:	4605      	mov	r5, r0
1a000722:	460c      	mov	r4, r1
	uint8_t strLng;

	strLng = strlen0( strI );  // recordar que incluye el 0 final
1a000724:	f7ff fff0 	bl	1a000708 <strlen0>

	for( uint8_t i = 0; i < strLng ; i++){
1a000728:	2300      	movs	r3, #0
1a00072a:	e003      	b.n	1a000734 <copiarStrToStr+0x16>
		*( strO + i ) =  *( strI + i );
1a00072c:	5cea      	ldrb	r2, [r5, r3]
1a00072e:	54e2      	strb	r2, [r4, r3]
	for( uint8_t i = 0; i < strLng ; i++){
1a000730:	3301      	adds	r3, #1
1a000732:	b2db      	uxtb	r3, r3
1a000734:	4283      	cmp	r3, r0
1a000736:	d3f9      	bcc.n	1a00072c <copiarStrToStr+0xe>
	}


}
1a000738:	bd38      	pop	{r3, r4, r5, pc}
1a00073a:	Address 0x000000001a00073a is out of bounds.


1a00073c <initQueueToUART>:
void initQueueToUART( void ){
1a00073c:	b508      	push	{r3, lr}
	 QMPool_init(&miMemPool2,
1a00073e:	2301      	movs	r3, #1
1a000740:	2232      	movs	r2, #50	; 0x32
1a000742:	4906      	ldr	r1, [pc, #24]	; (1a00075c <initQueueToUART+0x20>)
1a000744:	4806      	ldr	r0, [pc, #24]	; (1a000760 <initQueueToUART+0x24>)
1a000746:	f7ff fe41 	bl	1a0003cc <QMPool_init>
	 myQueueToUARTHandle = xQueueCreate( 6,  sizeof( void * ) );
1a00074a:	2200      	movs	r2, #0
1a00074c:	2104      	movs	r1, #4
1a00074e:	2006      	movs	r0, #6
1a000750:	f000 fc81 	bl	1a001056 <xQueueGenericCreate>
1a000754:	4b03      	ldr	r3, [pc, #12]	; (1a000764 <initQueueToUART+0x28>)
1a000756:	6018      	str	r0, [r3, #0]
}
1a000758:	bd08      	pop	{r3, pc}
1a00075a:	bf00      	nop
1a00075c:	10002364 	.word	0x10002364
1a000760:	10002350 	.word	0x10002350
1a000764:	10000180 	.word	0x10000180

1a000768 <updQueueToUART>:
void updQueueToUART( void * taskParmPtr ){
1a000768:	b500      	push	{lr}
1a00076a:	b083      	sub	sp, #12
		if ( xQueueReceive( myQueueToUARTHandle, &ptr, 1000 / portTICK_RATE_MS ) ){
1a00076c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000770:	a901      	add	r1, sp, #4
1a000772:	4b07      	ldr	r3, [pc, #28]	; (1a000790 <updQueueToUART+0x28>)
1a000774:	6818      	ldr	r0, [r3, #0]
1a000776:	f000 fdb7 	bl	1a0012e8 <xQueueReceive>
1a00077a:	2800      	cmp	r0, #0
1a00077c:	d0f6      	beq.n	1a00076c <updQueueToUART+0x4>
			printf( "queueToUART: %s\n", ptr );
1a00077e:	9901      	ldr	r1, [sp, #4]
1a000780:	4804      	ldr	r0, [pc, #16]	; (1a000794 <updQueueToUART+0x2c>)
1a000782:	f003 fd15 	bl	1a0041b0 <iprintf>
			QMPool_put( &miMemPool2, ptr );
1a000786:	9901      	ldr	r1, [sp, #4]
1a000788:	4803      	ldr	r0, [pc, #12]	; (1a000798 <updQueueToUART+0x30>)
1a00078a:	f7ff fe45 	bl	1a000418 <QMPool_put>
1a00078e:	e7ed      	b.n	1a00076c <updQueueToUART+0x4>
1a000790:	10000180 	.word	0x10000180
1a000794:	1a004bf4 	.word	0x1a004bf4
1a000798:	10002350 	.word	0x10002350

1a00079c <sendQueueToUART>:
void sendQueueToUART( uint8_t * strPtr){
1a00079c:	b510      	push	{r4, lr}
1a00079e:	b082      	sub	sp, #8
1a0007a0:	4604      	mov	r4, r0
	if ( strlen0( strPtr ) > sizeof( memPoolSto2 ) ){
1a0007a2:	f7ff ffb1 	bl	1a000708 <strlen0>
1a0007a6:	2832      	cmp	r0, #50	; 0x32
1a0007a8:	d901      	bls.n	1a0007ae <sendQueueToUART+0x12>
}
1a0007aa:	b002      	add	sp, #8
1a0007ac:	bd10      	pop	{r4, pc}
	ptr = QMPool_get( &miMemPool2, strlen0( strPtr ) );  //Total de strlen0( strPtr ) bloques de 1 Byte
1a0007ae:	4601      	mov	r1, r0
1a0007b0:	4808      	ldr	r0, [pc, #32]	; (1a0007d4 <sendQueueToUART+0x38>)
1a0007b2:	f7ff fe39 	bl	1a000428 <QMPool_get>
1a0007b6:	9001      	str	r0, [sp, #4]
	if (ptr){
1a0007b8:	2800      	cmp	r0, #0
1a0007ba:	d0f6      	beq.n	1a0007aa <sendQueueToUART+0xe>
		copiarStrToStr( strPtr, (uint8_t *) ptr );
1a0007bc:	4601      	mov	r1, r0
1a0007be:	4620      	mov	r0, r4
1a0007c0:	f7ff ffad 	bl	1a00071e <copiarStrToStr>
		xQueueSend( myQueueToUARTHandle, &ptr,  (TickType_t) 100);
1a0007c4:	2300      	movs	r3, #0
1a0007c6:	2264      	movs	r2, #100	; 0x64
1a0007c8:	a901      	add	r1, sp, #4
1a0007ca:	4803      	ldr	r0, [pc, #12]	; (1a0007d8 <sendQueueToUART+0x3c>)
1a0007cc:	6800      	ldr	r0, [r0, #0]
1a0007ce:	f000 fc67 	bl	1a0010a0 <xQueueGenericSend>
1a0007d2:	e7ea      	b.n	1a0007aa <sendQueueToUART+0xe>
1a0007d4:	10002350 	.word	0x10002350
1a0007d8:	10000180 	.word	0x10000180

1a0007dc <Led_ctor>:
 *      Author: Pablo Alonso Castillo
 */
#include "sapi.h"
#include "leds.h"

void   Led_ctor( Led * const me, gpioMap_t ledADD ){
1a0007dc:	b508      	push	{r3, lr}
1a0007de:	4603      	mov	r3, r0
1a0007e0:	4608      	mov	r0, r1
	   me->ledADD     = ledADD;
1a0007e2:	7019      	strb	r1, [r3, #0]
	   me->ledOnOff   = OFF;  //por defecto OFF
1a0007e4:	2100      	movs	r1, #0
1a0007e6:	7059      	strb	r1, [r3, #1]
	   me->ledBlink   = OFF;  //por defecto OFF
1a0007e8:	7099      	strb	r1, [r3, #2]

	   gpioWrite(ledADD, OFF);
1a0007ea:	f003 f845 	bl	1a003878 <gpioWrite>
};
1a0007ee:	bd08      	pop	{r3, pc}

1a0007f0 <Led_setOnOff>:

void   Led_setOnOff( Led * const me, bool_t OnOff ){
1a0007f0:	b508      	push	{r3, lr}
	   me->ledOnOff = OnOff;
1a0007f2:	7041      	strb	r1, [r0, #1]
	   gpioWrite(me->ledADD, OnOff);
1a0007f4:	f990 0000 	ldrsb.w	r0, [r0]
1a0007f8:	f003 f83e 	bl	1a003878 <gpioWrite>

};
1a0007fc:	bd08      	pop	{r3, pc}

1a0007fe <Led_getOnOff>:

bool_t Led_getOnOff( Led * const me ){
	   //return gpioRead( me->ledADD );
	   return me->ledOnOff ;
};
1a0007fe:	7840      	ldrb	r0, [r0, #1]
1a000800:	4770      	bx	lr

1a000802 <Led_setBlink>:

void   Led_setBlink( Led * const me, bool_t OnOff ){
	   me->ledBlink = OnOff;
1a000802:	7081      	strb	r1, [r0, #2]
};
1a000804:	4770      	bx	lr

1a000806 <Led_twist>:
bool_t Led_getBlink( Led * const me ){
	   return me->ledBlink;
};

//Invierte el estado del atributo ledOnOff si el atributo ledBlink esta en ON
void   Led_twist( Led * const me){
1a000806:	b508      	push	{r3, lr}
	if( me->ledBlink )
1a000808:	7883      	ldrb	r3, [r0, #2]
1a00080a:	b903      	cbnz	r3, 1a00080e <Led_twist+0x8>
		Led_setOnOff( me, !(me->ledOnOff) );
};
1a00080c:	bd08      	pop	{r3, pc}
		Led_setOnOff( me, !(me->ledOnOff) );
1a00080e:	7841      	ldrb	r1, [r0, #1]
1a000810:	fab1 f181 	clz	r1, r1
1a000814:	0949      	lsrs	r1, r1, #5
1a000816:	f7ff ffeb 	bl	1a0007f0 <Led_setOnOff>
};
1a00081a:	e7f7      	b.n	1a00080c <Led_twist+0x6>

1a00081c <myTaskLedPeriodico>:
/*==========================[funciones]======================================*/

//Task: servicio de parpadeo de leds
//Enciende alternativamente led1 y led2
void myTaskLedPeriodico( void* taskParmPtr )
{
1a00081c:	b530      	push	{r4, r5, lr}
1a00081e:	b085      	sub	sp, #20
   // Tarea periodica cada 2000 ms
   portTickType xPeriodicity =  2000 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000820:	f001 f8ba 	bl	1a001998 <xTaskGetTickCount>
1a000824:	9003      	str	r0, [sp, #12]

   void *ptr = NULL;
   void *ptr2 = NULL;
   uint8_t elMsj[7];

   Led_setBlink( &led1, ON);  //habilito el blinking
1a000826:	4d1f      	ldr	r5, [pc, #124]	; (1a0008a4 <myTaskLedPeriodico+0x88>)
1a000828:	2101      	movs	r1, #1
1a00082a:	4628      	mov	r0, r5
1a00082c:	f7ff ffe9 	bl	1a000802 <Led_setBlink>
   Led_setBlink( &led2, ON);  //habilito el blinking
1a000830:	4c1d      	ldr	r4, [pc, #116]	; (1a0008a8 <myTaskLedPeriodico+0x8c>)
1a000832:	2101      	movs	r1, #1
1a000834:	4620      	mov	r0, r4
1a000836:	f7ff ffe4 	bl	1a000802 <Led_setBlink>
   Led_setOnOff( &led2, ! Led_getOnOff( &led1 ) );  //los pongo en estados opuestos
1a00083a:	4628      	mov	r0, r5
1a00083c:	f7ff ffdf 	bl	1a0007fe <Led_getOnOff>
1a000840:	fab0 f180 	clz	r1, r0
1a000844:	0949      	lsrs	r1, r1, #5
1a000846:	4620      	mov	r0, r4
1a000848:	f7ff ffd2 	bl	1a0007f0 <Led_setOnOff>
1a00084c:	e004      	b.n	1a000858 <myTaskLedPeriodico+0x3c>
		   sendQueueToUART( elMsj );

		   //printf( "LED ON\r\n" );
	   }
	   //  Repetir por siempre, cada 2000 mSeg
	   vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a00084e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
1a000852:	a803      	add	r0, sp, #12
1a000854:	f001 f9ac 	bl	1a001bb0 <vTaskDelayUntil>
       Led_twist( &led1 );            //prendo <--> apago
1a000858:	4c12      	ldr	r4, [pc, #72]	; (1a0008a4 <myTaskLedPeriodico+0x88>)
1a00085a:	4620      	mov	r0, r4
1a00085c:	f7ff ffd3 	bl	1a000806 <Led_twist>
       Led_twist( &led2 );            //apago  <--> prendo
1a000860:	4811      	ldr	r0, [pc, #68]	; (1a0008a8 <myTaskLedPeriodico+0x8c>)
1a000862:	f7ff ffd0 	bl	1a000806 <Led_twist>
       if( Led_getOnOff( &led1) ){    //Si esta prendido . . .
1a000866:	4620      	mov	r0, r4
1a000868:	f7ff ffc9 	bl	1a0007fe <Led_getOnOff>
1a00086c:	2800      	cmp	r0, #0
1a00086e:	d0ee      	beq.n	1a00084e <myTaskLedPeriodico+0x32>
		   elMsj[ 0 ] = 'l';
1a000870:	236c      	movs	r3, #108	; 0x6c
1a000872:	f88d 3004 	strb.w	r3, [sp, #4]
		   elMsj[ 1 ] = 'e';
1a000876:	2365      	movs	r3, #101	; 0x65
1a000878:	f88d 3005 	strb.w	r3, [sp, #5]
		   elMsj[ 2 ] = 'd';
1a00087c:	2364      	movs	r3, #100	; 0x64
1a00087e:	f88d 3006 	strb.w	r3, [sp, #6]
		   elMsj[ 3 ] = ' ';
1a000882:	2320      	movs	r3, #32
1a000884:	f88d 3007 	strb.w	r3, [sp, #7]
		   elMsj[ 4 ] = 'o';
1a000888:	236f      	movs	r3, #111	; 0x6f
1a00088a:	f88d 3008 	strb.w	r3, [sp, #8]
		   elMsj[ 5 ] = 'n';
1a00088e:	236e      	movs	r3, #110	; 0x6e
1a000890:	f88d 3009 	strb.w	r3, [sp, #9]
		   elMsj[ 6 ] =  0 ;
1a000894:	2300      	movs	r3, #0
1a000896:	f88d 300a 	strb.w	r3, [sp, #10]
		   sendQueueToUART( elMsj );
1a00089a:	a801      	add	r0, sp, #4
1a00089c:	f7ff ff7e 	bl	1a00079c <sendQueueToUART>
1a0008a0:	e7d5      	b.n	1a00084e <myTaskLedPeriodico+0x32>
1a0008a2:	bf00      	nop
1a0008a4:	10002348 	.word	0x10002348
1a0008a8:	1000234c 	.word	0x1000234c

1a0008ac <BIN16_A_DIGITAL5>:
//que guarda en el arreglo publico NUM[]
void BIN16_A_DIGITAL5(uint8_t HADD, uint8_t LADD){

//convierte un uint_16 formando por dos mitades uint8_t en dígitos ascii que guarda en el arreglo NUM[5]

	NUM[0] = 0; NUM[1] = 0; NUM[2] = 0; NUM[3] = 0; NUM[4] = 0;
1a0008ac:	4b84      	ldr	r3, [pc, #528]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0008ae:	2200      	movs	r2, #0
1a0008b0:	701a      	strb	r2, [r3, #0]
1a0008b2:	705a      	strb	r2, [r3, #1]
1a0008b4:	709a      	strb	r2, [r3, #2]
1a0008b6:	70da      	strb	r2, [r3, #3]
1a0008b8:	711a      	strb	r2, [r3, #4]

	//BLOQUE DE PASAR DE BINARIO A GRUPOS DE UNIDADES, DECENAS, CENTENAS, MILES. ETC
	if (LADD & 0b00000001){ NUM[0] +=1; }//1
1a0008ba:	f011 0f01 	tst.w	r1, #1
1a0008be:	d001      	beq.n	1a0008c4 <BIN16_A_DIGITAL5+0x18>
1a0008c0:	2201      	movs	r2, #1
1a0008c2:	701a      	strb	r2, [r3, #0]
	if (LADD & 0b00000010){ NUM[0] +=2; }//2
1a0008c4:	f011 0f02 	tst.w	r1, #2
1a0008c8:	d003      	beq.n	1a0008d2 <BIN16_A_DIGITAL5+0x26>
1a0008ca:	4a7d      	ldr	r2, [pc, #500]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0008cc:	7813      	ldrb	r3, [r2, #0]
1a0008ce:	3302      	adds	r3, #2
1a0008d0:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00000100){ NUM[0] +=4; }//4
1a0008d2:	f011 0f04 	tst.w	r1, #4
1a0008d6:	d003      	beq.n	1a0008e0 <BIN16_A_DIGITAL5+0x34>
1a0008d8:	4a79      	ldr	r2, [pc, #484]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0008da:	7813      	ldrb	r3, [r2, #0]
1a0008dc:	3304      	adds	r3, #4
1a0008de:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00001000){ NUM[0] +=8; }//8
1a0008e0:	f011 0f08 	tst.w	r1, #8
1a0008e4:	d003      	beq.n	1a0008ee <BIN16_A_DIGITAL5+0x42>
1a0008e6:	4a76      	ldr	r2, [pc, #472]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0008e8:	7813      	ldrb	r3, [r2, #0]
1a0008ea:	3308      	adds	r3, #8
1a0008ec:	7013      	strb	r3, [r2, #0]
	if (LADD & 0b00010000){ NUM[0] +=6; NUM[1] += 1; }//16
1a0008ee:	f011 0f10 	tst.w	r1, #16
1a0008f2:	d005      	beq.n	1a000900 <BIN16_A_DIGITAL5+0x54>
1a0008f4:	4b72      	ldr	r3, [pc, #456]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0008f6:	781a      	ldrb	r2, [r3, #0]
1a0008f8:	3206      	adds	r2, #6
1a0008fa:	701a      	strb	r2, [r3, #0]
1a0008fc:	2201      	movs	r2, #1
1a0008fe:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b00100000){ NUM[0] +=2; NUM[1] += 3; }//32
1a000900:	f011 0f20 	tst.w	r1, #32
1a000904:	d006      	beq.n	1a000914 <BIN16_A_DIGITAL5+0x68>
1a000906:	4b6e      	ldr	r3, [pc, #440]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000908:	781a      	ldrb	r2, [r3, #0]
1a00090a:	3202      	adds	r2, #2
1a00090c:	701a      	strb	r2, [r3, #0]
1a00090e:	785a      	ldrb	r2, [r3, #1]
1a000910:	3203      	adds	r2, #3
1a000912:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b01000000){ NUM[0] +=4; NUM[1] += 6; }//64
1a000914:	f011 0f40 	tst.w	r1, #64	; 0x40
1a000918:	d006      	beq.n	1a000928 <BIN16_A_DIGITAL5+0x7c>
1a00091a:	4b69      	ldr	r3, [pc, #420]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a00091c:	781a      	ldrb	r2, [r3, #0]
1a00091e:	3204      	adds	r2, #4
1a000920:	701a      	strb	r2, [r3, #0]
1a000922:	785a      	ldrb	r2, [r3, #1]
1a000924:	3206      	adds	r2, #6
1a000926:	705a      	strb	r2, [r3, #1]
	if (LADD & 0b10000000){ NUM[0] +=8; NUM[1] += 2; NUM[2] += 1; }//128
1a000928:	f011 0f80 	tst.w	r1, #128	; 0x80
1a00092c:	d173      	bne.n	1a000a16 <BIN16_A_DIGITAL5+0x16a>

	if (HADD & 0b00000001){ NUM[0] +=6; NUM[1] += 5; NUM[2] += 2; }//256
1a00092e:	f010 0f01 	tst.w	r0, #1
1a000932:	d009      	beq.n	1a000948 <BIN16_A_DIGITAL5+0x9c>
1a000934:	4b62      	ldr	r3, [pc, #392]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000936:	781a      	ldrb	r2, [r3, #0]
1a000938:	3206      	adds	r2, #6
1a00093a:	701a      	strb	r2, [r3, #0]
1a00093c:	785a      	ldrb	r2, [r3, #1]
1a00093e:	3205      	adds	r2, #5
1a000940:	705a      	strb	r2, [r3, #1]
1a000942:	789a      	ldrb	r2, [r3, #2]
1a000944:	3202      	adds	r2, #2
1a000946:	709a      	strb	r2, [r3, #2]
	if (HADD & 0b00000010){ NUM[0] +=2; NUM[1] += 1; NUM[2] += 5; }//512
1a000948:	f010 0f02 	tst.w	r0, #2
1a00094c:	d009      	beq.n	1a000962 <BIN16_A_DIGITAL5+0xb6>
1a00094e:	4b5c      	ldr	r3, [pc, #368]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000950:	781a      	ldrb	r2, [r3, #0]
1a000952:	3202      	adds	r2, #2
1a000954:	701a      	strb	r2, [r3, #0]
1a000956:	785a      	ldrb	r2, [r3, #1]
1a000958:	3201      	adds	r2, #1
1a00095a:	705a      	strb	r2, [r3, #1]
1a00095c:	789a      	ldrb	r2, [r3, #2]
1a00095e:	3205      	adds	r2, #5
1a000960:	709a      	strb	r2, [r3, #2]
	if (HADD & 0b00000100){ NUM[0] +=4; NUM[1] += 2; NUM[2] += 0; NUM[3] += 1; }//1024
1a000962:	f010 0f04 	tst.w	r0, #4
1a000966:	d008      	beq.n	1a00097a <BIN16_A_DIGITAL5+0xce>
1a000968:	4b55      	ldr	r3, [pc, #340]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a00096a:	781a      	ldrb	r2, [r3, #0]
1a00096c:	3204      	adds	r2, #4
1a00096e:	701a      	strb	r2, [r3, #0]
1a000970:	785a      	ldrb	r2, [r3, #1]
1a000972:	3202      	adds	r2, #2
1a000974:	705a      	strb	r2, [r3, #1]
1a000976:	2201      	movs	r2, #1
1a000978:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00001000){ NUM[0] +=8; NUM[1] += 4; NUM[2] += 0; NUM[3] += 2; }//2048
1a00097a:	f010 0f08 	tst.w	r0, #8
1a00097e:	d009      	beq.n	1a000994 <BIN16_A_DIGITAL5+0xe8>
1a000980:	4b4f      	ldr	r3, [pc, #316]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000982:	781a      	ldrb	r2, [r3, #0]
1a000984:	3208      	adds	r2, #8
1a000986:	701a      	strb	r2, [r3, #0]
1a000988:	785a      	ldrb	r2, [r3, #1]
1a00098a:	3204      	adds	r2, #4
1a00098c:	705a      	strb	r2, [r3, #1]
1a00098e:	78da      	ldrb	r2, [r3, #3]
1a000990:	3202      	adds	r2, #2
1a000992:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00010000){ NUM[0] +=6; NUM[1] += 9; NUM[2] += 0; NUM[3] += 4; }//4096
1a000994:	f010 0f10 	tst.w	r0, #16
1a000998:	d009      	beq.n	1a0009ae <BIN16_A_DIGITAL5+0x102>
1a00099a:	4b49      	ldr	r3, [pc, #292]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a00099c:	781a      	ldrb	r2, [r3, #0]
1a00099e:	3206      	adds	r2, #6
1a0009a0:	701a      	strb	r2, [r3, #0]
1a0009a2:	785a      	ldrb	r2, [r3, #1]
1a0009a4:	3209      	adds	r2, #9
1a0009a6:	705a      	strb	r2, [r3, #1]
1a0009a8:	78da      	ldrb	r2, [r3, #3]
1a0009aa:	3204      	adds	r2, #4
1a0009ac:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b00100000){ NUM[0] +=2; NUM[1] += 9; NUM[2] += 1; NUM[3] += 8; }//8192
1a0009ae:	f010 0f20 	tst.w	r0, #32
1a0009b2:	d00c      	beq.n	1a0009ce <BIN16_A_DIGITAL5+0x122>
1a0009b4:	4b42      	ldr	r3, [pc, #264]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0009b6:	781a      	ldrb	r2, [r3, #0]
1a0009b8:	3202      	adds	r2, #2
1a0009ba:	701a      	strb	r2, [r3, #0]
1a0009bc:	785a      	ldrb	r2, [r3, #1]
1a0009be:	3209      	adds	r2, #9
1a0009c0:	705a      	strb	r2, [r3, #1]
1a0009c2:	789a      	ldrb	r2, [r3, #2]
1a0009c4:	3201      	adds	r2, #1
1a0009c6:	709a      	strb	r2, [r3, #2]
1a0009c8:	78da      	ldrb	r2, [r3, #3]
1a0009ca:	3208      	adds	r2, #8
1a0009cc:	70da      	strb	r2, [r3, #3]
	if (HADD & 0b01000000){ NUM[0] +=4; NUM[1] += 8; NUM[2] += 3; NUM[3] += 6; NUM[4] += 1; }//16384
1a0009ce:	f010 0f40 	tst.w	r0, #64	; 0x40
1a0009d2:	d00e      	beq.n	1a0009f2 <BIN16_A_DIGITAL5+0x146>
1a0009d4:	4b3a      	ldr	r3, [pc, #232]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0009d6:	781a      	ldrb	r2, [r3, #0]
1a0009d8:	3204      	adds	r2, #4
1a0009da:	701a      	strb	r2, [r3, #0]
1a0009dc:	785a      	ldrb	r2, [r3, #1]
1a0009de:	3208      	adds	r2, #8
1a0009e0:	705a      	strb	r2, [r3, #1]
1a0009e2:	789a      	ldrb	r2, [r3, #2]
1a0009e4:	3203      	adds	r2, #3
1a0009e6:	709a      	strb	r2, [r3, #2]
1a0009e8:	78da      	ldrb	r2, [r3, #3]
1a0009ea:	3206      	adds	r2, #6
1a0009ec:	70da      	strb	r2, [r3, #3]
1a0009ee:	2201      	movs	r2, #1
1a0009f0:	711a      	strb	r2, [r3, #4]
	if (HADD & 0b10000000){ NUM[0] +=8; NUM[1] += 6; NUM[2] += 7; NUM[3] += 2; NUM[4] += 3; }//32768
1a0009f2:	f010 0f80 	tst.w	r0, #128	; 0x80
1a0009f6:	d118      	bne.n	1a000a2a <BIN16_A_DIGITAL5+0x17e>
	//BLOQUE DE PASAR DE GRUPOS DE UNIDADES, DECENAS, CENTENAS Y MILES
	//A UNIDADES DE: UNIDAD, DECENA, CENTENA, MIL, DIEZ MIL, ETC.
	while(NUM[0] >= 0) { NUM[0] -= 10; if ( NUM[0] >= 0 ) NUM[1] += 1;} NUM[0] += 10;
1a0009f8:	4b31      	ldr	r3, [pc, #196]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a0009fa:	f993 3000 	ldrsb.w	r3, [r3]
1a0009fe:	2b00      	cmp	r3, #0
1a000a00:	db24      	blt.n	1a000a4c <BIN16_A_DIGITAL5+0x1a0>
1a000a02:	3b0a      	subs	r3, #10
1a000a04:	b25b      	sxtb	r3, r3
1a000a06:	4a2e      	ldr	r2, [pc, #184]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a08:	7013      	strb	r3, [r2, #0]
1a000a0a:	2b00      	cmp	r3, #0
1a000a0c:	dbf4      	blt.n	1a0009f8 <BIN16_A_DIGITAL5+0x14c>
1a000a0e:	7853      	ldrb	r3, [r2, #1]
1a000a10:	3301      	adds	r3, #1
1a000a12:	7053      	strb	r3, [r2, #1]
1a000a14:	e7f0      	b.n	1a0009f8 <BIN16_A_DIGITAL5+0x14c>
	if (LADD & 0b10000000){ NUM[0] +=8; NUM[1] += 2; NUM[2] += 1; }//128
1a000a16:	4b2a      	ldr	r3, [pc, #168]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a18:	781a      	ldrb	r2, [r3, #0]
1a000a1a:	3208      	adds	r2, #8
1a000a1c:	701a      	strb	r2, [r3, #0]
1a000a1e:	785a      	ldrb	r2, [r3, #1]
1a000a20:	3202      	adds	r2, #2
1a000a22:	705a      	strb	r2, [r3, #1]
1a000a24:	2201      	movs	r2, #1
1a000a26:	709a      	strb	r2, [r3, #2]
1a000a28:	e781      	b.n	1a00092e <BIN16_A_DIGITAL5+0x82>
	if (HADD & 0b10000000){ NUM[0] +=8; NUM[1] += 6; NUM[2] += 7; NUM[3] += 2; NUM[4] += 3; }//32768
1a000a2a:	4b25      	ldr	r3, [pc, #148]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a2c:	781a      	ldrb	r2, [r3, #0]
1a000a2e:	3208      	adds	r2, #8
1a000a30:	701a      	strb	r2, [r3, #0]
1a000a32:	785a      	ldrb	r2, [r3, #1]
1a000a34:	3206      	adds	r2, #6
1a000a36:	705a      	strb	r2, [r3, #1]
1a000a38:	789a      	ldrb	r2, [r3, #2]
1a000a3a:	3207      	adds	r2, #7
1a000a3c:	709a      	strb	r2, [r3, #2]
1a000a3e:	78da      	ldrb	r2, [r3, #3]
1a000a40:	3202      	adds	r2, #2
1a000a42:	70da      	strb	r2, [r3, #3]
1a000a44:	791a      	ldrb	r2, [r3, #4]
1a000a46:	3203      	adds	r2, #3
1a000a48:	711a      	strb	r2, [r3, #4]
1a000a4a:	e7d5      	b.n	1a0009f8 <BIN16_A_DIGITAL5+0x14c>
	while(NUM[0] >= 0) { NUM[0] -= 10; if ( NUM[0] >= 0 ) NUM[1] += 1;} NUM[0] += 10;
1a000a4c:	330a      	adds	r3, #10
1a000a4e:	4a1c      	ldr	r2, [pc, #112]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a50:	7013      	strb	r3, [r2, #0]
	while(NUM[1] >= 0) { NUM[1] -= 10; if ( NUM[1] >= 0 ) NUM[2] += 1;} NUM[1] += 10;
1a000a52:	4b1b      	ldr	r3, [pc, #108]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a54:	f993 3001 	ldrsb.w	r3, [r3, #1]
1a000a58:	2b00      	cmp	r3, #0
1a000a5a:	db09      	blt.n	1a000a70 <BIN16_A_DIGITAL5+0x1c4>
1a000a5c:	3b0a      	subs	r3, #10
1a000a5e:	b25b      	sxtb	r3, r3
1a000a60:	4a17      	ldr	r2, [pc, #92]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a62:	7053      	strb	r3, [r2, #1]
1a000a64:	2b00      	cmp	r3, #0
1a000a66:	dbf4      	blt.n	1a000a52 <BIN16_A_DIGITAL5+0x1a6>
1a000a68:	7893      	ldrb	r3, [r2, #2]
1a000a6a:	3301      	adds	r3, #1
1a000a6c:	7093      	strb	r3, [r2, #2]
1a000a6e:	e7f0      	b.n	1a000a52 <BIN16_A_DIGITAL5+0x1a6>
1a000a70:	330a      	adds	r3, #10
1a000a72:	4a13      	ldr	r2, [pc, #76]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a74:	7053      	strb	r3, [r2, #1]
	while(NUM[2] >= 0) { NUM[2] -= 10; if ( NUM[2] >= 0 ) NUM[3] += 1;} NUM[2] += 10;
1a000a76:	4b12      	ldr	r3, [pc, #72]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a78:	f993 3002 	ldrsb.w	r3, [r3, #2]
1a000a7c:	2b00      	cmp	r3, #0
1a000a7e:	db09      	blt.n	1a000a94 <BIN16_A_DIGITAL5+0x1e8>
1a000a80:	3b0a      	subs	r3, #10
1a000a82:	b25b      	sxtb	r3, r3
1a000a84:	4a0e      	ldr	r2, [pc, #56]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a86:	7093      	strb	r3, [r2, #2]
1a000a88:	2b00      	cmp	r3, #0
1a000a8a:	dbf4      	blt.n	1a000a76 <BIN16_A_DIGITAL5+0x1ca>
1a000a8c:	78d3      	ldrb	r3, [r2, #3]
1a000a8e:	3301      	adds	r3, #1
1a000a90:	70d3      	strb	r3, [r2, #3]
1a000a92:	e7f0      	b.n	1a000a76 <BIN16_A_DIGITAL5+0x1ca>
1a000a94:	330a      	adds	r3, #10
1a000a96:	4a0a      	ldr	r2, [pc, #40]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a98:	7093      	strb	r3, [r2, #2]
	while(NUM[3] >= 0) { NUM[3] -= 10; if ( NUM[3] >= 0 ) NUM[4] += 1;} NUM[3] += 10;
1a000a9a:	4b09      	ldr	r3, [pc, #36]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000a9c:	f993 3003 	ldrsb.w	r3, [r3, #3]
1a000aa0:	2b00      	cmp	r3, #0
1a000aa2:	db09      	blt.n	1a000ab8 <BIN16_A_DIGITAL5+0x20c>
1a000aa4:	3b0a      	subs	r3, #10
1a000aa6:	b25b      	sxtb	r3, r3
1a000aa8:	4a05      	ldr	r2, [pc, #20]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000aaa:	70d3      	strb	r3, [r2, #3]
1a000aac:	2b00      	cmp	r3, #0
1a000aae:	dbf4      	blt.n	1a000a9a <BIN16_A_DIGITAL5+0x1ee>
1a000ab0:	7913      	ldrb	r3, [r2, #4]
1a000ab2:	3301      	adds	r3, #1
1a000ab4:	7113      	strb	r3, [r2, #4]
1a000ab6:	e7f0      	b.n	1a000a9a <BIN16_A_DIGITAL5+0x1ee>
1a000ab8:	330a      	adds	r3, #10
1a000aba:	4a01      	ldr	r2, [pc, #4]	; (1a000ac0 <BIN16_A_DIGITAL5+0x214>)
1a000abc:	70d3      	strb	r3, [r2, #3]

}
1a000abe:	4770      	bx	lr
1a000ac0:	10000184 	.word	0x10000184

1a000ac4 <uint16ToAscii>:
{
1a000ac4:	b508      	push	{r3, lr}
	BIN16_A_DIGITAL5(unionX.sector[1], unionX.sector[0]);	//CONVIERTE HADD Y LADD A NUM[4] -> NUM[0]
1a000ac6:	b2c1      	uxtb	r1, r0
1a000ac8:	0a00      	lsrs	r0, r0, #8
1a000aca:	f7ff feef 	bl	1a0008ac <BIN16_A_DIGITAL5>
}
1a000ace:	bd08      	pop	{r3, pc}

1a000ad0 <initialise_monitor_handles>:
}
1a000ad0:	4770      	bx	lr
1a000ad2:	Address 0x000000001a000ad2 is out of bounds.


1a000ad4 <Reset_Handler>:
void Reset_Handler(void) {
1a000ad4:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000ad6:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000ad8:	4b19      	ldr	r3, [pc, #100]	; (1a000b40 <Reset_Handler+0x6c>)
1a000ada:	4a1a      	ldr	r2, [pc, #104]	; (1a000b44 <Reset_Handler+0x70>)
1a000adc:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000ade:	3304      	adds	r3, #4
1a000ae0:	4a19      	ldr	r2, [pc, #100]	; (1a000b48 <Reset_Handler+0x74>)
1a000ae2:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000ae4:	2300      	movs	r3, #0
1a000ae6:	e005      	b.n	1a000af4 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000ae8:	4a18      	ldr	r2, [pc, #96]	; (1a000b4c <Reset_Handler+0x78>)
1a000aea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000af2:	3301      	adds	r3, #1
1a000af4:	2b07      	cmp	r3, #7
1a000af6:	d9f7      	bls.n	1a000ae8 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000af8:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000afa:	4b15      	ldr	r3, [pc, #84]	; (1a000b50 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000afc:	e007      	b.n	1a000b0e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000afe:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000b02:	689a      	ldr	r2, [r3, #8]
1a000b04:	6859      	ldr	r1, [r3, #4]
1a000b06:	6818      	ldr	r0, [r3, #0]
1a000b08:	f7ff fb3f 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000b0c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000b0e:	4a11      	ldr	r2, [pc, #68]	; (1a000b54 <Reset_Handler+0x80>)
1a000b10:	4293      	cmp	r3, r2
1a000b12:	d3f4      	bcc.n	1a000afe <Reset_Handler+0x2a>
1a000b14:	e006      	b.n	1a000b24 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000b16:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000b18:	6859      	ldr	r1, [r3, #4]
1a000b1a:	f854 0b08 	ldr.w	r0, [r4], #8
1a000b1e:	f7ff fb43 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000b22:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000b24:	4a0c      	ldr	r2, [pc, #48]	; (1a000b58 <Reset_Handler+0x84>)
1a000b26:	4293      	cmp	r3, r2
1a000b28:	d3f5      	bcc.n	1a000b16 <Reset_Handler+0x42>
    SystemInit();
1a000b2a:	f002 fcc1 	bl	1a0034b0 <SystemInit>
    __libc_init_array();
1a000b2e:	f003 fa5f 	bl	1a003ff0 <__libc_init_array>
    initialise_monitor_handles();
1a000b32:	f7ff ffcd 	bl	1a000ad0 <initialise_monitor_handles>
    main();
1a000b36:	f7ff fbe3 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000b3a:	bf30      	wfi
1a000b3c:	e7fd      	b.n	1a000b3a <Reset_Handler+0x66>
1a000b3e:	bf00      	nop
1a000b40:	40053100 	.word	0x40053100
1a000b44:	10df1000 	.word	0x10df1000
1a000b48:	01dff7ff 	.word	0x01dff7ff
1a000b4c:	e000e280 	.word	0xe000e280
1a000b50:	1a000114 	.word	0x1a000114
1a000b54:	1a000150 	.word	0x1a000150
1a000b58:	1a000178 	.word	0x1a000178

1a000b5c <_fini>:
void _fini(void) {}
1a000b5c:	4770      	bx	lr

1a000b5e <_init>:
void _init(void) {}
1a000b5e:	4770      	bx	lr

1a000b60 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000b60:	2309      	movs	r3, #9
1a000b62:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b68:	4770      	bx	lr

1a000b6a <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000b6a:	2358      	movs	r3, #88	; 0x58
1a000b6c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b72:	4770      	bx	lr

1a000b74 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000b74:	2902      	cmp	r1, #2
1a000b76:	d801      	bhi.n	1a000b7c <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000b78:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000b7a:	4770      	bx	lr
       SET_ERR(EBADF);
1a000b7c:	2309      	movs	r3, #9
1a000b7e:	6003      	str	r3, [r0, #0]
       return -1;
1a000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b84:	4770      	bx	lr

1a000b86 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000b86:	2358      	movs	r3, #88	; 0x58
1a000b88:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000b8e:	4770      	bx	lr

1a000b90 <_read_r>:
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000b90:	2902      	cmp	r1, #2
1a000b92:	d81f      	bhi.n	1a000bd4 <_read_r+0x44>
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000b98:	461d      	mov	r5, r3
1a000b9a:	4617      	mov	r7, r2
1a000b9c:	4606      	mov	r6, r0
  size_t i = 0;
1a000b9e:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000ba0:	42ac      	cmp	r4, r5
1a000ba2:	d211      	bcs.n	1a000bc8 <_read_r+0x38>
         int c = __stdio_getchar();
1a000ba4:	f001 fed5 	bl	1a002952 <__stdio_getchar>
         if( c != -1 ){
1a000ba8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000bac:	d0f8      	beq.n	1a000ba0 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000bae:	f104 0801 	add.w	r8, r4, #1
1a000bb2:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000bb4:	280d      	cmp	r0, #13
1a000bb6:	d003      	beq.n	1a000bc0 <_read_r+0x30>
1a000bb8:	280a      	cmp	r0, #10
1a000bba:	d001      	beq.n	1a000bc0 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000bbc:	4644      	mov	r4, r8
1a000bbe:	e7ef      	b.n	1a000ba0 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000bc0:	f001 fec7 	bl	1a002952 <__stdio_getchar>
               return i;
1a000bc4:	4640      	mov	r0, r8
1a000bc6:	e003      	b.n	1a000bd0 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000bc8:	2313      	movs	r3, #19
1a000bca:	6033      	str	r3, [r6, #0]
      return -1;
1a000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000bd4:	2313      	movs	r3, #19
1a000bd6:	6003      	str	r3, [r0, #0]
      return -1;
1a000bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000bdc:	4770      	bx	lr

1a000bde <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000bde:	2902      	cmp	r1, #2
1a000be0:	d80c      	bhi.n	1a000bfc <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000be2:	b570      	push	{r4, r5, r6, lr}
1a000be4:	461d      	mov	r5, r3
1a000be6:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000be8:	2400      	movs	r4, #0
1a000bea:	e003      	b.n	1a000bf4 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000bec:	5d30      	ldrb	r0, [r6, r4]
1a000bee:	f001 feab 	bl	1a002948 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000bf2:	3401      	adds	r4, #1
1a000bf4:	42ac      	cmp	r4, r5
1a000bf6:	d3f9      	bcc.n	1a000bec <_write_r+0xe>
       return n;
1a000bf8:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000bfa:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000bfc:	2313      	movs	r3, #19
1a000bfe:	6003      	str	r3, [r0, #0]
       return -1;
1a000c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000c04:	4770      	bx	lr
1a000c06:	Address 0x000000001a000c06 is out of bounds.


1a000c08 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000c08:	4b05      	ldr	r3, [pc, #20]	; (1a000c20 <_sbrk_r+0x18>)
1a000c0a:	681b      	ldr	r3, [r3, #0]
1a000c0c:	b123      	cbz	r3, 1a000c18 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000c0e:	4b04      	ldr	r3, [pc, #16]	; (1a000c20 <_sbrk_r+0x18>)
1a000c10:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000c12:	4401      	add	r1, r0
1a000c14:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000c16:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000c18:	4b01      	ldr	r3, [pc, #4]	; (1a000c20 <_sbrk_r+0x18>)
1a000c1a:	4a02      	ldr	r2, [pc, #8]	; (1a000c24 <_sbrk_r+0x1c>)
1a000c1c:	601a      	str	r2, [r3, #0]
1a000c1e:	e7f6      	b.n	1a000c0e <_sbrk_r+0x6>
1a000c20:	1000018c 	.word	0x1000018c
1a000c24:	100023e0 	.word	0x100023e0

1a000c28 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000c28:	4a12      	ldr	r2, [pc, #72]	; (1a000c74 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000c2a:	f012 0f07 	tst.w	r2, #7
1a000c2e:	d01e      	beq.n	1a000c6e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000c30:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000c32:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000c36:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000c3a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000c3c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000c3e:	480e      	ldr	r0, [pc, #56]	; (1a000c78 <prvHeapInit+0x50>)
1a000c40:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000c42:	2100      	movs	r1, #0
1a000c44:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000c46:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000c48:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000c4a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000c4e:	480b      	ldr	r0, [pc, #44]	; (1a000c7c <prvHeapInit+0x54>)
1a000c50:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000c52:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000c54:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000c56:	1a99      	subs	r1, r3, r2
1a000c58:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000c5a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000c5c:	4b08      	ldr	r3, [pc, #32]	; (1a000c80 <prvHeapInit+0x58>)
1a000c5e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000c60:	4b08      	ldr	r3, [pc, #32]	; (1a000c84 <prvHeapInit+0x5c>)
1a000c62:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000c64:	4b08      	ldr	r3, [pc, #32]	; (1a000c88 <prvHeapInit+0x60>)
1a000c66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000c6a:	601a      	str	r2, [r3, #0]
}
1a000c6c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000c72:	e7e4      	b.n	1a000c3e <prvHeapInit+0x16>
1a000c74:	10000194 	.word	0x10000194
1a000c78:	100021a0 	.word	0x100021a0
1a000c7c:	10000190 	.word	0x10000190
1a000c80:	1000219c 	.word	0x1000219c
1a000c84:	10002198 	.word	0x10002198
1a000c88:	10002194 	.word	0x10002194

1a000c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a000c8c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000c8e:	4b13      	ldr	r3, [pc, #76]	; (1a000cdc <prvInsertBlockIntoFreeList+0x50>)
1a000c90:	681a      	ldr	r2, [r3, #0]
1a000c92:	4282      	cmp	r2, r0
1a000c94:	d31b      	bcc.n	1a000cce <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a000c96:	6859      	ldr	r1, [r3, #4]
1a000c98:	185c      	adds	r4, r3, r1
1a000c9a:	4284      	cmp	r4, r0
1a000c9c:	d103      	bne.n	1a000ca6 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a000c9e:	6840      	ldr	r0, [r0, #4]
1a000ca0:	4401      	add	r1, r0
1a000ca2:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a000ca4:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a000ca6:	6841      	ldr	r1, [r0, #4]
1a000ca8:	1844      	adds	r4, r0, r1
1a000caa:	42a2      	cmp	r2, r4
1a000cac:	d113      	bne.n	1a000cd6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a000cae:	4c0c      	ldr	r4, [pc, #48]	; (1a000ce0 <prvInsertBlockIntoFreeList+0x54>)
1a000cb0:	6824      	ldr	r4, [r4, #0]
1a000cb2:	42a2      	cmp	r2, r4
1a000cb4:	d00d      	beq.n	1a000cd2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000cb6:	6852      	ldr	r2, [r2, #4]
1a000cb8:	4411      	add	r1, r2
1a000cba:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a000cbc:	681a      	ldr	r2, [r3, #0]
1a000cbe:	6812      	ldr	r2, [r2, #0]
1a000cc0:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a000cc2:	4298      	cmp	r0, r3
1a000cc4:	d000      	beq.n	1a000cc8 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a000cc6:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a000cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ccc:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a000cce:	4613      	mov	r3, r2
1a000cd0:	e7de      	b.n	1a000c90 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000cd2:	6004      	str	r4, [r0, #0]
1a000cd4:	e7f5      	b.n	1a000cc2 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a000cd6:	6002      	str	r2, [r0, #0]
1a000cd8:	e7f3      	b.n	1a000cc2 <prvInsertBlockIntoFreeList+0x36>
1a000cda:	bf00      	nop
1a000cdc:	100021a0 	.word	0x100021a0
1a000ce0:	10000190 	.word	0x10000190

1a000ce4 <pvPortMalloc>:
{
1a000ce4:	b570      	push	{r4, r5, r6, lr}
1a000ce6:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000ce8:	f000 fe4e 	bl	1a001988 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000cec:	4b3f      	ldr	r3, [pc, #252]	; (1a000dec <pvPortMalloc+0x108>)
1a000cee:	681b      	ldr	r3, [r3, #0]
1a000cf0:	b1a3      	cbz	r3, 1a000d1c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a000cf2:	4b3f      	ldr	r3, [pc, #252]	; (1a000df0 <pvPortMalloc+0x10c>)
1a000cf4:	681b      	ldr	r3, [r3, #0]
1a000cf6:	421c      	tst	r4, r3
1a000cf8:	d013      	beq.n	1a000d22 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a000cfa:	f000 fedf 	bl	1a001abc <xTaskResumeAll>
void *pvReturn = NULL;
1a000cfe:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000d00:	f000 fc3a 	bl	1a001578 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000d04:	f016 0f07 	tst.w	r6, #7
1a000d08:	d06e      	beq.n	1a000de8 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000d0a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d0e:	f383 8811 	msr	BASEPRI, r3
1a000d12:	f3bf 8f6f 	isb	sy
1a000d16:	f3bf 8f4f 	dsb	sy
1a000d1a:	e7fe      	b.n	1a000d1a <pvPortMalloc+0x36>
			prvHeapInit();
1a000d1c:	f7ff ff84 	bl	1a000c28 <prvHeapInit>
1a000d20:	e7e7      	b.n	1a000cf2 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a000d22:	b194      	cbz	r4, 1a000d4a <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a000d24:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a000d26:	f014 0f07 	tst.w	r4, #7
1a000d2a:	d00e      	beq.n	1a000d4a <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000d2c:	f024 0407 	bic.w	r4, r4, #7
1a000d30:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000d32:	f004 0307 	and.w	r3, r4, #7
1a000d36:	b143      	cbz	r3, 1a000d4a <pvPortMalloc+0x66>
1a000d38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d3c:	f383 8811 	msr	BASEPRI, r3
1a000d40:	f3bf 8f6f 	isb	sy
1a000d44:	f3bf 8f4f 	dsb	sy
1a000d48:	e7fe      	b.n	1a000d48 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000d4a:	b134      	cbz	r4, 1a000d5a <pvPortMalloc+0x76>
1a000d4c:	4b29      	ldr	r3, [pc, #164]	; (1a000df4 <pvPortMalloc+0x110>)
1a000d4e:	681b      	ldr	r3, [r3, #0]
1a000d50:	42a3      	cmp	r3, r4
1a000d52:	d306      	bcc.n	1a000d62 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a000d54:	4b28      	ldr	r3, [pc, #160]	; (1a000df8 <pvPortMalloc+0x114>)
1a000d56:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000d58:	e009      	b.n	1a000d6e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a000d5a:	f000 feaf 	bl	1a001abc <xTaskResumeAll>
void *pvReturn = NULL;
1a000d5e:	2600      	movs	r6, #0
1a000d60:	e7ce      	b.n	1a000d00 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a000d62:	f000 feab 	bl	1a001abc <xTaskResumeAll>
void *pvReturn = NULL;
1a000d66:	2600      	movs	r6, #0
1a000d68:	e7ca      	b.n	1a000d00 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a000d6a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000d6c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000d6e:	686a      	ldr	r2, [r5, #4]
1a000d70:	42a2      	cmp	r2, r4
1a000d72:	d202      	bcs.n	1a000d7a <pvPortMalloc+0x96>
1a000d74:	682a      	ldr	r2, [r5, #0]
1a000d76:	2a00      	cmp	r2, #0
1a000d78:	d1f7      	bne.n	1a000d6a <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a000d7a:	4a1c      	ldr	r2, [pc, #112]	; (1a000dec <pvPortMalloc+0x108>)
1a000d7c:	6812      	ldr	r2, [r2, #0]
1a000d7e:	42aa      	cmp	r2, r5
1a000d80:	d014      	beq.n	1a000dac <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a000d82:	681e      	ldr	r6, [r3, #0]
1a000d84:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a000d86:	682a      	ldr	r2, [r5, #0]
1a000d88:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a000d8a:	686b      	ldr	r3, [r5, #4]
1a000d8c:	1b1b      	subs	r3, r3, r4
1a000d8e:	2b10      	cmp	r3, #16
1a000d90:	d914      	bls.n	1a000dbc <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a000d92:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a000d94:	f010 0f07 	tst.w	r0, #7
1a000d98:	d00c      	beq.n	1a000db4 <pvPortMalloc+0xd0>
1a000d9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d9e:	f383 8811 	msr	BASEPRI, r3
1a000da2:	f3bf 8f6f 	isb	sy
1a000da6:	f3bf 8f4f 	dsb	sy
1a000daa:	e7fe      	b.n	1a000daa <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a000dac:	f000 fe86 	bl	1a001abc <xTaskResumeAll>
void *pvReturn = NULL;
1a000db0:	2600      	movs	r6, #0
1a000db2:	e7a5      	b.n	1a000d00 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a000db4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a000db6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a000db8:	f7ff ff68 	bl	1a000c8c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a000dbc:	686a      	ldr	r2, [r5, #4]
1a000dbe:	490d      	ldr	r1, [pc, #52]	; (1a000df4 <pvPortMalloc+0x110>)
1a000dc0:	680b      	ldr	r3, [r1, #0]
1a000dc2:	1a9b      	subs	r3, r3, r2
1a000dc4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a000dc6:	490d      	ldr	r1, [pc, #52]	; (1a000dfc <pvPortMalloc+0x118>)
1a000dc8:	6809      	ldr	r1, [r1, #0]
1a000dca:	428b      	cmp	r3, r1
1a000dcc:	d201      	bcs.n	1a000dd2 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a000dce:	490b      	ldr	r1, [pc, #44]	; (1a000dfc <pvPortMalloc+0x118>)
1a000dd0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a000dd2:	4b07      	ldr	r3, [pc, #28]	; (1a000df0 <pvPortMalloc+0x10c>)
1a000dd4:	681b      	ldr	r3, [r3, #0]
1a000dd6:	4313      	orrs	r3, r2
1a000dd8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a000dda:	2300      	movs	r3, #0
1a000ddc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000dde:	f000 fe6d 	bl	1a001abc <xTaskResumeAll>
		if( pvReturn == NULL )
1a000de2:	2e00      	cmp	r6, #0
1a000de4:	d18e      	bne.n	1a000d04 <pvPortMalloc+0x20>
1a000de6:	e78b      	b.n	1a000d00 <pvPortMalloc+0x1c>
}
1a000de8:	4630      	mov	r0, r6
1a000dea:	bd70      	pop	{r4, r5, r6, pc}
1a000dec:	10000190 	.word	0x10000190
1a000df0:	10002194 	.word	0x10002194
1a000df4:	10002198 	.word	0x10002198
1a000df8:	100021a0 	.word	0x100021a0
1a000dfc:	1000219c 	.word	0x1000219c

1a000e00 <vPortFree>:
	if( pv != NULL )
1a000e00:	b380      	cbz	r0, 1a000e64 <vPortFree+0x64>
{
1a000e02:	b538      	push	{r3, r4, r5, lr}
1a000e04:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a000e06:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a000e0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a000e0e:	4916      	ldr	r1, [pc, #88]	; (1a000e68 <vPortFree+0x68>)
1a000e10:	6809      	ldr	r1, [r1, #0]
1a000e12:	420a      	tst	r2, r1
1a000e14:	d108      	bne.n	1a000e28 <vPortFree+0x28>
1a000e16:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e1a:	f383 8811 	msr	BASEPRI, r3
1a000e1e:	f3bf 8f6f 	isb	sy
1a000e22:	f3bf 8f4f 	dsb	sy
1a000e26:	e7fe      	b.n	1a000e26 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a000e28:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a000e2c:	b140      	cbz	r0, 1a000e40 <vPortFree+0x40>
1a000e2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e32:	f383 8811 	msr	BASEPRI, r3
1a000e36:	f3bf 8f6f 	isb	sy
1a000e3a:	f3bf 8f4f 	dsb	sy
1a000e3e:	e7fe      	b.n	1a000e3e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000e40:	ea22 0201 	bic.w	r2, r2, r1
1a000e44:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a000e48:	f000 fd9e 	bl	1a001988 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000e4c:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000e50:	4a06      	ldr	r2, [pc, #24]	; (1a000e6c <vPortFree+0x6c>)
1a000e52:	6813      	ldr	r3, [r2, #0]
1a000e54:	440b      	add	r3, r1
1a000e56:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a000e58:	4628      	mov	r0, r5
1a000e5a:	f7ff ff17 	bl	1a000c8c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000e5e:	f000 fe2d 	bl	1a001abc <xTaskResumeAll>
}
1a000e62:	bd38      	pop	{r3, r4, r5, pc}
1a000e64:	4770      	bx	lr
1a000e66:	bf00      	nop
1a000e68:	10002194 	.word	0x10002194
1a000e6c:	10002198 	.word	0x10002198

1a000e70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000e70:	b510      	push	{r4, lr}
1a000e72:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000e74:	f001 fb16 	bl	1a0024a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000e78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000e7c:	429a      	cmp	r2, r3
1a000e7e:	d004      	beq.n	1a000e8a <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000e80:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000e82:	f001 fb31 	bl	1a0024e8 <vPortExitCritical>

	return xReturn;
}
1a000e86:	4620      	mov	r0, r4
1a000e88:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000e8a:	2401      	movs	r4, #1
1a000e8c:	e7f9      	b.n	1a000e82 <prvIsQueueFull+0x12>

1a000e8e <prvIsQueueEmpty>:
{
1a000e8e:	b510      	push	{r4, lr}
1a000e90:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000e92:	f001 fb07 	bl	1a0024a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000e98:	b123      	cbz	r3, 1a000ea4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000e9a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000e9c:	f001 fb24 	bl	1a0024e8 <vPortExitCritical>
}
1a000ea0:	4620      	mov	r0, r4
1a000ea2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000ea4:	2401      	movs	r4, #1
1a000ea6:	e7f9      	b.n	1a000e9c <prvIsQueueEmpty+0xe>

1a000ea8 <prvCopyDataToQueue>:
{
1a000ea8:	b570      	push	{r4, r5, r6, lr}
1a000eaa:	4604      	mov	r4, r0
1a000eac:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000eae:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000eb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000eb2:	b95a      	cbnz	r2, 1a000ecc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000eb4:	6803      	ldr	r3, [r0, #0]
1a000eb6:	b11b      	cbz	r3, 1a000ec0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000eb8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000eba:	3501      	adds	r5, #1
1a000ebc:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000ebe:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000ec0:	6840      	ldr	r0, [r0, #4]
1a000ec2:	f001 f82d 	bl	1a001f20 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000ec6:	2300      	movs	r3, #0
1a000ec8:	6063      	str	r3, [r4, #4]
1a000eca:	e7f6      	b.n	1a000eba <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000ecc:	b96e      	cbnz	r6, 1a000eea <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000ece:	6880      	ldr	r0, [r0, #8]
1a000ed0:	f003 f8b2 	bl	1a004038 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000ed4:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000ed6:	68a3      	ldr	r3, [r4, #8]
1a000ed8:	4413      	add	r3, r2
1a000eda:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000edc:	6862      	ldr	r2, [r4, #4]
1a000ede:	4293      	cmp	r3, r2
1a000ee0:	d319      	bcc.n	1a000f16 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000ee2:	6823      	ldr	r3, [r4, #0]
1a000ee4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000ee6:	2000      	movs	r0, #0
1a000ee8:	e7e7      	b.n	1a000eba <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000eea:	68c0      	ldr	r0, [r0, #12]
1a000eec:	f003 f8a4 	bl	1a004038 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000ef0:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000ef2:	4252      	negs	r2, r2
1a000ef4:	68e3      	ldr	r3, [r4, #12]
1a000ef6:	4413      	add	r3, r2
1a000ef8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000efa:	6821      	ldr	r1, [r4, #0]
1a000efc:	428b      	cmp	r3, r1
1a000efe:	d202      	bcs.n	1a000f06 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000f00:	6863      	ldr	r3, [r4, #4]
1a000f02:	441a      	add	r2, r3
1a000f04:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000f06:	2e02      	cmp	r6, #2
1a000f08:	d001      	beq.n	1a000f0e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000f0a:	2000      	movs	r0, #0
1a000f0c:	e7d5      	b.n	1a000eba <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000f0e:	b125      	cbz	r5, 1a000f1a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000f10:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000f12:	2000      	movs	r0, #0
1a000f14:	e7d1      	b.n	1a000eba <prvCopyDataToQueue+0x12>
1a000f16:	2000      	movs	r0, #0
1a000f18:	e7cf      	b.n	1a000eba <prvCopyDataToQueue+0x12>
1a000f1a:	2000      	movs	r0, #0
1a000f1c:	e7cd      	b.n	1a000eba <prvCopyDataToQueue+0x12>

1a000f1e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000f1e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000f20:	b172      	cbz	r2, 1a000f40 <prvCopyDataFromQueue+0x22>
{
1a000f22:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000f24:	68c3      	ldr	r3, [r0, #12]
1a000f26:	4413      	add	r3, r2
1a000f28:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000f2a:	6844      	ldr	r4, [r0, #4]
1a000f2c:	42a3      	cmp	r3, r4
1a000f2e:	d301      	bcc.n	1a000f34 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000f30:	6803      	ldr	r3, [r0, #0]
1a000f32:	60c3      	str	r3, [r0, #12]
1a000f34:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000f36:	68c1      	ldr	r1, [r0, #12]
1a000f38:	4620      	mov	r0, r4
1a000f3a:	f003 f87d 	bl	1a004038 <memcpy>
}
1a000f3e:	bd10      	pop	{r4, pc}
1a000f40:	4770      	bx	lr

1a000f42 <prvUnlockQueue>:
{
1a000f42:	b538      	push	{r3, r4, r5, lr}
1a000f44:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000f46:	f001 faad 	bl	1a0024a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000f4a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000f4e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000f50:	e003      	b.n	1a000f5a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000f52:	f000 ffcf 	bl	1a001ef4 <vTaskMissedYield>
			--cTxLock;
1a000f56:	3c01      	subs	r4, #1
1a000f58:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000f5a:	2c00      	cmp	r4, #0
1a000f5c:	dd08      	ble.n	1a000f70 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000f5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000f60:	b133      	cbz	r3, 1a000f70 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000f62:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000f66:	f000 ff33 	bl	1a001dd0 <xTaskRemoveFromEventList>
1a000f6a:	2800      	cmp	r0, #0
1a000f6c:	d0f3      	beq.n	1a000f56 <prvUnlockQueue+0x14>
1a000f6e:	e7f0      	b.n	1a000f52 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000f70:	23ff      	movs	r3, #255	; 0xff
1a000f72:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000f76:	f001 fab7 	bl	1a0024e8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000f7a:	f001 fa93 	bl	1a0024a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000f7e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000f82:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000f84:	e003      	b.n	1a000f8e <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000f86:	f000 ffb5 	bl	1a001ef4 <vTaskMissedYield>
				--cRxLock;
1a000f8a:	3c01      	subs	r4, #1
1a000f8c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000f8e:	2c00      	cmp	r4, #0
1a000f90:	dd08      	ble.n	1a000fa4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000f92:	692b      	ldr	r3, [r5, #16]
1a000f94:	b133      	cbz	r3, 1a000fa4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000f96:	f105 0010 	add.w	r0, r5, #16
1a000f9a:	f000 ff19 	bl	1a001dd0 <xTaskRemoveFromEventList>
1a000f9e:	2800      	cmp	r0, #0
1a000fa0:	d0f3      	beq.n	1a000f8a <prvUnlockQueue+0x48>
1a000fa2:	e7f0      	b.n	1a000f86 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000fa4:	23ff      	movs	r3, #255	; 0xff
1a000fa6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000faa:	f001 fa9d 	bl	1a0024e8 <vPortExitCritical>
}
1a000fae:	bd38      	pop	{r3, r4, r5, pc}

1a000fb0 <xQueueGenericReset>:
{
1a000fb0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000fb2:	b940      	cbnz	r0, 1a000fc6 <xQueueGenericReset+0x16>
1a000fb4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fb8:	f383 8811 	msr	BASEPRI, r3
1a000fbc:	f3bf 8f6f 	isb	sy
1a000fc0:	f3bf 8f4f 	dsb	sy
1a000fc4:	e7fe      	b.n	1a000fc4 <xQueueGenericReset+0x14>
1a000fc6:	4604      	mov	r4, r0
1a000fc8:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000fca:	f001 fa6b 	bl	1a0024a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000fce:	6821      	ldr	r1, [r4, #0]
1a000fd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000fd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000fd4:	fb03 1002 	mla	r0, r3, r2, r1
1a000fd8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000fda:	2000      	movs	r0, #0
1a000fdc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000fde:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000fe0:	3a01      	subs	r2, #1
1a000fe2:	fb02 1303 	mla	r3, r2, r3, r1
1a000fe6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000fe8:	23ff      	movs	r3, #255	; 0xff
1a000fea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000ff2:	b9a5      	cbnz	r5, 1a00101e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000ff4:	6923      	ldr	r3, [r4, #16]
1a000ff6:	b91b      	cbnz	r3, 1a001000 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000ff8:	f001 fa76 	bl	1a0024e8 <vPortExitCritical>
}
1a000ffc:	2001      	movs	r0, #1
1a000ffe:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001000:	f104 0010 	add.w	r0, r4, #16
1a001004:	f000 fee4 	bl	1a001dd0 <xTaskRemoveFromEventList>
1a001008:	2800      	cmp	r0, #0
1a00100a:	d0f5      	beq.n	1a000ff8 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a00100c:	4b08      	ldr	r3, [pc, #32]	; (1a001030 <xQueueGenericReset+0x80>)
1a00100e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001012:	601a      	str	r2, [r3, #0]
1a001014:	f3bf 8f4f 	dsb	sy
1a001018:	f3bf 8f6f 	isb	sy
1a00101c:	e7ec      	b.n	1a000ff8 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00101e:	f104 0010 	add.w	r0, r4, #16
1a001022:	f000 fa4a 	bl	1a0014ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a001026:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00102a:	f000 fa46 	bl	1a0014ba <vListInitialise>
1a00102e:	e7e3      	b.n	1a000ff8 <xQueueGenericReset+0x48>
1a001030:	e000ed04 	.word	0xe000ed04

1a001034 <prvInitialiseNewQueue>:
{
1a001034:	b538      	push	{r3, r4, r5, lr}
1a001036:	461d      	mov	r5, r3
1a001038:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00103a:	460b      	mov	r3, r1
1a00103c:	b149      	cbz	r1, 1a001052 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00103e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a001040:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a001042:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a001044:	2101      	movs	r1, #1
1a001046:	4620      	mov	r0, r4
1a001048:	f7ff ffb2 	bl	1a000fb0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a00104c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a001050:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a001052:	6024      	str	r4, [r4, #0]
1a001054:	e7f4      	b.n	1a001040 <prvInitialiseNewQueue+0xc>

1a001056 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a001056:	b940      	cbnz	r0, 1a00106a <xQueueGenericCreate+0x14>
1a001058:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00105c:	f383 8811 	msr	BASEPRI, r3
1a001060:	f3bf 8f6f 	isb	sy
1a001064:	f3bf 8f4f 	dsb	sy
1a001068:	e7fe      	b.n	1a001068 <xQueueGenericCreate+0x12>
	{
1a00106a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00106c:	b083      	sub	sp, #12
1a00106e:	4605      	mov	r5, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001070:	b111      	cbz	r1, 1a001078 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001072:	fb01 f000 	mul.w	r0, r1, r0
1a001076:	e000      	b.n	1a00107a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001078:	2000      	movs	r0, #0
1a00107a:	4617      	mov	r7, r2
1a00107c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00107e:	3050      	adds	r0, #80	; 0x50
1a001080:	f7ff fe30 	bl	1a000ce4 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001084:	4606      	mov	r6, r0
1a001086:	b138      	cbz	r0, 1a001098 <xQueueGenericCreate+0x42>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001088:	9000      	str	r0, [sp, #0]
1a00108a:	463b      	mov	r3, r7
1a00108c:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a001090:	4621      	mov	r1, r4
1a001092:	4628      	mov	r0, r5
1a001094:	f7ff ffce 	bl	1a001034 <prvInitialiseNewQueue>
	}
1a001098:	4630      	mov	r0, r6
1a00109a:	b003      	add	sp, #12
1a00109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00109e:	Address 0x000000001a00109e is out of bounds.


1a0010a0 <xQueueGenericSend>:
{
1a0010a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0010a2:	b085      	sub	sp, #20
1a0010a4:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0010a6:	b160      	cbz	r0, 1a0010c2 <xQueueGenericSend+0x22>
1a0010a8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0010aa:	b999      	cbnz	r1, 1a0010d4 <xQueueGenericSend+0x34>
1a0010ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0010ae:	b18a      	cbz	r2, 1a0010d4 <xQueueGenericSend+0x34>
1a0010b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010b4:	f383 8811 	msr	BASEPRI, r3
1a0010b8:	f3bf 8f6f 	isb	sy
1a0010bc:	f3bf 8f4f 	dsb	sy
1a0010c0:	e7fe      	b.n	1a0010c0 <xQueueGenericSend+0x20>
1a0010c2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c6:	f383 8811 	msr	BASEPRI, r3
1a0010ca:	f3bf 8f6f 	isb	sy
1a0010ce:	f3bf 8f4f 	dsb	sy
1a0010d2:	e7fe      	b.n	1a0010d2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0010d4:	2b02      	cmp	r3, #2
1a0010d6:	d10b      	bne.n	1a0010f0 <xQueueGenericSend+0x50>
1a0010d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0010da:	2a01      	cmp	r2, #1
1a0010dc:	d008      	beq.n	1a0010f0 <xQueueGenericSend+0x50>
1a0010de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010e2:	f383 8811 	msr	BASEPRI, r3
1a0010e6:	f3bf 8f6f 	isb	sy
1a0010ea:	f3bf 8f4f 	dsb	sy
1a0010ee:	e7fe      	b.n	1a0010ee <xQueueGenericSend+0x4e>
1a0010f0:	461e      	mov	r6, r3
1a0010f2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0010f4:	f000 ff04 	bl	1a001f00 <xTaskGetSchedulerState>
1a0010f8:	b950      	cbnz	r0, 1a001110 <xQueueGenericSend+0x70>
1a0010fa:	9b01      	ldr	r3, [sp, #4]
1a0010fc:	b153      	cbz	r3, 1a001114 <xQueueGenericSend+0x74>
1a0010fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001102:	f383 8811 	msr	BASEPRI, r3
1a001106:	f3bf 8f6f 	isb	sy
1a00110a:	f3bf 8f4f 	dsb	sy
1a00110e:	e7fe      	b.n	1a00110e <xQueueGenericSend+0x6e>
1a001110:	2500      	movs	r5, #0
1a001112:	e03a      	b.n	1a00118a <xQueueGenericSend+0xea>
1a001114:	2500      	movs	r5, #0
1a001116:	e038      	b.n	1a00118a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001118:	4632      	mov	r2, r6
1a00111a:	4639      	mov	r1, r7
1a00111c:	4620      	mov	r0, r4
1a00111e:	f7ff fec3 	bl	1a000ea8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a001122:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001124:	b94b      	cbnz	r3, 1a00113a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a001126:	b1a8      	cbz	r0, 1a001154 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001128:	4b3b      	ldr	r3, [pc, #236]	; (1a001218 <xQueueGenericSend+0x178>)
1a00112a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00112e:	601a      	str	r2, [r3, #0]
1a001130:	f3bf 8f4f 	dsb	sy
1a001134:	f3bf 8f6f 	isb	sy
1a001138:	e00c      	b.n	1a001154 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00113a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00113e:	f000 fe47 	bl	1a001dd0 <xTaskRemoveFromEventList>
1a001142:	b138      	cbz	r0, 1a001154 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001144:	4b34      	ldr	r3, [pc, #208]	; (1a001218 <xQueueGenericSend+0x178>)
1a001146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00114a:	601a      	str	r2, [r3, #0]
1a00114c:	f3bf 8f4f 	dsb	sy
1a001150:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001154:	f001 f9c8 	bl	1a0024e8 <vPortExitCritical>
				return pdPASS;
1a001158:	2001      	movs	r0, #1
}
1a00115a:	b005      	add	sp, #20
1a00115c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a00115e:	f001 f9c3 	bl	1a0024e8 <vPortExitCritical>
					return errQUEUE_FULL;
1a001162:	2000      	movs	r0, #0
1a001164:	e7f9      	b.n	1a00115a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001166:	a802      	add	r0, sp, #8
1a001168:	f000 fe78 	bl	1a001e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00116c:	2501      	movs	r5, #1
1a00116e:	e019      	b.n	1a0011a4 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a001170:	2300      	movs	r3, #0
1a001172:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001176:	e021      	b.n	1a0011bc <xQueueGenericSend+0x11c>
1a001178:	2300      	movs	r3, #0
1a00117a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00117e:	e023      	b.n	1a0011c8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a001180:	4620      	mov	r0, r4
1a001182:	f7ff fede 	bl	1a000f42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001186:	f000 fc99 	bl	1a001abc <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00118a:	f001 f98b 	bl	1a0024a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00118e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001190:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001192:	429a      	cmp	r2, r3
1a001194:	d3c0      	bcc.n	1a001118 <xQueueGenericSend+0x78>
1a001196:	2e02      	cmp	r6, #2
1a001198:	d0be      	beq.n	1a001118 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00119a:	9b01      	ldr	r3, [sp, #4]
1a00119c:	2b00      	cmp	r3, #0
1a00119e:	d0de      	beq.n	1a00115e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0011a0:	2d00      	cmp	r5, #0
1a0011a2:	d0e0      	beq.n	1a001166 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0011a4:	f001 f9a0 	bl	1a0024e8 <vPortExitCritical>
		vTaskSuspendAll();
1a0011a8:	f000 fbee 	bl	1a001988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0011ac:	f001 f97a 	bl	1a0024a4 <vPortEnterCritical>
1a0011b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0011b4:	b25b      	sxtb	r3, r3
1a0011b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011ba:	d0d9      	beq.n	1a001170 <xQueueGenericSend+0xd0>
1a0011bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0011c0:	b25b      	sxtb	r3, r3
1a0011c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0011c6:	d0d7      	beq.n	1a001178 <xQueueGenericSend+0xd8>
1a0011c8:	f001 f98e 	bl	1a0024e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0011cc:	a901      	add	r1, sp, #4
1a0011ce:	a802      	add	r0, sp, #8
1a0011d0:	f000 fe50 	bl	1a001e74 <xTaskCheckForTimeOut>
1a0011d4:	b9c8      	cbnz	r0, 1a00120a <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0011d6:	4620      	mov	r0, r4
1a0011d8:	f7ff fe4a 	bl	1a000e70 <prvIsQueueFull>
1a0011dc:	2800      	cmp	r0, #0
1a0011de:	d0cf      	beq.n	1a001180 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0011e0:	9901      	ldr	r1, [sp, #4]
1a0011e2:	f104 0010 	add.w	r0, r4, #16
1a0011e6:	f000 fdbf 	bl	1a001d68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0011ea:	4620      	mov	r0, r4
1a0011ec:	f7ff fea9 	bl	1a000f42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0011f0:	f000 fc64 	bl	1a001abc <xTaskResumeAll>
1a0011f4:	2800      	cmp	r0, #0
1a0011f6:	d1c8      	bne.n	1a00118a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a0011f8:	4b07      	ldr	r3, [pc, #28]	; (1a001218 <xQueueGenericSend+0x178>)
1a0011fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011fe:	601a      	str	r2, [r3, #0]
1a001200:	f3bf 8f4f 	dsb	sy
1a001204:	f3bf 8f6f 	isb	sy
1a001208:	e7bf      	b.n	1a00118a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a00120a:	4620      	mov	r0, r4
1a00120c:	f7ff fe99 	bl	1a000f42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001210:	f000 fc54 	bl	1a001abc <xTaskResumeAll>
			return errQUEUE_FULL;
1a001214:	2000      	movs	r0, #0
1a001216:	e7a0      	b.n	1a00115a <xQueueGenericSend+0xba>
1a001218:	e000ed04 	.word	0xe000ed04

1a00121c <xQueueGenericSendFromISR>:
{
1a00121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001220:	b160      	cbz	r0, 1a00123c <xQueueGenericSendFromISR+0x20>
1a001222:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001224:	b999      	cbnz	r1, 1a00124e <xQueueGenericSendFromISR+0x32>
1a001226:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001228:	b188      	cbz	r0, 1a00124e <xQueueGenericSendFromISR+0x32>
1a00122a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00122e:	f383 8811 	msr	BASEPRI, r3
1a001232:	f3bf 8f6f 	isb	sy
1a001236:	f3bf 8f4f 	dsb	sy
1a00123a:	e7fe      	b.n	1a00123a <xQueueGenericSendFromISR+0x1e>
1a00123c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001240:	f383 8811 	msr	BASEPRI, r3
1a001244:	f3bf 8f6f 	isb	sy
1a001248:	f3bf 8f4f 	dsb	sy
1a00124c:	e7fe      	b.n	1a00124c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a00124e:	2b02      	cmp	r3, #2
1a001250:	d10b      	bne.n	1a00126a <xQueueGenericSendFromISR+0x4e>
1a001252:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001254:	2801      	cmp	r0, #1
1a001256:	d008      	beq.n	1a00126a <xQueueGenericSendFromISR+0x4e>
1a001258:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00125c:	f383 8811 	msr	BASEPRI, r3
1a001260:	f3bf 8f6f 	isb	sy
1a001264:	f3bf 8f4f 	dsb	sy
1a001268:	e7fe      	b.n	1a001268 <xQueueGenericSendFromISR+0x4c>
1a00126a:	461f      	mov	r7, r3
1a00126c:	4690      	mov	r8, r2
1a00126e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001270:	f001 fa42 	bl	1a0026f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001274:	f3ef 8611 	mrs	r6, BASEPRI
1a001278:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00127c:	f383 8811 	msr	BASEPRI, r3
1a001280:	f3bf 8f6f 	isb	sy
1a001284:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001288:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00128a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00128c:	429a      	cmp	r2, r3
1a00128e:	d303      	bcc.n	1a001298 <xQueueGenericSendFromISR+0x7c>
1a001290:	2f02      	cmp	r7, #2
1a001292:	d001      	beq.n	1a001298 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a001294:	2000      	movs	r0, #0
1a001296:	e00f      	b.n	1a0012b8 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001298:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a00129c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a00129e:	463a      	mov	r2, r7
1a0012a0:	4649      	mov	r1, r9
1a0012a2:	4620      	mov	r0, r4
1a0012a4:	f7ff fe00 	bl	1a000ea8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0012a8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0012ac:	d008      	beq.n	1a0012c0 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0012ae:	1c6b      	adds	r3, r5, #1
1a0012b0:	b25b      	sxtb	r3, r3
1a0012b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0012b6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0012b8:	f386 8811 	msr	BASEPRI, r6
}
1a0012bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0012c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0012c2:	b15b      	cbz	r3, 1a0012dc <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0012c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012c8:	f000 fd82 	bl	1a001dd0 <xTaskRemoveFromEventList>
1a0012cc:	b140      	cbz	r0, 1a0012e0 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0012ce:	f1b8 0f00 	cmp.w	r8, #0
1a0012d2:	d007      	beq.n	1a0012e4 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0012d4:	2001      	movs	r0, #1
1a0012d6:	f8c8 0000 	str.w	r0, [r8]
1a0012da:	e7ed      	b.n	1a0012b8 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0012dc:	2001      	movs	r0, #1
1a0012de:	e7eb      	b.n	1a0012b8 <xQueueGenericSendFromISR+0x9c>
1a0012e0:	2001      	movs	r0, #1
1a0012e2:	e7e9      	b.n	1a0012b8 <xQueueGenericSendFromISR+0x9c>
1a0012e4:	2001      	movs	r0, #1
1a0012e6:	e7e7      	b.n	1a0012b8 <xQueueGenericSendFromISR+0x9c>

1a0012e8 <xQueueReceive>:
{
1a0012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0012ea:	b085      	sub	sp, #20
1a0012ec:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0012ee:	b160      	cbz	r0, 1a00130a <xQueueReceive+0x22>
1a0012f0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0012f2:	b999      	cbnz	r1, 1a00131c <xQueueReceive+0x34>
1a0012f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0012f6:	b18b      	cbz	r3, 1a00131c <xQueueReceive+0x34>
	__asm volatile
1a0012f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012fc:	f383 8811 	msr	BASEPRI, r3
1a001300:	f3bf 8f6f 	isb	sy
1a001304:	f3bf 8f4f 	dsb	sy
1a001308:	e7fe      	b.n	1a001308 <xQueueReceive+0x20>
1a00130a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00130e:	f383 8811 	msr	BASEPRI, r3
1a001312:	f3bf 8f6f 	isb	sy
1a001316:	f3bf 8f4f 	dsb	sy
1a00131a:	e7fe      	b.n	1a00131a <xQueueReceive+0x32>
1a00131c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00131e:	f000 fdef 	bl	1a001f00 <xTaskGetSchedulerState>
1a001322:	b950      	cbnz	r0, 1a00133a <xQueueReceive+0x52>
1a001324:	9b01      	ldr	r3, [sp, #4]
1a001326:	b153      	cbz	r3, 1a00133e <xQueueReceive+0x56>
1a001328:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00132c:	f383 8811 	msr	BASEPRI, r3
1a001330:	f3bf 8f6f 	isb	sy
1a001334:	f3bf 8f4f 	dsb	sy
1a001338:	e7fe      	b.n	1a001338 <xQueueReceive+0x50>
1a00133a:	2600      	movs	r6, #0
1a00133c:	e03e      	b.n	1a0013bc <xQueueReceive+0xd4>
1a00133e:	2600      	movs	r6, #0
1a001340:	e03c      	b.n	1a0013bc <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a001342:	4639      	mov	r1, r7
1a001344:	4620      	mov	r0, r4
1a001346:	f7ff fdea 	bl	1a000f1e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00134a:	3d01      	subs	r5, #1
1a00134c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00134e:	6923      	ldr	r3, [r4, #16]
1a001350:	b923      	cbnz	r3, 1a00135c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a001352:	f001 f8c9 	bl	1a0024e8 <vPortExitCritical>
				return pdPASS;
1a001356:	2001      	movs	r0, #1
}
1a001358:	b005      	add	sp, #20
1a00135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00135c:	f104 0010 	add.w	r0, r4, #16
1a001360:	f000 fd36 	bl	1a001dd0 <xTaskRemoveFromEventList>
1a001364:	2800      	cmp	r0, #0
1a001366:	d0f4      	beq.n	1a001352 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001368:	4b34      	ldr	r3, [pc, #208]	; (1a00143c <xQueueReceive+0x154>)
1a00136a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00136e:	601a      	str	r2, [r3, #0]
1a001370:	f3bf 8f4f 	dsb	sy
1a001374:	f3bf 8f6f 	isb	sy
1a001378:	e7eb      	b.n	1a001352 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a00137a:	f001 f8b5 	bl	1a0024e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00137e:	2000      	movs	r0, #0
1a001380:	e7ea      	b.n	1a001358 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001382:	a802      	add	r0, sp, #8
1a001384:	f000 fd6a 	bl	1a001e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001388:	2601      	movs	r6, #1
1a00138a:	e021      	b.n	1a0013d0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a00138c:	2300      	movs	r3, #0
1a00138e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001392:	e029      	b.n	1a0013e8 <xQueueReceive+0x100>
1a001394:	2300      	movs	r3, #0
1a001396:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00139a:	e02b      	b.n	1a0013f4 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a00139c:	4620      	mov	r0, r4
1a00139e:	f7ff fdd0 	bl	1a000f42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0013a2:	f000 fb8b 	bl	1a001abc <xTaskResumeAll>
1a0013a6:	e009      	b.n	1a0013bc <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0013a8:	4620      	mov	r0, r4
1a0013aa:	f7ff fdca 	bl	1a000f42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0013ae:	f000 fb85 	bl	1a001abc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0013b2:	4620      	mov	r0, r4
1a0013b4:	f7ff fd6b 	bl	1a000e8e <prvIsQueueEmpty>
1a0013b8:	2800      	cmp	r0, #0
1a0013ba:	d13d      	bne.n	1a001438 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0013bc:	f001 f872 	bl	1a0024a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0013c0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0013c2:	2d00      	cmp	r5, #0
1a0013c4:	d1bd      	bne.n	1a001342 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0013c6:	9b01      	ldr	r3, [sp, #4]
1a0013c8:	2b00      	cmp	r3, #0
1a0013ca:	d0d6      	beq.n	1a00137a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0013cc:	2e00      	cmp	r6, #0
1a0013ce:	d0d8      	beq.n	1a001382 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0013d0:	f001 f88a 	bl	1a0024e8 <vPortExitCritical>
		vTaskSuspendAll();
1a0013d4:	f000 fad8 	bl	1a001988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0013d8:	f001 f864 	bl	1a0024a4 <vPortEnterCritical>
1a0013dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0013e0:	b25b      	sxtb	r3, r3
1a0013e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0013e6:	d0d1      	beq.n	1a00138c <xQueueReceive+0xa4>
1a0013e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0013ec:	b25b      	sxtb	r3, r3
1a0013ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0013f2:	d0cf      	beq.n	1a001394 <xQueueReceive+0xac>
1a0013f4:	f001 f878 	bl	1a0024e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0013f8:	a901      	add	r1, sp, #4
1a0013fa:	a802      	add	r0, sp, #8
1a0013fc:	f000 fd3a 	bl	1a001e74 <xTaskCheckForTimeOut>
1a001400:	2800      	cmp	r0, #0
1a001402:	d1d1      	bne.n	1a0013a8 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001404:	4620      	mov	r0, r4
1a001406:	f7ff fd42 	bl	1a000e8e <prvIsQueueEmpty>
1a00140a:	2800      	cmp	r0, #0
1a00140c:	d0c6      	beq.n	1a00139c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00140e:	9901      	ldr	r1, [sp, #4]
1a001410:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001414:	f000 fca8 	bl	1a001d68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001418:	4620      	mov	r0, r4
1a00141a:	f7ff fd92 	bl	1a000f42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00141e:	f000 fb4d 	bl	1a001abc <xTaskResumeAll>
1a001422:	2800      	cmp	r0, #0
1a001424:	d1ca      	bne.n	1a0013bc <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001426:	4b05      	ldr	r3, [pc, #20]	; (1a00143c <xQueueReceive+0x154>)
1a001428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00142c:	601a      	str	r2, [r3, #0]
1a00142e:	f3bf 8f4f 	dsb	sy
1a001432:	f3bf 8f6f 	isb	sy
1a001436:	e7c1      	b.n	1a0013bc <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001438:	2000      	movs	r0, #0
1a00143a:	e78d      	b.n	1a001358 <xQueueReceive+0x70>
1a00143c:	e000ed04 	.word	0xe000ed04

1a001440 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001440:	2300      	movs	r3, #0
1a001442:	2b07      	cmp	r3, #7
1a001444:	d80c      	bhi.n	1a001460 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001446:	4a07      	ldr	r2, [pc, #28]	; (1a001464 <vQueueAddToRegistry+0x24>)
1a001448:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00144c:	b10a      	cbz	r2, 1a001452 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00144e:	3301      	adds	r3, #1
1a001450:	e7f7      	b.n	1a001442 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001452:	4a04      	ldr	r2, [pc, #16]	; (1a001464 <vQueueAddToRegistry+0x24>)
1a001454:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00145c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00145e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001460:	4770      	bx	lr
1a001462:	bf00      	nop
1a001464:	10002398 	.word	0x10002398

1a001468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001468:	b570      	push	{r4, r5, r6, lr}
1a00146a:	4604      	mov	r4, r0
1a00146c:	460d      	mov	r5, r1
1a00146e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001470:	f001 f818 	bl	1a0024a4 <vPortEnterCritical>
1a001474:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001478:	b25b      	sxtb	r3, r3
1a00147a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00147e:	d00d      	beq.n	1a00149c <vQueueWaitForMessageRestricted+0x34>
1a001480:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001484:	b25b      	sxtb	r3, r3
1a001486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00148a:	d00b      	beq.n	1a0014a4 <vQueueWaitForMessageRestricted+0x3c>
1a00148c:	f001 f82c 	bl	1a0024e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001490:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001492:	b15b      	cbz	r3, 1a0014ac <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001494:	4620      	mov	r0, r4
1a001496:	f7ff fd54 	bl	1a000f42 <prvUnlockQueue>
	}
1a00149a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00149c:	2300      	movs	r3, #0
1a00149e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0014a2:	e7ed      	b.n	1a001480 <vQueueWaitForMessageRestricted+0x18>
1a0014a4:	2300      	movs	r3, #0
1a0014a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0014aa:	e7ef      	b.n	1a00148c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0014ac:	4632      	mov	r2, r6
1a0014ae:	4629      	mov	r1, r5
1a0014b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0014b4:	f000 fc70 	bl	1a001d98 <vTaskPlaceOnEventListRestricted>
1a0014b8:	e7ec      	b.n	1a001494 <vQueueWaitForMessageRestricted+0x2c>

1a0014ba <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0014ba:	f100 0308 	add.w	r3, r0, #8
1a0014be:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0014c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0014c4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0014c6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0014c8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0014ca:	2300      	movs	r3, #0
1a0014cc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0014ce:	4770      	bx	lr

1a0014d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0014d0:	2300      	movs	r3, #0
1a0014d2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0014d4:	4770      	bx	lr

1a0014d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0014d6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0014d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0014da:	689a      	ldr	r2, [r3, #8]
1a0014dc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0014de:	689a      	ldr	r2, [r3, #8]
1a0014e0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0014e2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0014e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0014e6:	6803      	ldr	r3, [r0, #0]
1a0014e8:	3301      	adds	r3, #1
1a0014ea:	6003      	str	r3, [r0, #0]
}
1a0014ec:	4770      	bx	lr

1a0014ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0014ee:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0014f0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0014f2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0014f6:	d002      	beq.n	1a0014fe <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0014f8:	f100 0208 	add.w	r2, r0, #8
1a0014fc:	e002      	b.n	1a001504 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0014fe:	6902      	ldr	r2, [r0, #16]
1a001500:	e004      	b.n	1a00150c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001502:	461a      	mov	r2, r3
1a001504:	6853      	ldr	r3, [r2, #4]
1a001506:	681c      	ldr	r4, [r3, #0]
1a001508:	42ac      	cmp	r4, r5
1a00150a:	d9fa      	bls.n	1a001502 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00150c:	6853      	ldr	r3, [r2, #4]
1a00150e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001510:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001512:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001514:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001516:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001518:	6803      	ldr	r3, [r0, #0]
1a00151a:	3301      	adds	r3, #1
1a00151c:	6003      	str	r3, [r0, #0]
}
1a00151e:	bc30      	pop	{r4, r5}
1a001520:	4770      	bx	lr

1a001522 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001522:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001524:	6842      	ldr	r2, [r0, #4]
1a001526:	6881      	ldr	r1, [r0, #8]
1a001528:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00152a:	6882      	ldr	r2, [r0, #8]
1a00152c:	6841      	ldr	r1, [r0, #4]
1a00152e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001530:	685a      	ldr	r2, [r3, #4]
1a001532:	4282      	cmp	r2, r0
1a001534:	d006      	beq.n	1a001544 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001536:	2200      	movs	r2, #0
1a001538:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00153a:	681a      	ldr	r2, [r3, #0]
1a00153c:	3a01      	subs	r2, #1
1a00153e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001540:	6818      	ldr	r0, [r3, #0]
}
1a001542:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001544:	6882      	ldr	r2, [r0, #8]
1a001546:	605a      	str	r2, [r3, #4]
1a001548:	e7f5      	b.n	1a001536 <uxListRemove+0x14>
1a00154a:	Address 0x000000001a00154a is out of bounds.


1a00154c <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a00154c:	b510      	push	{r4, lr}
1a00154e:	b082      	sub	sp, #8
1a001550:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a001552:	9001      	str	r0, [sp, #4]
1a001554:	2300      	movs	r3, #0
1a001556:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a001558:	f000 ffa4 	bl	1a0024a4 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a00155c:	9901      	ldr	r1, [sp, #4]
1a00155e:	4622      	mov	r2, r4
1a001560:	4804      	ldr	r0, [pc, #16]	; (1a001574 <vAssertCalled+0x28>)
1a001562:	f002 fe25 	bl	1a0041b0 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a001566:	9b00      	ldr	r3, [sp, #0]
1a001568:	2b00      	cmp	r3, #0
1a00156a:	d0fc      	beq.n	1a001566 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a00156c:	f000 ffbc 	bl	1a0024e8 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001570:	b002      	add	sp, #8
1a001572:	bd10      	pop	{r4, pc}
1a001574:	1a004c7c 	.word	0x1a004c7c

1a001578 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a001578:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a00157a:	4804      	ldr	r0, [pc, #16]	; (1a00158c <vApplicationMallocFailedHook+0x14>)
1a00157c:	f002 fe8c 	bl	1a004298 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001580:	4903      	ldr	r1, [pc, #12]	; (1a001590 <vApplicationMallocFailedHook+0x18>)
1a001582:	202c      	movs	r0, #44	; 0x2c
1a001584:	f7ff ffe2 	bl	1a00154c <vAssertCalled>
}
1a001588:	bd08      	pop	{r3, pc}
1a00158a:	bf00      	nop
1a00158c:	1a004c08 	.word	0x1a004c08
1a001590:	1a004c2c 	.word	0x1a004c2c

1a001594 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001594:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a001596:	4804      	ldr	r0, [pc, #16]	; (1a0015a8 <vApplicationStackOverflowHook+0x14>)
1a001598:	f002 fe0a 	bl	1a0041b0 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a00159c:	4903      	ldr	r1, [pc, #12]	; (1a0015ac <vApplicationStackOverflowHook+0x18>)
1a00159e:	2050      	movs	r0, #80	; 0x50
1a0015a0:	f7ff ffd4 	bl	1a00154c <vAssertCalled>
}
1a0015a4:	bd08      	pop	{r3, pc}
1a0015a6:	bf00      	nop
1a0015a8:	1a004c4c 	.word	0x1a004c4c
1a0015ac:	1a004c2c 	.word	0x1a004c2c

1a0015b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a0015b0:	4b08      	ldr	r3, [pc, #32]	; (1a0015d4 <prvResetNextTaskUnblockTime+0x24>)
1a0015b2:	681b      	ldr	r3, [r3, #0]
1a0015b4:	681b      	ldr	r3, [r3, #0]
1a0015b6:	b13b      	cbz	r3, 1a0015c8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a0015b8:	4b06      	ldr	r3, [pc, #24]	; (1a0015d4 <prvResetNextTaskUnblockTime+0x24>)
1a0015ba:	681b      	ldr	r3, [r3, #0]
1a0015bc:	68db      	ldr	r3, [r3, #12]
1a0015be:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a0015c0:	685a      	ldr	r2, [r3, #4]
1a0015c2:	4b05      	ldr	r3, [pc, #20]	; (1a0015d8 <prvResetNextTaskUnblockTime+0x28>)
1a0015c4:	601a      	str	r2, [r3, #0]
	}
}
1a0015c6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a0015c8:	4b03      	ldr	r3, [pc, #12]	; (1a0015d8 <prvResetNextTaskUnblockTime+0x28>)
1a0015ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015ce:	601a      	str	r2, [r3, #0]
1a0015d0:	4770      	bx	lr
1a0015d2:	bf00      	nop
1a0015d4:	100021ac 	.word	0x100021ac
1a0015d8:	10002284 	.word	0x10002284

1a0015dc <prvDeleteTCB>:
	{
1a0015dc:	b510      	push	{r4, lr}
1a0015de:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
1a0015e0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0015e2:	f7ff fc0d 	bl	1a000e00 <vPortFree>
			vPortFree( pxTCB );
1a0015e6:	4620      	mov	r0, r4
1a0015e8:	f7ff fc0a 	bl	1a000e00 <vPortFree>
	}
1a0015ec:	bd10      	pop	{r4, pc}

1a0015ee <prvInitialiseNewTask>:
{
1a0015ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0015f2:	4681      	mov	r9, r0
1a0015f4:	460d      	mov	r5, r1
1a0015f6:	4617      	mov	r7, r2
1a0015f8:	469a      	mov	sl, r3
1a0015fa:	9e08      	ldr	r6, [sp, #32]
1a0015fc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001600:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001602:	0092      	lsls	r2, r2, #2
1a001604:	21a5      	movs	r1, #165	; 0xa5
1a001606:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001608:	f002 fd21 	bl	1a00404e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00160c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00160e:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001612:	3a01      	subs	r2, #1
1a001614:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001618:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a00161c:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a00161e:	2300      	movs	r3, #0
1a001620:	2b0f      	cmp	r3, #15
1a001622:	d807      	bhi.n	1a001634 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001624:	5ce9      	ldrb	r1, [r5, r3]
1a001626:	18e2      	adds	r2, r4, r3
1a001628:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a00162c:	5cea      	ldrb	r2, [r5, r3]
1a00162e:	b10a      	cbz	r2, 1a001634 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001630:	3301      	adds	r3, #1
1a001632:	e7f5      	b.n	1a001620 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001634:	2300      	movs	r3, #0
1a001636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a00163a:	2e06      	cmp	r6, #6
1a00163c:	d900      	bls.n	1a001640 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a00163e:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001640:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001642:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001644:	2500      	movs	r5, #0
1a001646:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001648:	1d20      	adds	r0, r4, #4
1a00164a:	f7ff ff41 	bl	1a0014d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a00164e:	f104 0018 	add.w	r0, r4, #24
1a001652:	f7ff ff3d 	bl	1a0014d0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001656:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001658:	f1c6 0607 	rsb	r6, r6, #7
1a00165c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a00165e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001660:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001662:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001666:	4652      	mov	r2, sl
1a001668:	4649      	mov	r1, r9
1a00166a:	4638      	mov	r0, r7
1a00166c:	f000 fef0 	bl	1a002450 <pxPortInitialiseStack>
1a001670:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001672:	f1b8 0f00 	cmp.w	r8, #0
1a001676:	d001      	beq.n	1a00167c <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001678:	f8c8 4000 	str.w	r4, [r8]
}
1a00167c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a001680 <prvInitialiseTaskLists>:
{
1a001680:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001682:	2400      	movs	r4, #0
1a001684:	e007      	b.n	1a001696 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001686:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00168a:	0093      	lsls	r3, r2, #2
1a00168c:	480e      	ldr	r0, [pc, #56]	; (1a0016c8 <prvInitialiseTaskLists+0x48>)
1a00168e:	4418      	add	r0, r3
1a001690:	f7ff ff13 	bl	1a0014ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001694:	3401      	adds	r4, #1
1a001696:	2c06      	cmp	r4, #6
1a001698:	d9f5      	bls.n	1a001686 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00169a:	4d0c      	ldr	r5, [pc, #48]	; (1a0016cc <prvInitialiseTaskLists+0x4c>)
1a00169c:	4628      	mov	r0, r5
1a00169e:	f7ff ff0c 	bl	1a0014ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a0016a2:	4c0b      	ldr	r4, [pc, #44]	; (1a0016d0 <prvInitialiseTaskLists+0x50>)
1a0016a4:	4620      	mov	r0, r4
1a0016a6:	f7ff ff08 	bl	1a0014ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a0016aa:	480a      	ldr	r0, [pc, #40]	; (1a0016d4 <prvInitialiseTaskLists+0x54>)
1a0016ac:	f7ff ff05 	bl	1a0014ba <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a0016b0:	4809      	ldr	r0, [pc, #36]	; (1a0016d8 <prvInitialiseTaskLists+0x58>)
1a0016b2:	f7ff ff02 	bl	1a0014ba <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a0016b6:	4809      	ldr	r0, [pc, #36]	; (1a0016dc <prvInitialiseTaskLists+0x5c>)
1a0016b8:	f7ff feff 	bl	1a0014ba <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a0016bc:	4b08      	ldr	r3, [pc, #32]	; (1a0016e0 <prvInitialiseTaskLists+0x60>)
1a0016be:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a0016c0:	4b08      	ldr	r3, [pc, #32]	; (1a0016e4 <prvInitialiseTaskLists+0x64>)
1a0016c2:	601c      	str	r4, [r3, #0]
}
1a0016c4:	bd38      	pop	{r3, r4, r5, pc}
1a0016c6:	bf00      	nop
1a0016c8:	100021b4 	.word	0x100021b4
1a0016cc:	10002258 	.word	0x10002258
1a0016d0:	1000226c 	.word	0x1000226c
1a0016d4:	1000228c 	.word	0x1000228c
1a0016d8:	100022b8 	.word	0x100022b8
1a0016dc:	100022a4 	.word	0x100022a4
1a0016e0:	100021ac 	.word	0x100021ac
1a0016e4:	100021b0 	.word	0x100021b0

1a0016e8 <prvAddNewTaskToReadyList>:
{
1a0016e8:	b510      	push	{r4, lr}
1a0016ea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0016ec:	f000 feda 	bl	1a0024a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0016f0:	4a21      	ldr	r2, [pc, #132]	; (1a001778 <prvAddNewTaskToReadyList+0x90>)
1a0016f2:	6813      	ldr	r3, [r2, #0]
1a0016f4:	3301      	adds	r3, #1
1a0016f6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0016f8:	4b20      	ldr	r3, [pc, #128]	; (1a00177c <prvAddNewTaskToReadyList+0x94>)
1a0016fa:	681b      	ldr	r3, [r3, #0]
1a0016fc:	b15b      	cbz	r3, 1a001716 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0016fe:	4b20      	ldr	r3, [pc, #128]	; (1a001780 <prvAddNewTaskToReadyList+0x98>)
1a001700:	681b      	ldr	r3, [r3, #0]
1a001702:	b96b      	cbnz	r3, 1a001720 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001704:	4b1d      	ldr	r3, [pc, #116]	; (1a00177c <prvAddNewTaskToReadyList+0x94>)
1a001706:	681b      	ldr	r3, [r3, #0]
1a001708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00170a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00170c:	429a      	cmp	r2, r3
1a00170e:	d807      	bhi.n	1a001720 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001710:	4b1a      	ldr	r3, [pc, #104]	; (1a00177c <prvAddNewTaskToReadyList+0x94>)
1a001712:	601c      	str	r4, [r3, #0]
1a001714:	e004      	b.n	1a001720 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001716:	4b19      	ldr	r3, [pc, #100]	; (1a00177c <prvAddNewTaskToReadyList+0x94>)
1a001718:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00171a:	6813      	ldr	r3, [r2, #0]
1a00171c:	2b01      	cmp	r3, #1
1a00171e:	d027      	beq.n	1a001770 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001720:	4a18      	ldr	r2, [pc, #96]	; (1a001784 <prvAddNewTaskToReadyList+0x9c>)
1a001722:	6813      	ldr	r3, [r2, #0]
1a001724:	3301      	adds	r3, #1
1a001726:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001728:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a00172a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00172c:	2201      	movs	r2, #1
1a00172e:	409a      	lsls	r2, r3
1a001730:	4915      	ldr	r1, [pc, #84]	; (1a001788 <prvAddNewTaskToReadyList+0xa0>)
1a001732:	6808      	ldr	r0, [r1, #0]
1a001734:	4302      	orrs	r2, r0
1a001736:	600a      	str	r2, [r1, #0]
1a001738:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00173c:	009a      	lsls	r2, r3, #2
1a00173e:	1d21      	adds	r1, r4, #4
1a001740:	4812      	ldr	r0, [pc, #72]	; (1a00178c <prvAddNewTaskToReadyList+0xa4>)
1a001742:	4410      	add	r0, r2
1a001744:	f7ff fec7 	bl	1a0014d6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001748:	f000 fece 	bl	1a0024e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a00174c:	4b0c      	ldr	r3, [pc, #48]	; (1a001780 <prvAddNewTaskToReadyList+0x98>)
1a00174e:	681b      	ldr	r3, [r3, #0]
1a001750:	b16b      	cbz	r3, 1a00176e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001752:	4b0a      	ldr	r3, [pc, #40]	; (1a00177c <prvAddNewTaskToReadyList+0x94>)
1a001754:	681b      	ldr	r3, [r3, #0]
1a001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00175a:	429a      	cmp	r2, r3
1a00175c:	d207      	bcs.n	1a00176e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00175e:	4b0c      	ldr	r3, [pc, #48]	; (1a001790 <prvAddNewTaskToReadyList+0xa8>)
1a001760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001764:	601a      	str	r2, [r3, #0]
1a001766:	f3bf 8f4f 	dsb	sy
1a00176a:	f3bf 8f6f 	isb	sy
}
1a00176e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001770:	f7ff ff86 	bl	1a001680 <prvInitialiseTaskLists>
1a001774:	e7d4      	b.n	1a001720 <prvAddNewTaskToReadyList+0x38>
1a001776:	bf00      	nop
1a001778:	10002240 	.word	0x10002240
1a00177c:	100021a8 	.word	0x100021a8
1a001780:	100022a0 	.word	0x100022a0
1a001784:	10002250 	.word	0x10002250
1a001788:	10002254 	.word	0x10002254
1a00178c:	100021b4 	.word	0x100021b4
1a001790:	e000ed04 	.word	0xe000ed04

1a001794 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001794:	4b0f      	ldr	r3, [pc, #60]	; (1a0017d4 <prvCheckTasksWaitingTermination+0x40>)
1a001796:	681b      	ldr	r3, [r3, #0]
1a001798:	b1d3      	cbz	r3, 1a0017d0 <prvCheckTasksWaitingTermination+0x3c>
{
1a00179a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a00179c:	f000 fe82 	bl	1a0024a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a0017a0:	4b0d      	ldr	r3, [pc, #52]	; (1a0017d8 <prvCheckTasksWaitingTermination+0x44>)
1a0017a2:	68db      	ldr	r3, [r3, #12]
1a0017a4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a0017a6:	1d20      	adds	r0, r4, #4
1a0017a8:	f7ff febb 	bl	1a001522 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a0017ac:	4a0b      	ldr	r2, [pc, #44]	; (1a0017dc <prvCheckTasksWaitingTermination+0x48>)
1a0017ae:	6813      	ldr	r3, [r2, #0]
1a0017b0:	3b01      	subs	r3, #1
1a0017b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a0017b4:	4a07      	ldr	r2, [pc, #28]	; (1a0017d4 <prvCheckTasksWaitingTermination+0x40>)
1a0017b6:	6813      	ldr	r3, [r2, #0]
1a0017b8:	3b01      	subs	r3, #1
1a0017ba:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0017bc:	f000 fe94 	bl	1a0024e8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0017c0:	4620      	mov	r0, r4
1a0017c2:	f7ff ff0b 	bl	1a0015dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0017c6:	4b03      	ldr	r3, [pc, #12]	; (1a0017d4 <prvCheckTasksWaitingTermination+0x40>)
1a0017c8:	681b      	ldr	r3, [r3, #0]
1a0017ca:	2b00      	cmp	r3, #0
1a0017cc:	d1e6      	bne.n	1a00179c <prvCheckTasksWaitingTermination+0x8>
}
1a0017ce:	bd10      	pop	{r4, pc}
1a0017d0:	4770      	bx	lr
1a0017d2:	bf00      	nop
1a0017d4:	10002244 	.word	0x10002244
1a0017d8:	100022b8 	.word	0x100022b8
1a0017dc:	10002240 	.word	0x10002240

1a0017e0 <prvIdleTask>:
{
1a0017e0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0017e2:	f7ff ffd7 	bl	1a001794 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0017e6:	4b06      	ldr	r3, [pc, #24]	; (1a001800 <prvIdleTask+0x20>)
1a0017e8:	681b      	ldr	r3, [r3, #0]
1a0017ea:	2b01      	cmp	r3, #1
1a0017ec:	d9f9      	bls.n	1a0017e2 <prvIdleTask+0x2>
				taskYIELD();
1a0017ee:	4b05      	ldr	r3, [pc, #20]	; (1a001804 <prvIdleTask+0x24>)
1a0017f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017f4:	601a      	str	r2, [r3, #0]
1a0017f6:	f3bf 8f4f 	dsb	sy
1a0017fa:	f3bf 8f6f 	isb	sy
1a0017fe:	e7f0      	b.n	1a0017e2 <prvIdleTask+0x2>
1a001800:	100021b4 	.word	0x100021b4
1a001804:	e000ed04 	.word	0xe000ed04

1a001808 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001808:	b570      	push	{r4, r5, r6, lr}
1a00180a:	4604      	mov	r4, r0
1a00180c:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a00180e:	4b1d      	ldr	r3, [pc, #116]	; (1a001884 <prvAddCurrentTaskToDelayedList+0x7c>)
1a001810:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001812:	4b1d      	ldr	r3, [pc, #116]	; (1a001888 <prvAddCurrentTaskToDelayedList+0x80>)
1a001814:	6818      	ldr	r0, [r3, #0]
1a001816:	3004      	adds	r0, #4
1a001818:	f7ff fe83 	bl	1a001522 <uxListRemove>
1a00181c:	b950      	cbnz	r0, 1a001834 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a00181e:	4b1a      	ldr	r3, [pc, #104]	; (1a001888 <prvAddCurrentTaskToDelayedList+0x80>)
1a001820:	681b      	ldr	r3, [r3, #0]
1a001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001824:	2301      	movs	r3, #1
1a001826:	fa03 f202 	lsl.w	r2, r3, r2
1a00182a:	4918      	ldr	r1, [pc, #96]	; (1a00188c <prvAddCurrentTaskToDelayedList+0x84>)
1a00182c:	680b      	ldr	r3, [r1, #0]
1a00182e:	ea23 0302 	bic.w	r3, r3, r2
1a001832:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001834:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001838:	d013      	beq.n	1a001862 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a00183a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a00183c:	4b12      	ldr	r3, [pc, #72]	; (1a001888 <prvAddCurrentTaskToDelayedList+0x80>)
1a00183e:	681b      	ldr	r3, [r3, #0]
1a001840:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001842:	42a5      	cmp	r5, r4
1a001844:	d816      	bhi.n	1a001874 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001846:	4b12      	ldr	r3, [pc, #72]	; (1a001890 <prvAddCurrentTaskToDelayedList+0x88>)
1a001848:	6818      	ldr	r0, [r3, #0]
1a00184a:	4b0f      	ldr	r3, [pc, #60]	; (1a001888 <prvAddCurrentTaskToDelayedList+0x80>)
1a00184c:	6819      	ldr	r1, [r3, #0]
1a00184e:	3104      	adds	r1, #4
1a001850:	f7ff fe4d 	bl	1a0014ee <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001854:	4b0f      	ldr	r3, [pc, #60]	; (1a001894 <prvAddCurrentTaskToDelayedList+0x8c>)
1a001856:	681b      	ldr	r3, [r3, #0]
1a001858:	42a3      	cmp	r3, r4
1a00185a:	d912      	bls.n	1a001882 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a00185c:	4b0d      	ldr	r3, [pc, #52]	; (1a001894 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00185e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001860:	e00f      	b.n	1a001882 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001862:	2e00      	cmp	r6, #0
1a001864:	d0e9      	beq.n	1a00183a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001866:	4b08      	ldr	r3, [pc, #32]	; (1a001888 <prvAddCurrentTaskToDelayedList+0x80>)
1a001868:	6819      	ldr	r1, [r3, #0]
1a00186a:	3104      	adds	r1, #4
1a00186c:	480a      	ldr	r0, [pc, #40]	; (1a001898 <prvAddCurrentTaskToDelayedList+0x90>)
1a00186e:	f7ff fe32 	bl	1a0014d6 <vListInsertEnd>
1a001872:	e006      	b.n	1a001882 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001874:	4b09      	ldr	r3, [pc, #36]	; (1a00189c <prvAddCurrentTaskToDelayedList+0x94>)
1a001876:	6818      	ldr	r0, [r3, #0]
1a001878:	4b03      	ldr	r3, [pc, #12]	; (1a001888 <prvAddCurrentTaskToDelayedList+0x80>)
1a00187a:	6819      	ldr	r1, [r3, #0]
1a00187c:	3104      	adds	r1, #4
1a00187e:	f7ff fe36 	bl	1a0014ee <vListInsert>
}
1a001882:	bd70      	pop	{r4, r5, r6, pc}
1a001884:	100022cc 	.word	0x100022cc
1a001888:	100021a8 	.word	0x100021a8
1a00188c:	10002254 	.word	0x10002254
1a001890:	100021ac 	.word	0x100021ac
1a001894:	10002284 	.word	0x10002284
1a001898:	100022a4 	.word	0x100022a4
1a00189c:	100021b0 	.word	0x100021b0

1a0018a0 <xTaskCreate>:
	{
1a0018a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0018a4:	b085      	sub	sp, #20
1a0018a6:	4607      	mov	r7, r0
1a0018a8:	4688      	mov	r8, r1
1a0018aa:	4615      	mov	r5, r2
1a0018ac:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0018ae:	0090      	lsls	r0, r2, #2
1a0018b0:	f7ff fa18 	bl	1a000ce4 <pvPortMalloc>
			if( pxStack != NULL )
1a0018b4:	b1f8      	cbz	r0, 1a0018f6 <xTaskCreate+0x56>
1a0018b6:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0018b8:	2060      	movs	r0, #96	; 0x60
1a0018ba:	f7ff fa13 	bl	1a000ce4 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0018be:	4604      	mov	r4, r0
1a0018c0:	b1a8      	cbz	r0, 1a0018ee <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
1a0018c2:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a0018c4:	b1d4      	cbz	r4, 1a0018fc <xTaskCreate+0x5c>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a0018c6:	2300      	movs	r3, #0
1a0018c8:	9303      	str	r3, [sp, #12]
1a0018ca:	9402      	str	r4, [sp, #8]
1a0018cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0018ce:	9301      	str	r3, [sp, #4]
1a0018d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0018d2:	9300      	str	r3, [sp, #0]
1a0018d4:	464b      	mov	r3, r9
1a0018d6:	462a      	mov	r2, r5
1a0018d8:	4641      	mov	r1, r8
1a0018da:	4638      	mov	r0, r7
1a0018dc:	f7ff fe87 	bl	1a0015ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0018e0:	4620      	mov	r0, r4
1a0018e2:	f7ff ff01 	bl	1a0016e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a0018e6:	2001      	movs	r0, #1
	}
1a0018e8:	b005      	add	sp, #20
1a0018ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a0018ee:	4630      	mov	r0, r6
1a0018f0:	f7ff fa86 	bl	1a000e00 <vPortFree>
1a0018f4:	e7e6      	b.n	1a0018c4 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a0018f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0018fa:	e7f5      	b.n	1a0018e8 <xTaskCreate+0x48>
1a0018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001900:	e7f2      	b.n	1a0018e8 <xTaskCreate+0x48>
1a001902:	Address 0x000000001a001902 is out of bounds.


1a001904 <vTaskStartScheduler>:
{
1a001904:	b500      	push	{lr}
1a001906:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
1a001908:	4b19      	ldr	r3, [pc, #100]	; (1a001970 <vTaskStartScheduler+0x6c>)
1a00190a:	9301      	str	r3, [sp, #4]
1a00190c:	2300      	movs	r3, #0
1a00190e:	9300      	str	r3, [sp, #0]
1a001910:	225a      	movs	r2, #90	; 0x5a
1a001912:	4918      	ldr	r1, [pc, #96]	; (1a001974 <vTaskStartScheduler+0x70>)
1a001914:	4818      	ldr	r0, [pc, #96]	; (1a001978 <vTaskStartScheduler+0x74>)
1a001916:	f7ff ffc3 	bl	1a0018a0 <xTaskCreate>
		if( xReturn == pdPASS )
1a00191a:	2801      	cmp	r0, #1
1a00191c:	d007      	beq.n	1a00192e <vTaskStartScheduler+0x2a>
	if( xReturn == pdPASS )
1a00191e:	2801      	cmp	r0, #1
1a001920:	d008      	beq.n	1a001934 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001922:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001926:	d01a      	beq.n	1a00195e <vTaskStartScheduler+0x5a>
}
1a001928:	b003      	add	sp, #12
1a00192a:	f85d fb04 	ldr.w	pc, [sp], #4
			xReturn = xTimerCreateTimerTask();
1a00192e:	f000 fbb1 	bl	1a002094 <xTimerCreateTimerTask>
1a001932:	e7f4      	b.n	1a00191e <vTaskStartScheduler+0x1a>
1a001934:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001938:	f383 8811 	msr	BASEPRI, r3
1a00193c:	f3bf 8f6f 	isb	sy
1a001940:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001944:	4b0d      	ldr	r3, [pc, #52]	; (1a00197c <vTaskStartScheduler+0x78>)
1a001946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00194a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a00194c:	4b0c      	ldr	r3, [pc, #48]	; (1a001980 <vTaskStartScheduler+0x7c>)
1a00194e:	2201      	movs	r2, #1
1a001950:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001952:	4b0c      	ldr	r3, [pc, #48]	; (1a001984 <vTaskStartScheduler+0x80>)
1a001954:	2200      	movs	r2, #0
1a001956:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001958:	f000 fe46 	bl	1a0025e8 <xPortStartScheduler>
1a00195c:	e7e4      	b.n	1a001928 <vTaskStartScheduler+0x24>
1a00195e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001962:	f383 8811 	msr	BASEPRI, r3
1a001966:	f3bf 8f6f 	isb	sy
1a00196a:	f3bf 8f4f 	dsb	sy
1a00196e:	e7fe      	b.n	1a00196e <vTaskStartScheduler+0x6a>
1a001970:	10002280 	.word	0x10002280
1a001974:	1a004cbc 	.word	0x1a004cbc
1a001978:	1a0017e1 	.word	0x1a0017e1
1a00197c:	10002284 	.word	0x10002284
1a001980:	100022a0 	.word	0x100022a0
1a001984:	100022cc 	.word	0x100022cc

1a001988 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001988:	4a02      	ldr	r2, [pc, #8]	; (1a001994 <vTaskSuspendAll+0xc>)
1a00198a:	6813      	ldr	r3, [r2, #0]
1a00198c:	3301      	adds	r3, #1
1a00198e:	6013      	str	r3, [r2, #0]
}
1a001990:	4770      	bx	lr
1a001992:	bf00      	nop
1a001994:	1000224c 	.word	0x1000224c

1a001998 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001998:	4b01      	ldr	r3, [pc, #4]	; (1a0019a0 <xTaskGetTickCount+0x8>)
1a00199a:	6818      	ldr	r0, [r3, #0]
}
1a00199c:	4770      	bx	lr
1a00199e:	bf00      	nop
1a0019a0:	100022cc 	.word	0x100022cc

1a0019a4 <xTaskIncrementTick>:
{
1a0019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0019a6:	4b3a      	ldr	r3, [pc, #232]	; (1a001a90 <xTaskIncrementTick+0xec>)
1a0019a8:	681b      	ldr	r3, [r3, #0]
1a0019aa:	2b00      	cmp	r3, #0
1a0019ac:	d164      	bne.n	1a001a78 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a0019ae:	4b39      	ldr	r3, [pc, #228]	; (1a001a94 <xTaskIncrementTick+0xf0>)
1a0019b0:	681d      	ldr	r5, [r3, #0]
1a0019b2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a0019b4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a0019b6:	b9c5      	cbnz	r5, 1a0019ea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a0019b8:	4b37      	ldr	r3, [pc, #220]	; (1a001a98 <xTaskIncrementTick+0xf4>)
1a0019ba:	681b      	ldr	r3, [r3, #0]
1a0019bc:	681b      	ldr	r3, [r3, #0]
1a0019be:	b143      	cbz	r3, 1a0019d2 <xTaskIncrementTick+0x2e>
1a0019c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019c4:	f383 8811 	msr	BASEPRI, r3
1a0019c8:	f3bf 8f6f 	isb	sy
1a0019cc:	f3bf 8f4f 	dsb	sy
1a0019d0:	e7fe      	b.n	1a0019d0 <xTaskIncrementTick+0x2c>
1a0019d2:	4a31      	ldr	r2, [pc, #196]	; (1a001a98 <xTaskIncrementTick+0xf4>)
1a0019d4:	6811      	ldr	r1, [r2, #0]
1a0019d6:	4b31      	ldr	r3, [pc, #196]	; (1a001a9c <xTaskIncrementTick+0xf8>)
1a0019d8:	6818      	ldr	r0, [r3, #0]
1a0019da:	6010      	str	r0, [r2, #0]
1a0019dc:	6019      	str	r1, [r3, #0]
1a0019de:	4a30      	ldr	r2, [pc, #192]	; (1a001aa0 <xTaskIncrementTick+0xfc>)
1a0019e0:	6813      	ldr	r3, [r2, #0]
1a0019e2:	3301      	adds	r3, #1
1a0019e4:	6013      	str	r3, [r2, #0]
1a0019e6:	f7ff fde3 	bl	1a0015b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a0019ea:	4b2e      	ldr	r3, [pc, #184]	; (1a001aa4 <xTaskIncrementTick+0x100>)
1a0019ec:	681b      	ldr	r3, [r3, #0]
1a0019ee:	42ab      	cmp	r3, r5
1a0019f0:	d938      	bls.n	1a001a64 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a0019f2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a0019f4:	4b2c      	ldr	r3, [pc, #176]	; (1a001aa8 <xTaskIncrementTick+0x104>)
1a0019f6:	681b      	ldr	r3, [r3, #0]
1a0019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0019fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019fe:	009a      	lsls	r2, r3, #2
1a001a00:	4b2a      	ldr	r3, [pc, #168]	; (1a001aac <xTaskIncrementTick+0x108>)
1a001a02:	589b      	ldr	r3, [r3, r2]
1a001a04:	2b01      	cmp	r3, #1
1a001a06:	d93c      	bls.n	1a001a82 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001a08:	2401      	movs	r4, #1
1a001a0a:	e03a      	b.n	1a001a82 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001a0c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a0e:	4b22      	ldr	r3, [pc, #136]	; (1a001a98 <xTaskIncrementTick+0xf4>)
1a001a10:	681b      	ldr	r3, [r3, #0]
1a001a12:	681b      	ldr	r3, [r3, #0]
1a001a14:	b343      	cbz	r3, 1a001a68 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a16:	4b20      	ldr	r3, [pc, #128]	; (1a001a98 <xTaskIncrementTick+0xf4>)
1a001a18:	681b      	ldr	r3, [r3, #0]
1a001a1a:	68db      	ldr	r3, [r3, #12]
1a001a1c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001a1e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001a20:	429d      	cmp	r5, r3
1a001a22:	d326      	bcc.n	1a001a72 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001a24:	1d37      	adds	r7, r6, #4
1a001a26:	4638      	mov	r0, r7
1a001a28:	f7ff fd7b 	bl	1a001522 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001a2c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001a2e:	b11b      	cbz	r3, 1a001a38 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001a30:	f106 0018 	add.w	r0, r6, #24
1a001a34:	f7ff fd75 	bl	1a001522 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001a38:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001a3a:	2201      	movs	r2, #1
1a001a3c:	409a      	lsls	r2, r3
1a001a3e:	491c      	ldr	r1, [pc, #112]	; (1a001ab0 <xTaskIncrementTick+0x10c>)
1a001a40:	6808      	ldr	r0, [r1, #0]
1a001a42:	4302      	orrs	r2, r0
1a001a44:	600a      	str	r2, [r1, #0]
1a001a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001a4a:	009a      	lsls	r2, r3, #2
1a001a4c:	4639      	mov	r1, r7
1a001a4e:	4817      	ldr	r0, [pc, #92]	; (1a001aac <xTaskIncrementTick+0x108>)
1a001a50:	4410      	add	r0, r2
1a001a52:	f7ff fd40 	bl	1a0014d6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001a56:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001a58:	4b13      	ldr	r3, [pc, #76]	; (1a001aa8 <xTaskIncrementTick+0x104>)
1a001a5a:	681b      	ldr	r3, [r3, #0]
1a001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001a5e:	429a      	cmp	r2, r3
1a001a60:	d2d4      	bcs.n	1a001a0c <xTaskIncrementTick+0x68>
1a001a62:	e7d4      	b.n	1a001a0e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001a64:	2400      	movs	r4, #0
1a001a66:	e7d2      	b.n	1a001a0e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a68:	4b0e      	ldr	r3, [pc, #56]	; (1a001aa4 <xTaskIncrementTick+0x100>)
1a001a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a6e:	601a      	str	r2, [r3, #0]
					break;
1a001a70:	e7c0      	b.n	1a0019f4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001a72:	4a0c      	ldr	r2, [pc, #48]	; (1a001aa4 <xTaskIncrementTick+0x100>)
1a001a74:	6013      	str	r3, [r2, #0]
						break;
1a001a76:	e7bd      	b.n	1a0019f4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001a78:	4a0e      	ldr	r2, [pc, #56]	; (1a001ab4 <xTaskIncrementTick+0x110>)
1a001a7a:	6813      	ldr	r3, [r2, #0]
1a001a7c:	3301      	adds	r3, #1
1a001a7e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001a80:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001a82:	4b0d      	ldr	r3, [pc, #52]	; (1a001ab8 <xTaskIncrementTick+0x114>)
1a001a84:	681b      	ldr	r3, [r3, #0]
1a001a86:	b103      	cbz	r3, 1a001a8a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001a88:	2401      	movs	r4, #1
}
1a001a8a:	4620      	mov	r0, r4
1a001a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001a8e:	bf00      	nop
1a001a90:	1000224c 	.word	0x1000224c
1a001a94:	100022cc 	.word	0x100022cc
1a001a98:	100021ac 	.word	0x100021ac
1a001a9c:	100021b0 	.word	0x100021b0
1a001aa0:	10002288 	.word	0x10002288
1a001aa4:	10002284 	.word	0x10002284
1a001aa8:	100021a8 	.word	0x100021a8
1a001aac:	100021b4 	.word	0x100021b4
1a001ab0:	10002254 	.word	0x10002254
1a001ab4:	10002248 	.word	0x10002248
1a001ab8:	100022d0 	.word	0x100022d0

1a001abc <xTaskResumeAll>:
{
1a001abc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001abe:	4b33      	ldr	r3, [pc, #204]	; (1a001b8c <xTaskResumeAll+0xd0>)
1a001ac0:	681b      	ldr	r3, [r3, #0]
1a001ac2:	b943      	cbnz	r3, 1a001ad6 <xTaskResumeAll+0x1a>
1a001ac4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ac8:	f383 8811 	msr	BASEPRI, r3
1a001acc:	f3bf 8f6f 	isb	sy
1a001ad0:	f3bf 8f4f 	dsb	sy
1a001ad4:	e7fe      	b.n	1a001ad4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001ad6:	f000 fce5 	bl	1a0024a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001ada:	4b2c      	ldr	r3, [pc, #176]	; (1a001b8c <xTaskResumeAll+0xd0>)
1a001adc:	681a      	ldr	r2, [r3, #0]
1a001ade:	3a01      	subs	r2, #1
1a001ae0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001ae2:	681b      	ldr	r3, [r3, #0]
1a001ae4:	2b00      	cmp	r3, #0
1a001ae6:	d14d      	bne.n	1a001b84 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001ae8:	4b29      	ldr	r3, [pc, #164]	; (1a001b90 <xTaskResumeAll+0xd4>)
1a001aea:	681b      	ldr	r3, [r3, #0]
1a001aec:	b923      	cbnz	r3, 1a001af8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001aee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001af0:	f000 fcfa 	bl	1a0024e8 <vPortExitCritical>
}
1a001af4:	4620      	mov	r0, r4
1a001af6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001af8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001afa:	4b26      	ldr	r3, [pc, #152]	; (1a001b94 <xTaskResumeAll+0xd8>)
1a001afc:	681b      	ldr	r3, [r3, #0]
1a001afe:	b31b      	cbz	r3, 1a001b48 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001b00:	4b24      	ldr	r3, [pc, #144]	; (1a001b94 <xTaskResumeAll+0xd8>)
1a001b02:	68db      	ldr	r3, [r3, #12]
1a001b04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001b06:	f104 0018 	add.w	r0, r4, #24
1a001b0a:	f7ff fd0a 	bl	1a001522 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001b0e:	1d25      	adds	r5, r4, #4
1a001b10:	4628      	mov	r0, r5
1a001b12:	f7ff fd06 	bl	1a001522 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001b16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b18:	2201      	movs	r2, #1
1a001b1a:	409a      	lsls	r2, r3
1a001b1c:	491e      	ldr	r1, [pc, #120]	; (1a001b98 <xTaskResumeAll+0xdc>)
1a001b1e:	6808      	ldr	r0, [r1, #0]
1a001b20:	4302      	orrs	r2, r0
1a001b22:	600a      	str	r2, [r1, #0]
1a001b24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b28:	009a      	lsls	r2, r3, #2
1a001b2a:	4629      	mov	r1, r5
1a001b2c:	481b      	ldr	r0, [pc, #108]	; (1a001b9c <xTaskResumeAll+0xe0>)
1a001b2e:	4410      	add	r0, r2
1a001b30:	f7ff fcd1 	bl	1a0014d6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b36:	4b1a      	ldr	r3, [pc, #104]	; (1a001ba0 <xTaskResumeAll+0xe4>)
1a001b38:	681b      	ldr	r3, [r3, #0]
1a001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b3c:	429a      	cmp	r2, r3
1a001b3e:	d3dc      	bcc.n	1a001afa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001b40:	4b18      	ldr	r3, [pc, #96]	; (1a001ba4 <xTaskResumeAll+0xe8>)
1a001b42:	2201      	movs	r2, #1
1a001b44:	601a      	str	r2, [r3, #0]
1a001b46:	e7d8      	b.n	1a001afa <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001b48:	b10c      	cbz	r4, 1a001b4e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001b4a:	f7ff fd31 	bl	1a0015b0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001b4e:	4b16      	ldr	r3, [pc, #88]	; (1a001ba8 <xTaskResumeAll+0xec>)
1a001b50:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001b52:	b154      	cbz	r4, 1a001b6a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001b54:	f7ff ff26 	bl	1a0019a4 <xTaskIncrementTick>
1a001b58:	b110      	cbz	r0, 1a001b60 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001b5a:	4b12      	ldr	r3, [pc, #72]	; (1a001ba4 <xTaskResumeAll+0xe8>)
1a001b5c:	2201      	movs	r2, #1
1a001b5e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001b60:	3c01      	subs	r4, #1
1a001b62:	d1f7      	bne.n	1a001b54 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001b64:	4b10      	ldr	r3, [pc, #64]	; (1a001ba8 <xTaskResumeAll+0xec>)
1a001b66:	2200      	movs	r2, #0
1a001b68:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001b6a:	4b0e      	ldr	r3, [pc, #56]	; (1a001ba4 <xTaskResumeAll+0xe8>)
1a001b6c:	681b      	ldr	r3, [r3, #0]
1a001b6e:	b15b      	cbz	r3, 1a001b88 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001b70:	4b0e      	ldr	r3, [pc, #56]	; (1a001bac <xTaskResumeAll+0xf0>)
1a001b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001b76:	601a      	str	r2, [r3, #0]
1a001b78:	f3bf 8f4f 	dsb	sy
1a001b7c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001b80:	2401      	movs	r4, #1
1a001b82:	e7b5      	b.n	1a001af0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001b84:	2400      	movs	r4, #0
1a001b86:	e7b3      	b.n	1a001af0 <xTaskResumeAll+0x34>
1a001b88:	2400      	movs	r4, #0
1a001b8a:	e7b1      	b.n	1a001af0 <xTaskResumeAll+0x34>
1a001b8c:	1000224c 	.word	0x1000224c
1a001b90:	10002240 	.word	0x10002240
1a001b94:	1000228c 	.word	0x1000228c
1a001b98:	10002254 	.word	0x10002254
1a001b9c:	100021b4 	.word	0x100021b4
1a001ba0:	100021a8 	.word	0x100021a8
1a001ba4:	100022d0 	.word	0x100022d0
1a001ba8:	10002248 	.word	0x10002248
1a001bac:	e000ed04 	.word	0xe000ed04

1a001bb0 <vTaskDelayUntil>:
	{
1a001bb0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001bb2:	b150      	cbz	r0, 1a001bca <vTaskDelayUntil+0x1a>
1a001bb4:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001bb6:	b989      	cbnz	r1, 1a001bdc <vTaskDelayUntil+0x2c>
1a001bb8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bbc:	f383 8811 	msr	BASEPRI, r3
1a001bc0:	f3bf 8f6f 	isb	sy
1a001bc4:	f3bf 8f4f 	dsb	sy
1a001bc8:	e7fe      	b.n	1a001bc8 <vTaskDelayUntil+0x18>
1a001bca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bce:	f383 8811 	msr	BASEPRI, r3
1a001bd2:	f3bf 8f6f 	isb	sy
1a001bd6:	f3bf 8f4f 	dsb	sy
1a001bda:	e7fe      	b.n	1a001bda <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001bdc:	4b1a      	ldr	r3, [pc, #104]	; (1a001c48 <vTaskDelayUntil+0x98>)
1a001bde:	681b      	ldr	r3, [r3, #0]
1a001be0:	b143      	cbz	r3, 1a001bf4 <vTaskDelayUntil+0x44>
1a001be2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001be6:	f383 8811 	msr	BASEPRI, r3
1a001bea:	f3bf 8f6f 	isb	sy
1a001bee:	f3bf 8f4f 	dsb	sy
1a001bf2:	e7fe      	b.n	1a001bf2 <vTaskDelayUntil+0x42>
1a001bf4:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001bf6:	f7ff fec7 	bl	1a001988 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001bfa:	4b14      	ldr	r3, [pc, #80]	; (1a001c4c <vTaskDelayUntil+0x9c>)
1a001bfc:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001bfe:	682a      	ldr	r2, [r5, #0]
1a001c00:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001c02:	4282      	cmp	r2, r0
1a001c04:	d918      	bls.n	1a001c38 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001c06:	42a2      	cmp	r2, r4
1a001c08:	d80c      	bhi.n	1a001c24 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001c0a:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001c0c:	f7ff ff56 	bl	1a001abc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001c10:	b938      	cbnz	r0, 1a001c22 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a001c12:	4b0f      	ldr	r3, [pc, #60]	; (1a001c50 <vTaskDelayUntil+0xa0>)
1a001c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c18:	601a      	str	r2, [r3, #0]
1a001c1a:	f3bf 8f4f 	dsb	sy
1a001c1e:	f3bf 8f6f 	isb	sy
	}
1a001c22:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001c24:	42a0      	cmp	r0, r4
1a001c26:	d301      	bcc.n	1a001c2c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001c28:	602c      	str	r4, [r5, #0]
1a001c2a:	e7ef      	b.n	1a001c0c <vTaskDelayUntil+0x5c>
1a001c2c:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001c2e:	2100      	movs	r1, #0
1a001c30:	1a20      	subs	r0, r4, r0
1a001c32:	f7ff fde9 	bl	1a001808 <prvAddCurrentTaskToDelayedList>
1a001c36:	e7e9      	b.n	1a001c0c <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001c38:	42a2      	cmp	r2, r4
1a001c3a:	d801      	bhi.n	1a001c40 <vTaskDelayUntil+0x90>
1a001c3c:	42a0      	cmp	r0, r4
1a001c3e:	d201      	bcs.n	1a001c44 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001c40:	602c      	str	r4, [r5, #0]
1a001c42:	e7f4      	b.n	1a001c2e <vTaskDelayUntil+0x7e>
1a001c44:	602c      	str	r4, [r5, #0]
1a001c46:	e7e1      	b.n	1a001c0c <vTaskDelayUntil+0x5c>
1a001c48:	1000224c 	.word	0x1000224c
1a001c4c:	100022cc 	.word	0x100022cc
1a001c50:	e000ed04 	.word	0xe000ed04

1a001c54 <vTaskDelay>:
	{
1a001c54:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001c56:	b1a8      	cbz	r0, 1a001c84 <vTaskDelay+0x30>
1a001c58:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001c5a:	4b0f      	ldr	r3, [pc, #60]	; (1a001c98 <vTaskDelay+0x44>)
1a001c5c:	681b      	ldr	r3, [r3, #0]
1a001c5e:	b143      	cbz	r3, 1a001c72 <vTaskDelay+0x1e>
1a001c60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c64:	f383 8811 	msr	BASEPRI, r3
1a001c68:	f3bf 8f6f 	isb	sy
1a001c6c:	f3bf 8f4f 	dsb	sy
1a001c70:	e7fe      	b.n	1a001c70 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001c72:	f7ff fe89 	bl	1a001988 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001c76:	2100      	movs	r1, #0
1a001c78:	4620      	mov	r0, r4
1a001c7a:	f7ff fdc5 	bl	1a001808 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001c7e:	f7ff ff1d 	bl	1a001abc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001c82:	b938      	cbnz	r0, 1a001c94 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001c84:	4b05      	ldr	r3, [pc, #20]	; (1a001c9c <vTaskDelay+0x48>)
1a001c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c8a:	601a      	str	r2, [r3, #0]
1a001c8c:	f3bf 8f4f 	dsb	sy
1a001c90:	f3bf 8f6f 	isb	sy
	}
1a001c94:	bd10      	pop	{r4, pc}
1a001c96:	bf00      	nop
1a001c98:	1000224c 	.word	0x1000224c
1a001c9c:	e000ed04 	.word	0xe000ed04

1a001ca0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001ca0:	4b2c      	ldr	r3, [pc, #176]	; (1a001d54 <vTaskSwitchContext+0xb4>)
1a001ca2:	681b      	ldr	r3, [r3, #0]
1a001ca4:	b11b      	cbz	r3, 1a001cae <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001ca6:	4b2c      	ldr	r3, [pc, #176]	; (1a001d58 <vTaskSwitchContext+0xb8>)
1a001ca8:	2201      	movs	r2, #1
1a001caa:	601a      	str	r2, [r3, #0]
1a001cac:	4770      	bx	lr
{
1a001cae:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001cb0:	4b29      	ldr	r3, [pc, #164]	; (1a001d58 <vTaskSwitchContext+0xb8>)
1a001cb2:	2200      	movs	r2, #0
1a001cb4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001cb6:	4b29      	ldr	r3, [pc, #164]	; (1a001d5c <vTaskSwitchContext+0xbc>)
1a001cb8:	681b      	ldr	r3, [r3, #0]
1a001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001cbc:	681a      	ldr	r2, [r3, #0]
1a001cbe:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cc2:	d103      	bne.n	1a001ccc <vTaskSwitchContext+0x2c>
1a001cc4:	685a      	ldr	r2, [r3, #4]
1a001cc6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cca:	d01b      	beq.n	1a001d04 <vTaskSwitchContext+0x64>
1a001ccc:	4b23      	ldr	r3, [pc, #140]	; (1a001d5c <vTaskSwitchContext+0xbc>)
1a001cce:	6818      	ldr	r0, [r3, #0]
1a001cd0:	6819      	ldr	r1, [r3, #0]
1a001cd2:	3134      	adds	r1, #52	; 0x34
1a001cd4:	f7ff fc5e 	bl	1a001594 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001cd8:	4b21      	ldr	r3, [pc, #132]	; (1a001d60 <vTaskSwitchContext+0xc0>)
1a001cda:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001cdc:	fab3 f383 	clz	r3, r3
1a001ce0:	b2db      	uxtb	r3, r3
1a001ce2:	f1c3 031f 	rsb	r3, r3, #31
1a001ce6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001cea:	008a      	lsls	r2, r1, #2
1a001cec:	491d      	ldr	r1, [pc, #116]	; (1a001d64 <vTaskSwitchContext+0xc4>)
1a001cee:	588a      	ldr	r2, [r1, r2]
1a001cf0:	b98a      	cbnz	r2, 1a001d16 <vTaskSwitchContext+0x76>
	__asm volatile
1a001cf2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cf6:	f383 8811 	msr	BASEPRI, r3
1a001cfa:	f3bf 8f6f 	isb	sy
1a001cfe:	f3bf 8f4f 	dsb	sy
1a001d02:	e7fe      	b.n	1a001d02 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001d04:	689a      	ldr	r2, [r3, #8]
1a001d06:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001d0a:	d1df      	bne.n	1a001ccc <vTaskSwitchContext+0x2c>
1a001d0c:	68db      	ldr	r3, [r3, #12]
1a001d0e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001d12:	d1db      	bne.n	1a001ccc <vTaskSwitchContext+0x2c>
1a001d14:	e7e0      	b.n	1a001cd8 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001d16:	4813      	ldr	r0, [pc, #76]	; (1a001d64 <vTaskSwitchContext+0xc4>)
1a001d18:	009a      	lsls	r2, r3, #2
1a001d1a:	18d4      	adds	r4, r2, r3
1a001d1c:	00a1      	lsls	r1, r4, #2
1a001d1e:	4401      	add	r1, r0
1a001d20:	684c      	ldr	r4, [r1, #4]
1a001d22:	6864      	ldr	r4, [r4, #4]
1a001d24:	604c      	str	r4, [r1, #4]
1a001d26:	441a      	add	r2, r3
1a001d28:	0091      	lsls	r1, r2, #2
1a001d2a:	3108      	adds	r1, #8
1a001d2c:	4408      	add	r0, r1
1a001d2e:	4284      	cmp	r4, r0
1a001d30:	d009      	beq.n	1a001d46 <vTaskSwitchContext+0xa6>
1a001d32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d36:	009a      	lsls	r2, r3, #2
1a001d38:	4b0a      	ldr	r3, [pc, #40]	; (1a001d64 <vTaskSwitchContext+0xc4>)
1a001d3a:	4413      	add	r3, r2
1a001d3c:	685b      	ldr	r3, [r3, #4]
1a001d3e:	68da      	ldr	r2, [r3, #12]
1a001d40:	4b06      	ldr	r3, [pc, #24]	; (1a001d5c <vTaskSwitchContext+0xbc>)
1a001d42:	601a      	str	r2, [r3, #0]
}
1a001d44:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001d46:	6861      	ldr	r1, [r4, #4]
1a001d48:	4806      	ldr	r0, [pc, #24]	; (1a001d64 <vTaskSwitchContext+0xc4>)
1a001d4a:	2214      	movs	r2, #20
1a001d4c:	fb02 0203 	mla	r2, r2, r3, r0
1a001d50:	6051      	str	r1, [r2, #4]
1a001d52:	e7ee      	b.n	1a001d32 <vTaskSwitchContext+0x92>
1a001d54:	1000224c 	.word	0x1000224c
1a001d58:	100022d0 	.word	0x100022d0
1a001d5c:	100021a8 	.word	0x100021a8
1a001d60:	10002254 	.word	0x10002254
1a001d64:	100021b4 	.word	0x100021b4

1a001d68 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001d68:	b940      	cbnz	r0, 1a001d7c <vTaskPlaceOnEventList+0x14>
1a001d6a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d6e:	f383 8811 	msr	BASEPRI, r3
1a001d72:	f3bf 8f6f 	isb	sy
1a001d76:	f3bf 8f4f 	dsb	sy
1a001d7a:	e7fe      	b.n	1a001d7a <vTaskPlaceOnEventList+0x12>
{
1a001d7c:	b510      	push	{r4, lr}
1a001d7e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001d80:	4b04      	ldr	r3, [pc, #16]	; (1a001d94 <vTaskPlaceOnEventList+0x2c>)
1a001d82:	6819      	ldr	r1, [r3, #0]
1a001d84:	3118      	adds	r1, #24
1a001d86:	f7ff fbb2 	bl	1a0014ee <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001d8a:	2101      	movs	r1, #1
1a001d8c:	4620      	mov	r0, r4
1a001d8e:	f7ff fd3b 	bl	1a001808 <prvAddCurrentTaskToDelayedList>
}
1a001d92:	bd10      	pop	{r4, pc}
1a001d94:	100021a8 	.word	0x100021a8

1a001d98 <vTaskPlaceOnEventListRestricted>:
	{
1a001d98:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001d9a:	b940      	cbnz	r0, 1a001dae <vTaskPlaceOnEventListRestricted+0x16>
1a001d9c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001da0:	f383 8811 	msr	BASEPRI, r3
1a001da4:	f3bf 8f6f 	isb	sy
1a001da8:	f3bf 8f4f 	dsb	sy
1a001dac:	e7fe      	b.n	1a001dac <vTaskPlaceOnEventListRestricted+0x14>
1a001dae:	460c      	mov	r4, r1
1a001db0:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001db2:	4a06      	ldr	r2, [pc, #24]	; (1a001dcc <vTaskPlaceOnEventListRestricted+0x34>)
1a001db4:	6811      	ldr	r1, [r2, #0]
1a001db6:	3118      	adds	r1, #24
1a001db8:	f7ff fb8d 	bl	1a0014d6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a001dbc:	b10d      	cbz	r5, 1a001dc2 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a001dbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001dc2:	4629      	mov	r1, r5
1a001dc4:	4620      	mov	r0, r4
1a001dc6:	f7ff fd1f 	bl	1a001808 <prvAddCurrentTaskToDelayedList>
	}
1a001dca:	bd38      	pop	{r3, r4, r5, pc}
1a001dcc:	100021a8 	.word	0x100021a8

1a001dd0 <xTaskRemoveFromEventList>:
{
1a001dd0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001dd2:	68c3      	ldr	r3, [r0, #12]
1a001dd4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001dd6:	b944      	cbnz	r4, 1a001dea <xTaskRemoveFromEventList+0x1a>
1a001dd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ddc:	f383 8811 	msr	BASEPRI, r3
1a001de0:	f3bf 8f6f 	isb	sy
1a001de4:	f3bf 8f4f 	dsb	sy
1a001de8:	e7fe      	b.n	1a001de8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001dea:	f104 0518 	add.w	r5, r4, #24
1a001dee:	4628      	mov	r0, r5
1a001df0:	f7ff fb97 	bl	1a001522 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001df4:	4b13      	ldr	r3, [pc, #76]	; (1a001e44 <xTaskRemoveFromEventList+0x74>)
1a001df6:	681b      	ldr	r3, [r3, #0]
1a001df8:	b9e3      	cbnz	r3, 1a001e34 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001dfa:	1d25      	adds	r5, r4, #4
1a001dfc:	4628      	mov	r0, r5
1a001dfe:	f7ff fb90 	bl	1a001522 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001e02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e04:	2201      	movs	r2, #1
1a001e06:	409a      	lsls	r2, r3
1a001e08:	490f      	ldr	r1, [pc, #60]	; (1a001e48 <xTaskRemoveFromEventList+0x78>)
1a001e0a:	6808      	ldr	r0, [r1, #0]
1a001e0c:	4302      	orrs	r2, r0
1a001e0e:	600a      	str	r2, [r1, #0]
1a001e10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e14:	009a      	lsls	r2, r3, #2
1a001e16:	4629      	mov	r1, r5
1a001e18:	480c      	ldr	r0, [pc, #48]	; (1a001e4c <xTaskRemoveFromEventList+0x7c>)
1a001e1a:	4410      	add	r0, r2
1a001e1c:	f7ff fb5b 	bl	1a0014d6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001e20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e22:	4b0b      	ldr	r3, [pc, #44]	; (1a001e50 <xTaskRemoveFromEventList+0x80>)
1a001e24:	681b      	ldr	r3, [r3, #0]
1a001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e28:	429a      	cmp	r2, r3
1a001e2a:	d908      	bls.n	1a001e3e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a001e2c:	2001      	movs	r0, #1
1a001e2e:	4b09      	ldr	r3, [pc, #36]	; (1a001e54 <xTaskRemoveFromEventList+0x84>)
1a001e30:	6018      	str	r0, [r3, #0]
}
1a001e32:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001e34:	4629      	mov	r1, r5
1a001e36:	4808      	ldr	r0, [pc, #32]	; (1a001e58 <xTaskRemoveFromEventList+0x88>)
1a001e38:	f7ff fb4d 	bl	1a0014d6 <vListInsertEnd>
1a001e3c:	e7f0      	b.n	1a001e20 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a001e3e:	2000      	movs	r0, #0
	return xReturn;
1a001e40:	e7f7      	b.n	1a001e32 <xTaskRemoveFromEventList+0x62>
1a001e42:	bf00      	nop
1a001e44:	1000224c 	.word	0x1000224c
1a001e48:	10002254 	.word	0x10002254
1a001e4c:	100021b4 	.word	0x100021b4
1a001e50:	100021a8 	.word	0x100021a8
1a001e54:	100022d0 	.word	0x100022d0
1a001e58:	1000228c 	.word	0x1000228c

1a001e5c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001e5c:	4b03      	ldr	r3, [pc, #12]	; (1a001e6c <vTaskInternalSetTimeOutState+0x10>)
1a001e5e:	681b      	ldr	r3, [r3, #0]
1a001e60:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001e62:	4b03      	ldr	r3, [pc, #12]	; (1a001e70 <vTaskInternalSetTimeOutState+0x14>)
1a001e64:	681b      	ldr	r3, [r3, #0]
1a001e66:	6043      	str	r3, [r0, #4]
}
1a001e68:	4770      	bx	lr
1a001e6a:	bf00      	nop
1a001e6c:	10002288 	.word	0x10002288
1a001e70:	100022cc 	.word	0x100022cc

1a001e74 <xTaskCheckForTimeOut>:
{
1a001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001e76:	b150      	cbz	r0, 1a001e8e <xTaskCheckForTimeOut+0x1a>
1a001e78:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001e7a:	b989      	cbnz	r1, 1a001ea0 <xTaskCheckForTimeOut+0x2c>
1a001e7c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e80:	f383 8811 	msr	BASEPRI, r3
1a001e84:	f3bf 8f6f 	isb	sy
1a001e88:	f3bf 8f4f 	dsb	sy
1a001e8c:	e7fe      	b.n	1a001e8c <xTaskCheckForTimeOut+0x18>
1a001e8e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e92:	f383 8811 	msr	BASEPRI, r3
1a001e96:	f3bf 8f6f 	isb	sy
1a001e9a:	f3bf 8f4f 	dsb	sy
1a001e9e:	e7fe      	b.n	1a001e9e <xTaskCheckForTimeOut+0x2a>
1a001ea0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a001ea2:	f000 faff 	bl	1a0024a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001ea6:	4b11      	ldr	r3, [pc, #68]	; (1a001eec <xTaskCheckForTimeOut+0x78>)
1a001ea8:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001eaa:	6868      	ldr	r0, [r5, #4]
1a001eac:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a001eae:	6823      	ldr	r3, [r4, #0]
1a001eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001eb4:	d016      	beq.n	1a001ee4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001eb6:	682f      	ldr	r7, [r5, #0]
1a001eb8:	4e0d      	ldr	r6, [pc, #52]	; (1a001ef0 <xTaskCheckForTimeOut+0x7c>)
1a001eba:	6836      	ldr	r6, [r6, #0]
1a001ebc:	42b7      	cmp	r7, r6
1a001ebe:	d001      	beq.n	1a001ec4 <xTaskCheckForTimeOut+0x50>
1a001ec0:	4288      	cmp	r0, r1
1a001ec2:	d911      	bls.n	1a001ee8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001ec4:	4293      	cmp	r3, r2
1a001ec6:	d803      	bhi.n	1a001ed0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001ec8:	2300      	movs	r3, #0
1a001eca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001ecc:	2401      	movs	r4, #1
1a001ece:	e005      	b.n	1a001edc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a001ed0:	1a9b      	subs	r3, r3, r2
1a001ed2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001ed4:	4628      	mov	r0, r5
1a001ed6:	f7ff ffc1 	bl	1a001e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001eda:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001edc:	f000 fb04 	bl	1a0024e8 <vPortExitCritical>
}
1a001ee0:	4620      	mov	r0, r4
1a001ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a001ee4:	2400      	movs	r4, #0
1a001ee6:	e7f9      	b.n	1a001edc <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a001ee8:	2401      	movs	r4, #1
1a001eea:	e7f7      	b.n	1a001edc <xTaskCheckForTimeOut+0x68>
1a001eec:	100022cc 	.word	0x100022cc
1a001ef0:	10002288 	.word	0x10002288

1a001ef4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001ef4:	4b01      	ldr	r3, [pc, #4]	; (1a001efc <vTaskMissedYield+0x8>)
1a001ef6:	2201      	movs	r2, #1
1a001ef8:	601a      	str	r2, [r3, #0]
}
1a001efa:	4770      	bx	lr
1a001efc:	100022d0 	.word	0x100022d0

1a001f00 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001f00:	4b05      	ldr	r3, [pc, #20]	; (1a001f18 <xTaskGetSchedulerState+0x18>)
1a001f02:	681b      	ldr	r3, [r3, #0]
1a001f04:	b133      	cbz	r3, 1a001f14 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001f06:	4b05      	ldr	r3, [pc, #20]	; (1a001f1c <xTaskGetSchedulerState+0x1c>)
1a001f08:	681b      	ldr	r3, [r3, #0]
1a001f0a:	b10b      	cbz	r3, 1a001f10 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001f0c:	2000      	movs	r0, #0
	}
1a001f0e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001f10:	2002      	movs	r0, #2
1a001f12:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001f14:	2001      	movs	r0, #1
1a001f16:	4770      	bx	lr
1a001f18:	100022a0 	.word	0x100022a0
1a001f1c:	1000224c 	.word	0x1000224c

1a001f20 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001f20:	2800      	cmp	r0, #0
1a001f22:	d049      	beq.n	1a001fb8 <xTaskPriorityDisinherit+0x98>
	{
1a001f24:	b538      	push	{r3, r4, r5, lr}
1a001f26:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001f28:	4a26      	ldr	r2, [pc, #152]	; (1a001fc4 <xTaskPriorityDisinherit+0xa4>)
1a001f2a:	6812      	ldr	r2, [r2, #0]
1a001f2c:	4282      	cmp	r2, r0
1a001f2e:	d008      	beq.n	1a001f42 <xTaskPriorityDisinherit+0x22>
1a001f30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f34:	f383 8811 	msr	BASEPRI, r3
1a001f38:	f3bf 8f6f 	isb	sy
1a001f3c:	f3bf 8f4f 	dsb	sy
1a001f40:	e7fe      	b.n	1a001f40 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001f42:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001f44:	b942      	cbnz	r2, 1a001f58 <xTaskPriorityDisinherit+0x38>
1a001f46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f4a:	f383 8811 	msr	BASEPRI, r3
1a001f4e:	f3bf 8f6f 	isb	sy
1a001f52:	f3bf 8f4f 	dsb	sy
1a001f56:	e7fe      	b.n	1a001f56 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001f58:	3a01      	subs	r2, #1
1a001f5a:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001f5c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001f5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a001f60:	4288      	cmp	r0, r1
1a001f62:	d02b      	beq.n	1a001fbc <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001f64:	bb62      	cbnz	r2, 1a001fc0 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f66:	1d25      	adds	r5, r4, #4
1a001f68:	4628      	mov	r0, r5
1a001f6a:	f7ff fada 	bl	1a001522 <uxListRemove>
1a001f6e:	b970      	cbnz	r0, 1a001f8e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001f70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f72:	2314      	movs	r3, #20
1a001f74:	fb03 f302 	mul.w	r3, r3, r2
1a001f78:	4913      	ldr	r1, [pc, #76]	; (1a001fc8 <xTaskPriorityDisinherit+0xa8>)
1a001f7a:	58cb      	ldr	r3, [r1, r3]
1a001f7c:	b93b      	cbnz	r3, 1a001f8e <xTaskPriorityDisinherit+0x6e>
1a001f7e:	2301      	movs	r3, #1
1a001f80:	fa03 f202 	lsl.w	r2, r3, r2
1a001f84:	4911      	ldr	r1, [pc, #68]	; (1a001fcc <xTaskPriorityDisinherit+0xac>)
1a001f86:	680b      	ldr	r3, [r1, #0]
1a001f88:	ea23 0302 	bic.w	r3, r3, r2
1a001f8c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001f8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a001f90:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f92:	f1c3 0207 	rsb	r2, r3, #7
1a001f96:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001f98:	2401      	movs	r4, #1
1a001f9a:	fa04 f203 	lsl.w	r2, r4, r3
1a001f9e:	490b      	ldr	r1, [pc, #44]	; (1a001fcc <xTaskPriorityDisinherit+0xac>)
1a001fa0:	6808      	ldr	r0, [r1, #0]
1a001fa2:	4302      	orrs	r2, r0
1a001fa4:	600a      	str	r2, [r1, #0]
1a001fa6:	4629      	mov	r1, r5
1a001fa8:	4a07      	ldr	r2, [pc, #28]	; (1a001fc8 <xTaskPriorityDisinherit+0xa8>)
1a001faa:	2014      	movs	r0, #20
1a001fac:	fb00 2003 	mla	r0, r0, r3, r2
1a001fb0:	f7ff fa91 	bl	1a0014d6 <vListInsertEnd>
					xReturn = pdTRUE;
1a001fb4:	4620      	mov	r0, r4
	}
1a001fb6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a001fb8:	2000      	movs	r0, #0
	}
1a001fba:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001fbc:	2000      	movs	r0, #0
1a001fbe:	e7fa      	b.n	1a001fb6 <xTaskPriorityDisinherit+0x96>
1a001fc0:	2000      	movs	r0, #0
		return xReturn;
1a001fc2:	e7f8      	b.n	1a001fb6 <xTaskPriorityDisinherit+0x96>
1a001fc4:	100021a8 	.word	0x100021a8
1a001fc8:	100021b4 	.word	0x100021b4
1a001fcc:	10002254 	.word	0x10002254

1a001fd0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001fd0:	4b06      	ldr	r3, [pc, #24]	; (1a001fec <prvGetNextExpireTime+0x1c>)
1a001fd2:	681a      	ldr	r2, [r3, #0]
1a001fd4:	6813      	ldr	r3, [r2, #0]
1a001fd6:	fab3 f383 	clz	r3, r3
1a001fda:	095b      	lsrs	r3, r3, #5
1a001fdc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001fde:	b913      	cbnz	r3, 1a001fe6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001fe0:	68d3      	ldr	r3, [r2, #12]
1a001fe2:	6818      	ldr	r0, [r3, #0]
1a001fe4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001fe6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001fe8:	4770      	bx	lr
1a001fea:	bf00      	nop
1a001fec:	100022d4 	.word	0x100022d4

1a001ff0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001ff0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001ff2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001ff4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001ff6:	4291      	cmp	r1, r2
1a001ff8:	d80c      	bhi.n	1a002014 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001ffa:	1ad2      	subs	r2, r2, r3
1a001ffc:	6983      	ldr	r3, [r0, #24]
1a001ffe:	429a      	cmp	r2, r3
1a002000:	d301      	bcc.n	1a002006 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002002:	2001      	movs	r0, #1
1a002004:	e010      	b.n	1a002028 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002006:	1d01      	adds	r1, r0, #4
1a002008:	4b09      	ldr	r3, [pc, #36]	; (1a002030 <prvInsertTimerInActiveList+0x40>)
1a00200a:	6818      	ldr	r0, [r3, #0]
1a00200c:	f7ff fa6f 	bl	1a0014ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002010:	2000      	movs	r0, #0
1a002012:	e009      	b.n	1a002028 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002014:	429a      	cmp	r2, r3
1a002016:	d201      	bcs.n	1a00201c <prvInsertTimerInActiveList+0x2c>
1a002018:	4299      	cmp	r1, r3
1a00201a:	d206      	bcs.n	1a00202a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00201c:	1d01      	adds	r1, r0, #4
1a00201e:	4b05      	ldr	r3, [pc, #20]	; (1a002034 <prvInsertTimerInActiveList+0x44>)
1a002020:	6818      	ldr	r0, [r3, #0]
1a002022:	f7ff fa64 	bl	1a0014ee <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002026:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002028:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00202a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a00202c:	e7fc      	b.n	1a002028 <prvInsertTimerInActiveList+0x38>
1a00202e:	bf00      	nop
1a002030:	100022d8 	.word	0x100022d8
1a002034:	100022d4 	.word	0x100022d4

1a002038 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002038:	b538      	push	{r3, r4, r5, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a00203a:	f000 fa33 	bl	1a0024a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a00203e:	4b0f      	ldr	r3, [pc, #60]	; (1a00207c <prvCheckForValidListAndQueue+0x44>)
1a002040:	681b      	ldr	r3, [r3, #0]
1a002042:	b113      	cbz	r3, 1a00204a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002044:	f000 fa50 	bl	1a0024e8 <vPortExitCritical>
}
1a002048:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00204a:	4d0d      	ldr	r5, [pc, #52]	; (1a002080 <prvCheckForValidListAndQueue+0x48>)
1a00204c:	4628      	mov	r0, r5
1a00204e:	f7ff fa34 	bl	1a0014ba <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002052:	4c0c      	ldr	r4, [pc, #48]	; (1a002084 <prvCheckForValidListAndQueue+0x4c>)
1a002054:	4620      	mov	r0, r4
1a002056:	f7ff fa30 	bl	1a0014ba <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00205a:	4b0b      	ldr	r3, [pc, #44]	; (1a002088 <prvCheckForValidListAndQueue+0x50>)
1a00205c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a00205e:	4b0b      	ldr	r3, [pc, #44]	; (1a00208c <prvCheckForValidListAndQueue+0x54>)
1a002060:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
1a002062:	2200      	movs	r2, #0
1a002064:	2110      	movs	r1, #16
1a002066:	200a      	movs	r0, #10
1a002068:	f7fe fff5 	bl	1a001056 <xQueueGenericCreate>
1a00206c:	4b03      	ldr	r3, [pc, #12]	; (1a00207c <prvCheckForValidListAndQueue+0x44>)
1a00206e:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002070:	2800      	cmp	r0, #0
1a002072:	d0e7      	beq.n	1a002044 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a002074:	4906      	ldr	r1, [pc, #24]	; (1a002090 <prvCheckForValidListAndQueue+0x58>)
1a002076:	f7ff f9e3 	bl	1a001440 <vQueueAddToRegistry>
1a00207a:	e7e3      	b.n	1a002044 <prvCheckForValidListAndQueue+0xc>
1a00207c:	10002308 	.word	0x10002308
1a002080:	100022dc 	.word	0x100022dc
1a002084:	100022f0 	.word	0x100022f0
1a002088:	100022d4 	.word	0x100022d4
1a00208c:	100022d8 	.word	0x100022d8
1a002090:	1a004cc4 	.word	0x1a004cc4

1a002094 <xTimerCreateTimerTask>:
{
1a002094:	b500      	push	{lr}
1a002096:	b083      	sub	sp, #12
	prvCheckForValidListAndQueue();
1a002098:	f7ff ffce 	bl	1a002038 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a00209c:	4b0d      	ldr	r3, [pc, #52]	; (1a0020d4 <xTimerCreateTimerTask+0x40>)
1a00209e:	681b      	ldr	r3, [r3, #0]
1a0020a0:	b15b      	cbz	r3, 1a0020ba <xTimerCreateTimerTask+0x26>
			xReturn = xTaskCreate(	prvTimerTask,
1a0020a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0020d8 <xTimerCreateTimerTask+0x44>)
1a0020a4:	9301      	str	r3, [sp, #4]
1a0020a6:	2304      	movs	r3, #4
1a0020a8:	9300      	str	r3, [sp, #0]
1a0020aa:	2300      	movs	r3, #0
1a0020ac:	f44f 72b4 	mov.w	r2, #360	; 0x168
1a0020b0:	490a      	ldr	r1, [pc, #40]	; (1a0020dc <xTimerCreateTimerTask+0x48>)
1a0020b2:	480b      	ldr	r0, [pc, #44]	; (1a0020e0 <xTimerCreateTimerTask+0x4c>)
1a0020b4:	f7ff fbf4 	bl	1a0018a0 <xTaskCreate>
	configASSERT( xReturn );
1a0020b8:	b940      	cbnz	r0, 1a0020cc <xTimerCreateTimerTask+0x38>
1a0020ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020be:	f383 8811 	msr	BASEPRI, r3
1a0020c2:	f3bf 8f6f 	isb	sy
1a0020c6:	f3bf 8f4f 	dsb	sy
1a0020ca:	e7fe      	b.n	1a0020ca <xTimerCreateTimerTask+0x36>
}
1a0020cc:	b003      	add	sp, #12
1a0020ce:	f85d fb04 	ldr.w	pc, [sp], #4
1a0020d2:	bf00      	nop
1a0020d4:	10002308 	.word	0x10002308
1a0020d8:	1000230c 	.word	0x1000230c
1a0020dc:	1a004ccc 	.word	0x1a004ccc
1a0020e0:	1a0023bd 	.word	0x1a0023bd

1a0020e4 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a0020e4:	b1c8      	cbz	r0, 1a00211a <xTimerGenericCommand+0x36>
{
1a0020e6:	b530      	push	{r4, r5, lr}
1a0020e8:	b085      	sub	sp, #20
1a0020ea:	4615      	mov	r5, r2
1a0020ec:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0020ee:	4a17      	ldr	r2, [pc, #92]	; (1a00214c <xTimerGenericCommand+0x68>)
1a0020f0:	6810      	ldr	r0, [r2, #0]
1a0020f2:	b340      	cbz	r0, 1a002146 <xTimerGenericCommand+0x62>
1a0020f4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0020f6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0020f8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0020fa:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0020fc:	2905      	cmp	r1, #5
1a0020fe:	dc1d      	bgt.n	1a00213c <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a002100:	f7ff fefe 	bl	1a001f00 <xTaskGetSchedulerState>
1a002104:	2802      	cmp	r0, #2
1a002106:	d011      	beq.n	1a00212c <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002108:	2300      	movs	r3, #0
1a00210a:	461a      	mov	r2, r3
1a00210c:	4669      	mov	r1, sp
1a00210e:	480f      	ldr	r0, [pc, #60]	; (1a00214c <xTimerGenericCommand+0x68>)
1a002110:	6800      	ldr	r0, [r0, #0]
1a002112:	f7fe ffc5 	bl	1a0010a0 <xQueueGenericSend>
}
1a002116:	b005      	add	sp, #20
1a002118:	bd30      	pop	{r4, r5, pc}
1a00211a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00211e:	f383 8811 	msr	BASEPRI, r3
1a002122:	f3bf 8f6f 	isb	sy
1a002126:	f3bf 8f4f 	dsb	sy
1a00212a:	e7fe      	b.n	1a00212a <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a00212c:	2300      	movs	r3, #0
1a00212e:	9a08      	ldr	r2, [sp, #32]
1a002130:	4669      	mov	r1, sp
1a002132:	4806      	ldr	r0, [pc, #24]	; (1a00214c <xTimerGenericCommand+0x68>)
1a002134:	6800      	ldr	r0, [r0, #0]
1a002136:	f7fe ffb3 	bl	1a0010a0 <xQueueGenericSend>
1a00213a:	e7ec      	b.n	1a002116 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a00213c:	2300      	movs	r3, #0
1a00213e:	4669      	mov	r1, sp
1a002140:	f7ff f86c 	bl	1a00121c <xQueueGenericSendFromISR>
1a002144:	e7e7      	b.n	1a002116 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a002146:	2000      	movs	r0, #0
	return xReturn;
1a002148:	e7e5      	b.n	1a002116 <xTimerGenericCommand+0x32>
1a00214a:	bf00      	nop
1a00214c:	10002308 	.word	0x10002308

1a002150 <prvSwitchTimerLists>:
{
1a002150:	b570      	push	{r4, r5, r6, lr}
1a002152:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002154:	4b1a      	ldr	r3, [pc, #104]	; (1a0021c0 <prvSwitchTimerLists+0x70>)
1a002156:	681b      	ldr	r3, [r3, #0]
1a002158:	681a      	ldr	r2, [r3, #0]
1a00215a:	b352      	cbz	r2, 1a0021b2 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00215c:	68db      	ldr	r3, [r3, #12]
1a00215e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002160:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002162:	1d25      	adds	r5, r4, #4
1a002164:	4628      	mov	r0, r5
1a002166:	f7ff f9dc 	bl	1a001522 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00216a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00216c:	4620      	mov	r0, r4
1a00216e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002170:	69e3      	ldr	r3, [r4, #28]
1a002172:	2b01      	cmp	r3, #1
1a002174:	d1ee      	bne.n	1a002154 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a002176:	69a3      	ldr	r3, [r4, #24]
1a002178:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00217a:	429e      	cmp	r6, r3
1a00217c:	d207      	bcs.n	1a00218e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a00217e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002180:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002182:	4629      	mov	r1, r5
1a002184:	4b0e      	ldr	r3, [pc, #56]	; (1a0021c0 <prvSwitchTimerLists+0x70>)
1a002186:	6818      	ldr	r0, [r3, #0]
1a002188:	f7ff f9b1 	bl	1a0014ee <vListInsert>
1a00218c:	e7e2      	b.n	1a002154 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00218e:	2100      	movs	r1, #0
1a002190:	9100      	str	r1, [sp, #0]
1a002192:	460b      	mov	r3, r1
1a002194:	4632      	mov	r2, r6
1a002196:	4620      	mov	r0, r4
1a002198:	f7ff ffa4 	bl	1a0020e4 <xTimerGenericCommand>
				configASSERT( xResult );
1a00219c:	2800      	cmp	r0, #0
1a00219e:	d1d9      	bne.n	1a002154 <prvSwitchTimerLists+0x4>
1a0021a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021a4:	f383 8811 	msr	BASEPRI, r3
1a0021a8:	f3bf 8f6f 	isb	sy
1a0021ac:	f3bf 8f4f 	dsb	sy
1a0021b0:	e7fe      	b.n	1a0021b0 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a0021b2:	4a04      	ldr	r2, [pc, #16]	; (1a0021c4 <prvSwitchTimerLists+0x74>)
1a0021b4:	6810      	ldr	r0, [r2, #0]
1a0021b6:	4902      	ldr	r1, [pc, #8]	; (1a0021c0 <prvSwitchTimerLists+0x70>)
1a0021b8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0021ba:	6013      	str	r3, [r2, #0]
}
1a0021bc:	b002      	add	sp, #8
1a0021be:	bd70      	pop	{r4, r5, r6, pc}
1a0021c0:	100022d4 	.word	0x100022d4
1a0021c4:	100022d8 	.word	0x100022d8

1a0021c8 <prvSampleTimeNow>:
{
1a0021c8:	b538      	push	{r3, r4, r5, lr}
1a0021ca:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a0021cc:	f7ff fbe4 	bl	1a001998 <xTaskGetTickCount>
1a0021d0:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a0021d2:	4b07      	ldr	r3, [pc, #28]	; (1a0021f0 <prvSampleTimeNow+0x28>)
1a0021d4:	681b      	ldr	r3, [r3, #0]
1a0021d6:	4283      	cmp	r3, r0
1a0021d8:	d805      	bhi.n	1a0021e6 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a0021da:	2300      	movs	r3, #0
1a0021dc:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a0021de:	4b04      	ldr	r3, [pc, #16]	; (1a0021f0 <prvSampleTimeNow+0x28>)
1a0021e0:	601c      	str	r4, [r3, #0]
}
1a0021e2:	4620      	mov	r0, r4
1a0021e4:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a0021e6:	f7ff ffb3 	bl	1a002150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0021ea:	2301      	movs	r3, #1
1a0021ec:	602b      	str	r3, [r5, #0]
1a0021ee:	e7f6      	b.n	1a0021de <prvSampleTimeNow+0x16>
1a0021f0:	10002304 	.word	0x10002304

1a0021f4 <prvProcessExpiredTimer>:
{
1a0021f4:	b570      	push	{r4, r5, r6, lr}
1a0021f6:	b082      	sub	sp, #8
1a0021f8:	4605      	mov	r5, r0
1a0021fa:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0021fc:	4b14      	ldr	r3, [pc, #80]	; (1a002250 <prvProcessExpiredTimer+0x5c>)
1a0021fe:	681b      	ldr	r3, [r3, #0]
1a002200:	68db      	ldr	r3, [r3, #12]
1a002202:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002204:	1d20      	adds	r0, r4, #4
1a002206:	f7ff f98c 	bl	1a001522 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00220a:	69e3      	ldr	r3, [r4, #28]
1a00220c:	2b01      	cmp	r3, #1
1a00220e:	d004      	beq.n	1a00221a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002210:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002212:	4620      	mov	r0, r4
1a002214:	4798      	blx	r3
}
1a002216:	b002      	add	sp, #8
1a002218:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a00221a:	69a1      	ldr	r1, [r4, #24]
1a00221c:	462b      	mov	r3, r5
1a00221e:	4632      	mov	r2, r6
1a002220:	4429      	add	r1, r5
1a002222:	4620      	mov	r0, r4
1a002224:	f7ff fee4 	bl	1a001ff0 <prvInsertTimerInActiveList>
1a002228:	2800      	cmp	r0, #0
1a00222a:	d0f1      	beq.n	1a002210 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a00222c:	2100      	movs	r1, #0
1a00222e:	9100      	str	r1, [sp, #0]
1a002230:	460b      	mov	r3, r1
1a002232:	462a      	mov	r2, r5
1a002234:	4620      	mov	r0, r4
1a002236:	f7ff ff55 	bl	1a0020e4 <xTimerGenericCommand>
			configASSERT( xResult );
1a00223a:	2800      	cmp	r0, #0
1a00223c:	d1e8      	bne.n	1a002210 <prvProcessExpiredTimer+0x1c>
1a00223e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002242:	f383 8811 	msr	BASEPRI, r3
1a002246:	f3bf 8f6f 	isb	sy
1a00224a:	f3bf 8f4f 	dsb	sy
1a00224e:	e7fe      	b.n	1a00224e <prvProcessExpiredTimer+0x5a>
1a002250:	100022d4 	.word	0x100022d4

1a002254 <prvProcessTimerOrBlockTask>:
{
1a002254:	b570      	push	{r4, r5, r6, lr}
1a002256:	b082      	sub	sp, #8
1a002258:	4606      	mov	r6, r0
1a00225a:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a00225c:	f7ff fb94 	bl	1a001988 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002260:	a801      	add	r0, sp, #4
1a002262:	f7ff ffb1 	bl	1a0021c8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002266:	9b01      	ldr	r3, [sp, #4]
1a002268:	bb1b      	cbnz	r3, 1a0022b2 <prvProcessTimerOrBlockTask+0x5e>
1a00226a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a00226c:	b90c      	cbnz	r4, 1a002272 <prvProcessTimerOrBlockTask+0x1e>
1a00226e:	42b0      	cmp	r0, r6
1a002270:	d218      	bcs.n	1a0022a4 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002272:	b12c      	cbz	r4, 1a002280 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002274:	4b11      	ldr	r3, [pc, #68]	; (1a0022bc <prvProcessTimerOrBlockTask+0x68>)
1a002276:	681b      	ldr	r3, [r3, #0]
1a002278:	681c      	ldr	r4, [r3, #0]
1a00227a:	fab4 f484 	clz	r4, r4
1a00227e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002280:	4622      	mov	r2, r4
1a002282:	1b71      	subs	r1, r6, r5
1a002284:	4b0e      	ldr	r3, [pc, #56]	; (1a0022c0 <prvProcessTimerOrBlockTask+0x6c>)
1a002286:	6818      	ldr	r0, [r3, #0]
1a002288:	f7ff f8ee 	bl	1a001468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00228c:	f7ff fc16 	bl	1a001abc <xTaskResumeAll>
1a002290:	b988      	cbnz	r0, 1a0022b6 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002292:	4b0c      	ldr	r3, [pc, #48]	; (1a0022c4 <prvProcessTimerOrBlockTask+0x70>)
1a002294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002298:	601a      	str	r2, [r3, #0]
1a00229a:	f3bf 8f4f 	dsb	sy
1a00229e:	f3bf 8f6f 	isb	sy
1a0022a2:	e008      	b.n	1a0022b6 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a0022a4:	f7ff fc0a 	bl	1a001abc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a0022a8:	4629      	mov	r1, r5
1a0022aa:	4630      	mov	r0, r6
1a0022ac:	f7ff ffa2 	bl	1a0021f4 <prvProcessExpiredTimer>
1a0022b0:	e001      	b.n	1a0022b6 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a0022b2:	f7ff fc03 	bl	1a001abc <xTaskResumeAll>
}
1a0022b6:	b002      	add	sp, #8
1a0022b8:	bd70      	pop	{r4, r5, r6, pc}
1a0022ba:	bf00      	nop
1a0022bc:	100022d8 	.word	0x100022d8
1a0022c0:	10002308 	.word	0x10002308
1a0022c4:	e000ed04 	.word	0xe000ed04

1a0022c8 <prvProcessReceivedCommands>:
{
1a0022c8:	b530      	push	{r4, r5, lr}
1a0022ca:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0022cc:	e002      	b.n	1a0022d4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0022ce:	9b04      	ldr	r3, [sp, #16]
1a0022d0:	2b00      	cmp	r3, #0
1a0022d2:	da0f      	bge.n	1a0022f4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0022d4:	2200      	movs	r2, #0
1a0022d6:	a904      	add	r1, sp, #16
1a0022d8:	4b37      	ldr	r3, [pc, #220]	; (1a0023b8 <prvProcessReceivedCommands+0xf0>)
1a0022da:	6818      	ldr	r0, [r3, #0]
1a0022dc:	f7ff f804 	bl	1a0012e8 <xQueueReceive>
1a0022e0:	2800      	cmp	r0, #0
1a0022e2:	d066      	beq.n	1a0023b2 <prvProcessReceivedCommands+0xea>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0022e4:	9b04      	ldr	r3, [sp, #16]
1a0022e6:	2b00      	cmp	r3, #0
1a0022e8:	daf1      	bge.n	1a0022ce <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0022ea:	9907      	ldr	r1, [sp, #28]
1a0022ec:	9806      	ldr	r0, [sp, #24]
1a0022ee:	9b05      	ldr	r3, [sp, #20]
1a0022f0:	4798      	blx	r3
1a0022f2:	e7ec      	b.n	1a0022ce <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0022f4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0022f6:	6963      	ldr	r3, [r4, #20]
1a0022f8:	b113      	cbz	r3, 1a002300 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0022fa:	1d20      	adds	r0, r4, #4
1a0022fc:	f7ff f911 	bl	1a001522 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002300:	a803      	add	r0, sp, #12
1a002302:	f7ff ff61 	bl	1a0021c8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002306:	9b04      	ldr	r3, [sp, #16]
1a002308:	2b09      	cmp	r3, #9
1a00230a:	d8e3      	bhi.n	1a0022d4 <prvProcessReceivedCommands+0xc>
1a00230c:	a201      	add	r2, pc, #4	; (adr r2, 1a002314 <prvProcessReceivedCommands+0x4c>)
1a00230e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002312:	bf00      	nop
1a002314:	1a00233d 	.word	0x1a00233d
1a002318:	1a00233d 	.word	0x1a00233d
1a00231c:	1a00233d 	.word	0x1a00233d
1a002320:	1a0022d5 	.word	0x1a0022d5
1a002324:	1a002385 	.word	0x1a002385
1a002328:	1a0023ab 	.word	0x1a0023ab
1a00232c:	1a00233d 	.word	0x1a00233d
1a002330:	1a00233d 	.word	0x1a00233d
1a002334:	1a0022d5 	.word	0x1a0022d5
1a002338:	1a002385 	.word	0x1a002385
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a00233c:	9905      	ldr	r1, [sp, #20]
1a00233e:	69a5      	ldr	r5, [r4, #24]
1a002340:	460b      	mov	r3, r1
1a002342:	4602      	mov	r2, r0
1a002344:	4429      	add	r1, r5
1a002346:	4620      	mov	r0, r4
1a002348:	f7ff fe52 	bl	1a001ff0 <prvInsertTimerInActiveList>
1a00234c:	2800      	cmp	r0, #0
1a00234e:	d0c1      	beq.n	1a0022d4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002350:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002352:	4620      	mov	r0, r4
1a002354:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002356:	69e3      	ldr	r3, [r4, #28]
1a002358:	2b01      	cmp	r3, #1
1a00235a:	d1bb      	bne.n	1a0022d4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a00235c:	69a2      	ldr	r2, [r4, #24]
1a00235e:	2100      	movs	r1, #0
1a002360:	9100      	str	r1, [sp, #0]
1a002362:	460b      	mov	r3, r1
1a002364:	9805      	ldr	r0, [sp, #20]
1a002366:	4402      	add	r2, r0
1a002368:	4620      	mov	r0, r4
1a00236a:	f7ff febb 	bl	1a0020e4 <xTimerGenericCommand>
							configASSERT( xResult );
1a00236e:	2800      	cmp	r0, #0
1a002370:	d1b0      	bne.n	1a0022d4 <prvProcessReceivedCommands+0xc>
1a002372:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002376:	f383 8811 	msr	BASEPRI, r3
1a00237a:	f3bf 8f6f 	isb	sy
1a00237e:	f3bf 8f4f 	dsb	sy
1a002382:	e7fe      	b.n	1a002382 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002384:	9905      	ldr	r1, [sp, #20]
1a002386:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002388:	b131      	cbz	r1, 1a002398 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00238a:	4603      	mov	r3, r0
1a00238c:	4602      	mov	r2, r0
1a00238e:	4401      	add	r1, r0
1a002390:	4620      	mov	r0, r4
1a002392:	f7ff fe2d 	bl	1a001ff0 <prvInsertTimerInActiveList>
					break;
1a002396:	e79d      	b.n	1a0022d4 <prvProcessReceivedCommands+0xc>
1a002398:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00239c:	f383 8811 	msr	BASEPRI, r3
1a0023a0:	f3bf 8f6f 	isb	sy
1a0023a4:	f3bf 8f4f 	dsb	sy
1a0023a8:	e7fe      	b.n	1a0023a8 <prvProcessReceivedCommands+0xe0>
						vPortFree( pxTimer );
1a0023aa:	4620      	mov	r0, r4
1a0023ac:	f7fe fd28 	bl	1a000e00 <vPortFree>
					break;
1a0023b0:	e790      	b.n	1a0022d4 <prvProcessReceivedCommands+0xc>
}
1a0023b2:	b009      	add	sp, #36	; 0x24
1a0023b4:	bd30      	pop	{r4, r5, pc}
1a0023b6:	bf00      	nop
1a0023b8:	10002308 	.word	0x10002308

1a0023bc <prvTimerTask>:
{
1a0023bc:	b500      	push	{lr}
1a0023be:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a0023c0:	a801      	add	r0, sp, #4
1a0023c2:	f7ff fe05 	bl	1a001fd0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a0023c6:	9901      	ldr	r1, [sp, #4]
1a0023c8:	f7ff ff44 	bl	1a002254 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a0023cc:	f7ff ff7c 	bl	1a0022c8 <prvProcessReceivedCommands>
1a0023d0:	e7f6      	b.n	1a0023c0 <prvTimerTask+0x4>
1a0023d2:	Address 0x000000001a0023d2 is out of bounds.


1a0023d4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a0023d4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a0023d6:	2300      	movs	r3, #0
1a0023d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0023da:	4b0d      	ldr	r3, [pc, #52]	; (1a002410 <prvTaskExitError+0x3c>)
1a0023dc:	681b      	ldr	r3, [r3, #0]
1a0023de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0023e2:	d008      	beq.n	1a0023f6 <prvTaskExitError+0x22>
1a0023e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023e8:	f383 8811 	msr	BASEPRI, r3
1a0023ec:	f3bf 8f6f 	isb	sy
1a0023f0:	f3bf 8f4f 	dsb	sy
1a0023f4:	e7fe      	b.n	1a0023f4 <prvTaskExitError+0x20>
1a0023f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023fa:	f383 8811 	msr	BASEPRI, r3
1a0023fe:	f3bf 8f6f 	isb	sy
1a002402:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a002406:	9b01      	ldr	r3, [sp, #4]
1a002408:	2b00      	cmp	r3, #0
1a00240a:	d0fc      	beq.n	1a002406 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a00240c:	b002      	add	sp, #8
1a00240e:	4770      	bx	lr
1a002410:	10000004 	.word	0x10000004

1a002414 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002414:	4808      	ldr	r0, [pc, #32]	; (1a002438 <prvPortStartFirstTask+0x24>)
1a002416:	6800      	ldr	r0, [r0, #0]
1a002418:	6800      	ldr	r0, [r0, #0]
1a00241a:	f380 8808 	msr	MSP, r0
1a00241e:	f04f 0000 	mov.w	r0, #0
1a002422:	f380 8814 	msr	CONTROL, r0
1a002426:	b662      	cpsie	i
1a002428:	b661      	cpsie	f
1a00242a:	f3bf 8f4f 	dsb	sy
1a00242e:	f3bf 8f6f 	isb	sy
1a002432:	df00      	svc	0
1a002434:	bf00      	nop
1a002436:	0000      	.short	0x0000
1a002438:	e000ed08 	.word	0xe000ed08

1a00243c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a00243c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a00244c <vPortEnableVFP+0x10>
1a002440:	6801      	ldr	r1, [r0, #0]
1a002442:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002446:	6001      	str	r1, [r0, #0]
1a002448:	4770      	bx	lr
1a00244a:	0000      	.short	0x0000
1a00244c:	e000ed88 	.word	0xe000ed88

1a002450 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002454:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002458:	f021 0101 	bic.w	r1, r1, #1
1a00245c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002460:	4b05      	ldr	r3, [pc, #20]	; (1a002478 <pxPortInitialiseStack+0x28>)
1a002462:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002466:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a00246a:	f06f 0302 	mvn.w	r3, #2
1a00246e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a002472:	3844      	subs	r0, #68	; 0x44
1a002474:	4770      	bx	lr
1a002476:	bf00      	nop
1a002478:	1a0023d5 	.word	0x1a0023d5
1a00247c:	ffffffff 	.word	0xffffffff

1a002480 <SVC_Handler>:
	__asm volatile (
1a002480:	4b07      	ldr	r3, [pc, #28]	; (1a0024a0 <pxCurrentTCBConst2>)
1a002482:	6819      	ldr	r1, [r3, #0]
1a002484:	6808      	ldr	r0, [r1, #0]
1a002486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00248a:	f380 8809 	msr	PSP, r0
1a00248e:	f3bf 8f6f 	isb	sy
1a002492:	f04f 0000 	mov.w	r0, #0
1a002496:	f380 8811 	msr	BASEPRI, r0
1a00249a:	4770      	bx	lr
1a00249c:	f3af 8000 	nop.w

1a0024a0 <pxCurrentTCBConst2>:
1a0024a0:	100021a8 	.word	0x100021a8

1a0024a4 <vPortEnterCritical>:
1a0024a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024a8:	f383 8811 	msr	BASEPRI, r3
1a0024ac:	f3bf 8f6f 	isb	sy
1a0024b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a0024b4:	4a0a      	ldr	r2, [pc, #40]	; (1a0024e0 <vPortEnterCritical+0x3c>)
1a0024b6:	6813      	ldr	r3, [r2, #0]
1a0024b8:	3301      	adds	r3, #1
1a0024ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0024bc:	2b01      	cmp	r3, #1
1a0024be:	d000      	beq.n	1a0024c2 <vPortEnterCritical+0x1e>
}
1a0024c0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0024c2:	4b08      	ldr	r3, [pc, #32]	; (1a0024e4 <vPortEnterCritical+0x40>)
1a0024c4:	681b      	ldr	r3, [r3, #0]
1a0024c6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0024ca:	d0f9      	beq.n	1a0024c0 <vPortEnterCritical+0x1c>
1a0024cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024d0:	f383 8811 	msr	BASEPRI, r3
1a0024d4:	f3bf 8f6f 	isb	sy
1a0024d8:	f3bf 8f4f 	dsb	sy
1a0024dc:	e7fe      	b.n	1a0024dc <vPortEnterCritical+0x38>
1a0024de:	bf00      	nop
1a0024e0:	10000004 	.word	0x10000004
1a0024e4:	e000ed04 	.word	0xe000ed04

1a0024e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0024e8:	4b09      	ldr	r3, [pc, #36]	; (1a002510 <vPortExitCritical+0x28>)
1a0024ea:	681b      	ldr	r3, [r3, #0]
1a0024ec:	b943      	cbnz	r3, 1a002500 <vPortExitCritical+0x18>
1a0024ee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024f2:	f383 8811 	msr	BASEPRI, r3
1a0024f6:	f3bf 8f6f 	isb	sy
1a0024fa:	f3bf 8f4f 	dsb	sy
1a0024fe:	e7fe      	b.n	1a0024fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002500:	3b01      	subs	r3, #1
1a002502:	4a03      	ldr	r2, [pc, #12]	; (1a002510 <vPortExitCritical+0x28>)
1a002504:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002506:	b90b      	cbnz	r3, 1a00250c <vPortExitCritical+0x24>
	__asm volatile
1a002508:	f383 8811 	msr	BASEPRI, r3
}
1a00250c:	4770      	bx	lr
1a00250e:	bf00      	nop
1a002510:	10000004 	.word	0x10000004
1a002514:	ffffffff 	.word	0xffffffff
1a002518:	ffffffff 	.word	0xffffffff
1a00251c:	ffffffff 	.word	0xffffffff

1a002520 <PendSV_Handler>:
	__asm volatile
1a002520:	f3ef 8009 	mrs	r0, PSP
1a002524:	f3bf 8f6f 	isb	sy
1a002528:	4b15      	ldr	r3, [pc, #84]	; (1a002580 <pxCurrentTCBConst>)
1a00252a:	681a      	ldr	r2, [r3, #0]
1a00252c:	f01e 0f10 	tst.w	lr, #16
1a002530:	bf08      	it	eq
1a002532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00253a:	6010      	str	r0, [r2, #0]
1a00253c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002540:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002544:	f380 8811 	msr	BASEPRI, r0
1a002548:	f3bf 8f4f 	dsb	sy
1a00254c:	f3bf 8f6f 	isb	sy
1a002550:	f7ff fba6 	bl	1a001ca0 <vTaskSwitchContext>
1a002554:	f04f 0000 	mov.w	r0, #0
1a002558:	f380 8811 	msr	BASEPRI, r0
1a00255c:	bc09      	pop	{r0, r3}
1a00255e:	6819      	ldr	r1, [r3, #0]
1a002560:	6808      	ldr	r0, [r1, #0]
1a002562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002566:	f01e 0f10 	tst.w	lr, #16
1a00256a:	bf08      	it	eq
1a00256c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002570:	f380 8809 	msr	PSP, r0
1a002574:	f3bf 8f6f 	isb	sy
1a002578:	4770      	bx	lr
1a00257a:	bf00      	nop
1a00257c:	f3af 8000 	nop.w

1a002580 <pxCurrentTCBConst>:
1a002580:	100021a8 	.word	0x100021a8

1a002584 <SysTick_Handler>:
{
1a002584:	b508      	push	{r3, lr}
	__asm volatile
1a002586:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00258a:	f383 8811 	msr	BASEPRI, r3
1a00258e:	f3bf 8f6f 	isb	sy
1a002592:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002596:	f7ff fa05 	bl	1a0019a4 <xTaskIncrementTick>
1a00259a:	b118      	cbz	r0, 1a0025a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00259c:	4b03      	ldr	r3, [pc, #12]	; (1a0025ac <SysTick_Handler+0x28>)
1a00259e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0025a2:	601a      	str	r2, [r3, #0]
	__asm volatile
1a0025a4:	2300      	movs	r3, #0
1a0025a6:	f383 8811 	msr	BASEPRI, r3
}
1a0025aa:	bd08      	pop	{r3, pc}
1a0025ac:	e000ed04 	.word	0xe000ed04

1a0025b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a0025b0:	4a08      	ldr	r2, [pc, #32]	; (1a0025d4 <vPortSetupTimerInterrupt+0x24>)
1a0025b2:	2300      	movs	r3, #0
1a0025b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a0025b6:	4908      	ldr	r1, [pc, #32]	; (1a0025d8 <vPortSetupTimerInterrupt+0x28>)
1a0025b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a0025ba:	4b08      	ldr	r3, [pc, #32]	; (1a0025dc <vPortSetupTimerInterrupt+0x2c>)
1a0025bc:	681b      	ldr	r3, [r3, #0]
1a0025be:	4908      	ldr	r1, [pc, #32]	; (1a0025e0 <vPortSetupTimerInterrupt+0x30>)
1a0025c0:	fba1 1303 	umull	r1, r3, r1, r3
1a0025c4:	099b      	lsrs	r3, r3, #6
1a0025c6:	3b01      	subs	r3, #1
1a0025c8:	4906      	ldr	r1, [pc, #24]	; (1a0025e4 <vPortSetupTimerInterrupt+0x34>)
1a0025ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0025cc:	2307      	movs	r3, #7
1a0025ce:	6013      	str	r3, [r2, #0]
}
1a0025d0:	4770      	bx	lr
1a0025d2:	bf00      	nop
1a0025d4:	e000e010 	.word	0xe000e010
1a0025d8:	e000e018 	.word	0xe000e018
1a0025dc:	100023d8 	.word	0x100023d8
1a0025e0:	10624dd3 	.word	0x10624dd3
1a0025e4:	e000e014 	.word	0xe000e014

1a0025e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0025e8:	4b3a      	ldr	r3, [pc, #232]	; (1a0026d4 <xPortStartScheduler+0xec>)
1a0025ea:	681a      	ldr	r2, [r3, #0]
1a0025ec:	4b3a      	ldr	r3, [pc, #232]	; (1a0026d8 <xPortStartScheduler+0xf0>)
1a0025ee:	429a      	cmp	r2, r3
1a0025f0:	d00d      	beq.n	1a00260e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0025f2:	4b38      	ldr	r3, [pc, #224]	; (1a0026d4 <xPortStartScheduler+0xec>)
1a0025f4:	681a      	ldr	r2, [r3, #0]
1a0025f6:	4b39      	ldr	r3, [pc, #228]	; (1a0026dc <xPortStartScheduler+0xf4>)
1a0025f8:	429a      	cmp	r2, r3
1a0025fa:	d111      	bne.n	1a002620 <xPortStartScheduler+0x38>
	__asm volatile
1a0025fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002600:	f383 8811 	msr	BASEPRI, r3
1a002604:	f3bf 8f6f 	isb	sy
1a002608:	f3bf 8f4f 	dsb	sy
1a00260c:	e7fe      	b.n	1a00260c <xPortStartScheduler+0x24>
1a00260e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002612:	f383 8811 	msr	BASEPRI, r3
1a002616:	f3bf 8f6f 	isb	sy
1a00261a:	f3bf 8f4f 	dsb	sy
1a00261e:	e7fe      	b.n	1a00261e <xPortStartScheduler+0x36>
{
1a002620:	b510      	push	{r4, lr}
1a002622:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002624:	4b2e      	ldr	r3, [pc, #184]	; (1a0026e0 <xPortStartScheduler+0xf8>)
1a002626:	781a      	ldrb	r2, [r3, #0]
1a002628:	b2d2      	uxtb	r2, r2
1a00262a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a00262c:	22ff      	movs	r2, #255	; 0xff
1a00262e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002630:	781b      	ldrb	r3, [r3, #0]
1a002632:	b2db      	uxtb	r3, r3
1a002634:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002638:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a00263c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002640:	4a28      	ldr	r2, [pc, #160]	; (1a0026e4 <xPortStartScheduler+0xfc>)
1a002642:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002644:	4b28      	ldr	r3, [pc, #160]	; (1a0026e8 <xPortStartScheduler+0x100>)
1a002646:	2207      	movs	r2, #7
1a002648:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00264a:	e009      	b.n	1a002660 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a00264c:	4a26      	ldr	r2, [pc, #152]	; (1a0026e8 <xPortStartScheduler+0x100>)
1a00264e:	6813      	ldr	r3, [r2, #0]
1a002650:	3b01      	subs	r3, #1
1a002652:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002654:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002658:	005b      	lsls	r3, r3, #1
1a00265a:	b2db      	uxtb	r3, r3
1a00265c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002660:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002664:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002668:	d1f0      	bne.n	1a00264c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a00266a:	4b1f      	ldr	r3, [pc, #124]	; (1a0026e8 <xPortStartScheduler+0x100>)
1a00266c:	681b      	ldr	r3, [r3, #0]
1a00266e:	2b04      	cmp	r3, #4
1a002670:	d008      	beq.n	1a002684 <xPortStartScheduler+0x9c>
1a002672:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002676:	f383 8811 	msr	BASEPRI, r3
1a00267a:	f3bf 8f6f 	isb	sy
1a00267e:	f3bf 8f4f 	dsb	sy
1a002682:	e7fe      	b.n	1a002682 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002684:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00268a:	4a17      	ldr	r2, [pc, #92]	; (1a0026e8 <xPortStartScheduler+0x100>)
1a00268c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00268e:	9b01      	ldr	r3, [sp, #4]
1a002690:	b2db      	uxtb	r3, r3
1a002692:	4a13      	ldr	r2, [pc, #76]	; (1a0026e0 <xPortStartScheduler+0xf8>)
1a002694:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002696:	4b15      	ldr	r3, [pc, #84]	; (1a0026ec <xPortStartScheduler+0x104>)
1a002698:	681a      	ldr	r2, [r3, #0]
1a00269a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00269e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a0026a0:	681a      	ldr	r2, [r3, #0]
1a0026a2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a0026a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a0026a8:	f7ff ff82 	bl	1a0025b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a0026ac:	2400      	movs	r4, #0
1a0026ae:	4b10      	ldr	r3, [pc, #64]	; (1a0026f0 <xPortStartScheduler+0x108>)
1a0026b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a0026b2:	f7ff fec3 	bl	1a00243c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0026b6:	4a0f      	ldr	r2, [pc, #60]	; (1a0026f4 <xPortStartScheduler+0x10c>)
1a0026b8:	6813      	ldr	r3, [r2, #0]
1a0026ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0026be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a0026c0:	f7ff fea8 	bl	1a002414 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a0026c4:	f7ff faec 	bl	1a001ca0 <vTaskSwitchContext>
	prvTaskExitError();
1a0026c8:	f7ff fe84 	bl	1a0023d4 <prvTaskExitError>
}
1a0026cc:	4620      	mov	r0, r4
1a0026ce:	b002      	add	sp, #8
1a0026d0:	bd10      	pop	{r4, pc}
1a0026d2:	bf00      	nop
1a0026d4:	e000ed00 	.word	0xe000ed00
1a0026d8:	410fc271 	.word	0x410fc271
1a0026dc:	410fc270 	.word	0x410fc270
1a0026e0:	e000e400 	.word	0xe000e400
1a0026e4:	10002310 	.word	0x10002310
1a0026e8:	10002314 	.word	0x10002314
1a0026ec:	e000ed20 	.word	0xe000ed20
1a0026f0:	10000004 	.word	0x10000004
1a0026f4:	e000ef34 	.word	0xe000ef34

1a0026f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0026f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0026fc:	2b0f      	cmp	r3, #15
1a0026fe:	d90f      	bls.n	1a002720 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002700:	4a10      	ldr	r2, [pc, #64]	; (1a002744 <vPortValidateInterruptPriority+0x4c>)
1a002702:	5c9b      	ldrb	r3, [r3, r2]
1a002704:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002706:	4a10      	ldr	r2, [pc, #64]	; (1a002748 <vPortValidateInterruptPriority+0x50>)
1a002708:	7812      	ldrb	r2, [r2, #0]
1a00270a:	429a      	cmp	r2, r3
1a00270c:	d908      	bls.n	1a002720 <vPortValidateInterruptPriority+0x28>
1a00270e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002712:	f383 8811 	msr	BASEPRI, r3
1a002716:	f3bf 8f6f 	isb	sy
1a00271a:	f3bf 8f4f 	dsb	sy
1a00271e:	e7fe      	b.n	1a00271e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002720:	4b0a      	ldr	r3, [pc, #40]	; (1a00274c <vPortValidateInterruptPriority+0x54>)
1a002722:	681b      	ldr	r3, [r3, #0]
1a002724:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002728:	4a09      	ldr	r2, [pc, #36]	; (1a002750 <vPortValidateInterruptPriority+0x58>)
1a00272a:	6812      	ldr	r2, [r2, #0]
1a00272c:	4293      	cmp	r3, r2
1a00272e:	d908      	bls.n	1a002742 <vPortValidateInterruptPriority+0x4a>
1a002730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002734:	f383 8811 	msr	BASEPRI, r3
1a002738:	f3bf 8f6f 	isb	sy
1a00273c:	f3bf 8f4f 	dsb	sy
1a002740:	e7fe      	b.n	1a002740 <vPortValidateInterruptPriority+0x48>
	}
1a002742:	4770      	bx	lr
1a002744:	e000e3f0 	.word	0xe000e3f0
1a002748:	10002310 	.word	0x10002310
1a00274c:	e000ed0c 	.word	0xe000ed0c
1a002750:	10002314 	.word	0x10002314

1a002754 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002754:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002756:	4b05      	ldr	r3, [pc, #20]	; (1a00276c <DAC_IRQHandler+0x18>)
1a002758:	2201      	movs	r2, #1
1a00275a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a00275e:	4b04      	ldr	r3, [pc, #16]	; (1a002770 <DAC_IRQHandler+0x1c>)
1a002760:	681b      	ldr	r3, [r3, #0]
1a002762:	b113      	cbz	r3, 1a00276a <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002764:	4b02      	ldr	r3, [pc, #8]	; (1a002770 <DAC_IRQHandler+0x1c>)
1a002766:	681b      	ldr	r3, [r3, #0]
1a002768:	4798      	blx	r3
   }
}
1a00276a:	bd08      	pop	{r3, pc}
1a00276c:	e000e100 	.word	0xe000e100
1a002770:	10002318 	.word	0x10002318

1a002774 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002774:	2200      	movs	r2, #0
1a002776:	2a05      	cmp	r2, #5
1a002778:	d819      	bhi.n	1a0027ae <Board_LED_Init+0x3a>
{
1a00277a:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00277c:	490c      	ldr	r1, [pc, #48]	; (1a0027b0 <Board_LED_Init+0x3c>)
1a00277e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002782:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002786:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002788:	4b0a      	ldr	r3, [pc, #40]	; (1a0027b4 <Board_LED_Init+0x40>)
1a00278a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00278e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002792:	2001      	movs	r0, #1
1a002794:	40a0      	lsls	r0, r4
1a002796:	4301      	orrs	r1, r0
1a002798:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00279c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a0027a0:	2100      	movs	r1, #0
1a0027a2:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0027a4:	3201      	adds	r2, #1
1a0027a6:	2a05      	cmp	r2, #5
1a0027a8:	d9e8      	bls.n	1a00277c <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0027aa:	bc70      	pop	{r4, r5, r6}
1a0027ac:	4770      	bx	lr
1a0027ae:	4770      	bx	lr
1a0027b0:	1a004ce0 	.word	0x1a004ce0
1a0027b4:	400f4000 	.word	0x400f4000

1a0027b8 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0027b8:	2300      	movs	r3, #0
1a0027ba:	2b03      	cmp	r3, #3
1a0027bc:	d816      	bhi.n	1a0027ec <Board_TEC_Init+0x34>
{
1a0027be:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0027c0:	490b      	ldr	r1, [pc, #44]	; (1a0027f0 <Board_TEC_Init+0x38>)
1a0027c2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0027c6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0027ca:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0027cc:	4c09      	ldr	r4, [pc, #36]	; (1a0027f4 <Board_TEC_Init+0x3c>)
1a0027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0027d2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0027d6:	2001      	movs	r0, #1
1a0027d8:	40a8      	lsls	r0, r5
1a0027da:	ea21 0100 	bic.w	r1, r1, r0
1a0027de:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0027e2:	3301      	adds	r3, #1
1a0027e4:	2b03      	cmp	r3, #3
1a0027e6:	d9eb      	bls.n	1a0027c0 <Board_TEC_Init+0x8>
   }
}
1a0027e8:	bc30      	pop	{r4, r5}
1a0027ea:	4770      	bx	lr
1a0027ec:	4770      	bx	lr
1a0027ee:	bf00      	nop
1a0027f0:	1a004cd8 	.word	0x1a004cd8
1a0027f4:	400f4000 	.word	0x400f4000

1a0027f8 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0027f8:	2300      	movs	r3, #0
1a0027fa:	2b08      	cmp	r3, #8
1a0027fc:	d816      	bhi.n	1a00282c <Board_GPIO_Init+0x34>
{
1a0027fe:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002800:	490b      	ldr	r1, [pc, #44]	; (1a002830 <Board_GPIO_Init+0x38>)
1a002802:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002806:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00280a:	784d      	ldrb	r5, [r1, #1]
1a00280c:	4c09      	ldr	r4, [pc, #36]	; (1a002834 <Board_GPIO_Init+0x3c>)
1a00280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002812:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002816:	2001      	movs	r0, #1
1a002818:	40a8      	lsls	r0, r5
1a00281a:	ea21 0100 	bic.w	r1, r1, r0
1a00281e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002822:	3301      	adds	r3, #1
1a002824:	2b08      	cmp	r3, #8
1a002826:	d9eb      	bls.n	1a002800 <Board_GPIO_Init+0x8>
   }
}
1a002828:	bc30      	pop	{r4, r5}
1a00282a:	4770      	bx	lr
1a00282c:	4770      	bx	lr
1a00282e:	bf00      	nop
1a002830:	1a004cec 	.word	0x1a004cec
1a002834:	400f4000 	.word	0x400f4000

1a002838 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002838:	b510      	push	{r4, lr}
1a00283a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00283c:	4c08      	ldr	r4, [pc, #32]	; (1a002860 <Board_ADC_Init+0x28>)
1a00283e:	4669      	mov	r1, sp
1a002840:	4620      	mov	r0, r4
1a002842:	f000 f9df 	bl	1a002c04 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002846:	4a07      	ldr	r2, [pc, #28]	; (1a002864 <Board_ADC_Init+0x2c>)
1a002848:	4669      	mov	r1, sp
1a00284a:	4620      	mov	r0, r4
1a00284c:	f000 f9fa 	bl	1a002c44 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002850:	2200      	movs	r2, #0
1a002852:	4669      	mov	r1, sp
1a002854:	4620      	mov	r0, r4
1a002856:	f000 fa0e 	bl	1a002c76 <Chip_ADC_SetResolution>
}
1a00285a:	b002      	add	sp, #8
1a00285c:	bd10      	pop	{r4, pc}
1a00285e:	bf00      	nop
1a002860:	400e3000 	.word	0x400e3000
1a002864:	00061a80 	.word	0x00061a80

1a002868 <Board_SPI_Init>:
{
1a002868:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a00286a:	4c0b      	ldr	r4, [pc, #44]	; (1a002898 <Board_SPI_Init+0x30>)
1a00286c:	4620      	mov	r0, r4
1a00286e:	f000 fe03 	bl	1a003478 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002872:	6863      	ldr	r3, [r4, #4]
1a002874:	f023 0304 	bic.w	r3, r3, #4
1a002878:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00287a:	6823      	ldr	r3, [r4, #0]
1a00287c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002880:	f043 0307 	orr.w	r3, r3, #7
1a002884:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002886:	4905      	ldr	r1, [pc, #20]	; (1a00289c <Board_SPI_Init+0x34>)
1a002888:	4620      	mov	r0, r4
1a00288a:	f000 fdd6 	bl	1a00343a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00288e:	6863      	ldr	r3, [r4, #4]
1a002890:	f043 0302 	orr.w	r3, r3, #2
1a002894:	6063      	str	r3, [r4, #4]
}
1a002896:	bd10      	pop	{r4, pc}
1a002898:	400c5000 	.word	0x400c5000
1a00289c:	000186a0 	.word	0x000186a0

1a0028a0 <Board_I2C_Init>:
{
1a0028a0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0028a2:	2000      	movs	r0, #0
1a0028a4:	f000 fd7c 	bl	1a0033a0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0028a8:	4b04      	ldr	r3, [pc, #16]	; (1a0028bc <Board_I2C_Init+0x1c>)
1a0028aa:	f640 0208 	movw	r2, #2056	; 0x808
1a0028ae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0028b2:	4903      	ldr	r1, [pc, #12]	; (1a0028c0 <Board_I2C_Init+0x20>)
1a0028b4:	2000      	movs	r0, #0
1a0028b6:	f000 fd85 	bl	1a0033c4 <Chip_I2C_SetClockRate>
}
1a0028ba:	bd08      	pop	{r3, pc}
1a0028bc:	40086000 	.word	0x40086000
1a0028c0:	000f4240 	.word	0x000f4240

1a0028c4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0028c4:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a0028c6:	4c07      	ldr	r4, [pc, #28]	; (1a0028e4 <Board_Debug_Init+0x20>)
1a0028c8:	4620      	mov	r0, r4
1a0028ca:	f000 f8b9 	bl	1a002a40 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0028ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0028d2:	4620      	mov	r0, r4
1a0028d4:	f000 f8fe 	bl	1a002ad4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0028d8:	2303      	movs	r3, #3
1a0028da:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0028dc:	2301      	movs	r3, #1
1a0028de:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0028e0:	bd10      	pop	{r4, pc}
1a0028e2:	bf00      	nop
1a0028e4:	400c1000 	.word	0x400c1000

1a0028e8 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0028e8:	4b03      	ldr	r3, [pc, #12]	; (1a0028f8 <Board_UARTPutChar+0x10>)
1a0028ea:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0028ec:	f013 0f20 	tst.w	r3, #32
1a0028f0:	d0fa      	beq.n	1a0028e8 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0028f2:	4b01      	ldr	r3, [pc, #4]	; (1a0028f8 <Board_UARTPutChar+0x10>)
1a0028f4:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0028f6:	4770      	bx	lr
1a0028f8:	400c1000 	.word	0x400c1000

1a0028fc <Board_UARTGetChar>:
	return pUART->LSR;
1a0028fc:	4b05      	ldr	r3, [pc, #20]	; (1a002914 <Board_UARTGetChar+0x18>)
1a0028fe:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002900:	f013 0f01 	tst.w	r3, #1
1a002904:	d003      	beq.n	1a00290e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002906:	4b03      	ldr	r3, [pc, #12]	; (1a002914 <Board_UARTGetChar+0x18>)
1a002908:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00290a:	b2c0      	uxtb	r0, r0
1a00290c:	4770      	bx	lr
   }
   return EOF;
1a00290e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002912:	4770      	bx	lr
1a002914:	400c1000 	.word	0x400c1000

1a002918 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002918:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00291a:	f7ff ffd3 	bl	1a0028c4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00291e:	4809      	ldr	r0, [pc, #36]	; (1a002944 <Board_Init+0x2c>)
1a002920:	f000 fd2c 	bl	1a00337c <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002924:	f7ff ff68 	bl	1a0027f8 <Board_GPIO_Init>
   Board_ADC_Init();
1a002928:	f7ff ff86 	bl	1a002838 <Board_ADC_Init>
   Board_SPI_Init();
1a00292c:	f7ff ff9c 	bl	1a002868 <Board_SPI_Init>
   Board_I2C_Init();
1a002930:	f7ff ffb6 	bl	1a0028a0 <Board_I2C_Init>

   Board_LED_Init();
1a002934:	f7ff ff1e 	bl	1a002774 <Board_LED_Init>
   Board_TEC_Init();
1a002938:	f7ff ff3e 	bl	1a0027b8 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00293c:	f000 f9a2 	bl	1a002c84 <SystemCoreClockUpdate>
}
1a002940:	bd08      	pop	{r3, pc}
1a002942:	bf00      	nop
1a002944:	400f4000 	.word	0x400f4000

1a002948 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002948:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00294a:	b2c0      	uxtb	r0, r0
1a00294c:	f7ff ffcc 	bl	1a0028e8 <Board_UARTPutChar>
}
1a002950:	bd08      	pop	{r3, pc}

1a002952 <__stdio_getchar>:

int __stdio_getchar()
{
1a002952:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002954:	f7ff ffd2 	bl	1a0028fc <Board_UARTGetChar>
}
1a002958:	bd08      	pop	{r3, pc}

1a00295a <__stdio_init>:

void __stdio_init()
{
1a00295a:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00295c:	f7ff ffb2 	bl	1a0028c4 <Board_Debug_Init>
1a002960:	bd08      	pop	{r3, pc}
1a002962:	Address 0x000000001a002962 is out of bounds.


1a002964 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002964:	2300      	movs	r3, #0
1a002966:	2b1c      	cmp	r3, #28
1a002968:	d812      	bhi.n	1a002990 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a00296a:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00296c:	4a09      	ldr	r2, [pc, #36]	; (1a002994 <Board_SetupMuxing+0x30>)
1a00296e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002972:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002976:	784a      	ldrb	r2, [r1, #1]
1a002978:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00297a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00297e:	4906      	ldr	r1, [pc, #24]	; (1a002998 <Board_SetupMuxing+0x34>)
1a002980:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002984:	3301      	adds	r3, #1
1a002986:	2b1c      	cmp	r3, #28
1a002988:	d9f0      	bls.n	1a00296c <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00298a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00298e:	4770      	bx	lr
1a002990:	4770      	bx	lr
1a002992:	bf00      	nop
1a002994:	1a004d08 	.word	0x1a004d08
1a002998:	40086000 	.word	0x40086000

1a00299c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00299c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00299e:	4a17      	ldr	r2, [pc, #92]	; (1a0029fc <Board_SetupClocking+0x60>)
1a0029a0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0029a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0029a8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0029ac:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0029b0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0029b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0029b8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0029bc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0029c0:	2201      	movs	r2, #1
1a0029c2:	490f      	ldr	r1, [pc, #60]	; (1a002a00 <Board_SetupClocking+0x64>)
1a0029c4:	2006      	movs	r0, #6
1a0029c6:	f000 fc2f 	bl	1a003228 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0029ca:	2400      	movs	r4, #0
1a0029cc:	b14c      	cbz	r4, 1a0029e2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0029ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0029fc <Board_SetupClocking+0x60>)
1a0029d0:	685a      	ldr	r2, [r3, #4]
1a0029d2:	f022 020c 	bic.w	r2, r2, #12
1a0029d6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0029d8:	685a      	ldr	r2, [r3, #4]
1a0029da:	f042 0203 	orr.w	r2, r2, #3
1a0029de:	605a      	str	r2, [r3, #4]
}
1a0029e0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0029e2:	4808      	ldr	r0, [pc, #32]	; (1a002a04 <Board_SetupClocking+0x68>)
1a0029e4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0029e8:	2301      	movs	r3, #1
1a0029ea:	788a      	ldrb	r2, [r1, #2]
1a0029ec:	7849      	ldrb	r1, [r1, #1]
1a0029ee:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0029f2:	f000 fb75 	bl	1a0030e0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0029f6:	3401      	adds	r4, #1
1a0029f8:	e7e8      	b.n	1a0029cc <Board_SetupClocking+0x30>
1a0029fa:	bf00      	nop
1a0029fc:	40043000 	.word	0x40043000
1a002a00:	0c28cb00 	.word	0x0c28cb00
1a002a04:	1a004d04 	.word	0x1a004d04

1a002a08 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002a08:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002a0a:	f7ff ffab 	bl	1a002964 <Board_SetupMuxing>
    Board_SetupClocking();
1a002a0e:	f7ff ffc5 	bl	1a00299c <Board_SetupClocking>
}
1a002a12:	bd08      	pop	{r3, pc}

1a002a14 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002a14:	4b09      	ldr	r3, [pc, #36]	; (1a002a3c <Chip_UART_GetIndex+0x28>)
1a002a16:	4298      	cmp	r0, r3
1a002a18:	d009      	beq.n	1a002a2e <Chip_UART_GetIndex+0x1a>
1a002a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002a1e:	4298      	cmp	r0, r3
1a002a20:	d007      	beq.n	1a002a32 <Chip_UART_GetIndex+0x1e>
1a002a22:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002a26:	4298      	cmp	r0, r3
1a002a28:	d005      	beq.n	1a002a36 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002a2a:	2000      	movs	r0, #0
1a002a2c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002a2e:	2002      	movs	r0, #2
1a002a30:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002a32:	2003      	movs	r0, #3
1a002a34:	4770      	bx	lr
			return 1;
1a002a36:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002a38:	4770      	bx	lr
1a002a3a:	bf00      	nop
1a002a3c:	400c1000 	.word	0x400c1000

1a002a40 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002a40:	b530      	push	{r4, r5, lr}
1a002a42:	b083      	sub	sp, #12
1a002a44:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002a46:	f7ff ffe5 	bl	1a002a14 <Chip_UART_GetIndex>
1a002a4a:	2301      	movs	r3, #1
1a002a4c:	461a      	mov	r2, r3
1a002a4e:	4619      	mov	r1, r3
1a002a50:	4d0e      	ldr	r5, [pc, #56]	; (1a002a8c <Chip_UART_Init+0x4c>)
1a002a52:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002a56:	f000 fb89 	bl	1a00316c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002a5a:	2307      	movs	r3, #7
1a002a5c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002a5e:	2300      	movs	r3, #0
1a002a60:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002a62:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002a64:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002a66:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002a68:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002a6a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002a6c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002a6e:	4b08      	ldr	r3, [pc, #32]	; (1a002a90 <Chip_UART_Init+0x50>)
1a002a70:	429c      	cmp	r4, r3
1a002a72:	d006      	beq.n	1a002a82 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002a74:	2303      	movs	r3, #3
1a002a76:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002a78:	2310      	movs	r3, #16
1a002a7a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002a7c:	9b01      	ldr	r3, [sp, #4]
}
1a002a7e:	b003      	add	sp, #12
1a002a80:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002a82:	2300      	movs	r3, #0
1a002a84:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002a86:	69a3      	ldr	r3, [r4, #24]
1a002a88:	9301      	str	r3, [sp, #4]
1a002a8a:	e7f3      	b.n	1a002a74 <Chip_UART_Init+0x34>
1a002a8c:	1a004d84 	.word	0x1a004d84
1a002a90:	40082000 	.word	0x40082000

1a002a94 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002a94:	b538      	push	{r3, r4, r5, lr}
1a002a96:	4605      	mov	r5, r0
1a002a98:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002a9a:	f7ff ffbb 	bl	1a002a14 <Chip_UART_GetIndex>
1a002a9e:	4b0c      	ldr	r3, [pc, #48]	; (1a002ad0 <Chip_UART_SetBaud+0x3c>)
1a002aa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002aa4:	f000 fb9a 	bl	1a0031dc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002aa8:	0123      	lsls	r3, r4, #4
1a002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
1a002aae:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002ab0:	68ea      	ldr	r2, [r5, #12]
1a002ab2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a002ab6:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a002ab8:	6029      	str	r1, [r5, #0]
1a002aba:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002abe:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002ac0:	68ea      	ldr	r2, [r5, #12]
1a002ac2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002ac6:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a002ac8:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a002acc:	0900      	lsrs	r0, r0, #4
1a002ace:	bd38      	pop	{r3, r4, r5, pc}
1a002ad0:	1a004d7c 	.word	0x1a004d7c

1a002ad4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002ad8:	b083      	sub	sp, #12
1a002ada:	4683      	mov	fp, r0
1a002adc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002ade:	f7ff ff99 	bl	1a002a14 <Chip_UART_GetIndex>
1a002ae2:	4b35      	ldr	r3, [pc, #212]	; (1a002bb8 <Chip_UART_SetBaudFDR+0xe4>)
1a002ae4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002ae8:	f000 fb78 	bl	1a0031dc <Chip_Clock_GetRate>
1a002aec:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002aee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002af2:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002af4:	2300      	movs	r3, #0
1a002af6:	9301      	str	r3, [sp, #4]
1a002af8:	46a2      	mov	sl, r4
1a002afa:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002afc:	e02a      	b.n	1a002b54 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002afe:	4242      	negs	r2, r0
				div ++;
1a002b00:	1c4b      	adds	r3, r1, #1
1a002b02:	e017      	b.n	1a002b34 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002b04:	b30a      	cbz	r2, 1a002b4a <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002b06:	4617      	mov	r7, r2
			sd = d;
1a002b08:	9501      	str	r5, [sp, #4]
			sm = m;
1a002b0a:	46a2      	mov	sl, r4
			sdiv = div;
1a002b0c:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002b0e:	3501      	adds	r5, #1
1a002b10:	42ac      	cmp	r4, r5
1a002b12:	d91e      	bls.n	1a002b52 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002b14:	0933      	lsrs	r3, r6, #4
1a002b16:	0730      	lsls	r0, r6, #28
1a002b18:	fba4 0100 	umull	r0, r1, r4, r0
1a002b1c:	fb04 1103 	mla	r1, r4, r3, r1
1a002b20:	1962      	adds	r2, r4, r5
1a002b22:	fb08 f202 	mul.w	r2, r8, r2
1a002b26:	2300      	movs	r3, #0
1a002b28:	f000 ff68 	bl	1a0039fc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002b2c:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002b2e:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002b30:	2800      	cmp	r0, #0
1a002b32:	dbe4      	blt.n	1a002afe <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002b34:	4297      	cmp	r7, r2
1a002b36:	d3ea      	bcc.n	1a002b0e <Chip_UART_SetBaudFDR+0x3a>
1a002b38:	2b00      	cmp	r3, #0
1a002b3a:	d0e8      	beq.n	1a002b0e <Chip_UART_SetBaudFDR+0x3a>
1a002b3c:	0c19      	lsrs	r1, r3, #16
1a002b3e:	d1e6      	bne.n	1a002b0e <Chip_UART_SetBaudFDR+0x3a>
1a002b40:	2b02      	cmp	r3, #2
1a002b42:	d8df      	bhi.n	1a002b04 <Chip_UART_SetBaudFDR+0x30>
1a002b44:	2d00      	cmp	r5, #0
1a002b46:	d0dd      	beq.n	1a002b04 <Chip_UART_SetBaudFDR+0x30>
1a002b48:	e7e1      	b.n	1a002b0e <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002b4a:	4617      	mov	r7, r2
			sd = d;
1a002b4c:	9501      	str	r5, [sp, #4]
			sm = m;
1a002b4e:	46a2      	mov	sl, r4
			sdiv = div;
1a002b50:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002b52:	3401      	adds	r4, #1
1a002b54:	b11f      	cbz	r7, 1a002b5e <Chip_UART_SetBaudFDR+0x8a>
1a002b56:	2c0f      	cmp	r4, #15
1a002b58:	d801      	bhi.n	1a002b5e <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002b5a:	2500      	movs	r5, #0
1a002b5c:	e7d8      	b.n	1a002b10 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002b5e:	f1b9 0f00 	cmp.w	r9, #0
1a002b62:	d024      	beq.n	1a002bae <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002b64:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002b6c:	f8cb 300c 	str.w	r3, [fp, #12]
1a002b70:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002b74:	f8cb 3000 	str.w	r3, [fp]
1a002b78:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002b7c:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002b80:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002b88:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002b8c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002b90:	b2db      	uxtb	r3, r3
1a002b92:	9901      	ldr	r1, [sp, #4]
1a002b94:	f001 020f 	and.w	r2, r1, #15
1a002b98:	4313      	orrs	r3, r2
1a002b9a:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002b9e:	0933      	lsrs	r3, r6, #4
1a002ba0:	fb0a f303 	mul.w	r3, sl, r3
1a002ba4:	448a      	add	sl, r1
1a002ba6:	fb09 f90a 	mul.w	r9, r9, sl
1a002baa:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a002bae:	4648      	mov	r0, r9
1a002bb0:	b003      	add	sp, #12
1a002bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002bb6:	bf00      	nop
1a002bb8:	1a004d7c 	.word	0x1a004d7c

1a002bbc <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002bbc:	4b03      	ldr	r3, [pc, #12]	; (1a002bcc <Chip_ADC_GetClockIndex+0x10>)
1a002bbe:	4298      	cmp	r0, r3
1a002bc0:	d001      	beq.n	1a002bc6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002bc2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002bc4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a002bc6:	2004      	movs	r0, #4
1a002bc8:	4770      	bx	lr
1a002bca:	bf00      	nop
1a002bcc:	400e4000 	.word	0x400e4000

1a002bd0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002bd0:	b570      	push	{r4, r5, r6, lr}
1a002bd2:	460d      	mov	r5, r1
1a002bd4:	4614      	mov	r4, r2
1a002bd6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002bd8:	f7ff fff0 	bl	1a002bbc <Chip_ADC_GetClockIndex>
1a002bdc:	f000 fafe 	bl	1a0031dc <Chip_Clock_GetRate>
	if (burstMode) {
1a002be0:	b965      	cbnz	r5, 1a002bfc <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002be2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002be6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002bea:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002bee:	0064      	lsls	r4, r4, #1
1a002bf0:	fbb0 f0f4 	udiv	r0, r0, r4
1a002bf4:	b2c0      	uxtb	r0, r0
1a002bf6:	3801      	subs	r0, #1
	return div;
}
1a002bf8:	b2c0      	uxtb	r0, r0
1a002bfa:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a002bfc:	fb04 f406 	mul.w	r4, r4, r6
1a002c00:	e7f3      	b.n	1a002bea <getClkDiv+0x1a>
1a002c02:	Address 0x000000001a002c02 is out of bounds.


1a002c04 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002c04:	b538      	push	{r3, r4, r5, lr}
1a002c06:	4605      	mov	r5, r0
1a002c08:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002c0a:	f7ff ffd7 	bl	1a002bbc <Chip_ADC_GetClockIndex>
1a002c0e:	2301      	movs	r3, #1
1a002c10:	461a      	mov	r2, r3
1a002c12:	4619      	mov	r1, r3
1a002c14:	f000 faaa 	bl	1a00316c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002c18:	2100      	movs	r1, #0
1a002c1a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002c1c:	4a08      	ldr	r2, [pc, #32]	; (1a002c40 <Chip_ADC_Init+0x3c>)
1a002c1e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002c20:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002c22:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002c24:	230b      	movs	r3, #11
1a002c26:	4628      	mov	r0, r5
1a002c28:	f7ff ffd2 	bl	1a002bd0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002c2c:	0200      	lsls	r0, r0, #8
1a002c2e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002c32:	7920      	ldrb	r0, [r4, #4]
1a002c34:	0440      	lsls	r0, r0, #17
1a002c36:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002c3a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a002c3c:	6028      	str	r0, [r5, #0]
}
1a002c3e:	bd38      	pop	{r3, r4, r5, pc}
1a002c40:	00061a80 	.word	0x00061a80

1a002c44 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002c44:	b570      	push	{r4, r5, r6, lr}
1a002c46:	4605      	mov	r5, r0
1a002c48:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002c4a:	6804      	ldr	r4, [r0, #0]
1a002c4c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002c50:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002c54:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002c56:	790b      	ldrb	r3, [r1, #4]
1a002c58:	f1c3 030b 	rsb	r3, r3, #11
1a002c5c:	b2db      	uxtb	r3, r3
1a002c5e:	7949      	ldrb	r1, [r1, #5]
1a002c60:	f7ff ffb6 	bl	1a002bd0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002c64:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002c68:	7930      	ldrb	r0, [r6, #4]
1a002c6a:	0440      	lsls	r0, r0, #17
1a002c6c:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a002c70:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a002c72:	6028      	str	r0, [r5, #0]
}
1a002c74:	bd70      	pop	{r4, r5, r6, pc}

1a002c76 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002c76:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002c78:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002c7a:	680a      	ldr	r2, [r1, #0]
1a002c7c:	f7ff ffe2 	bl	1a002c44 <Chip_ADC_SetSampleRate>
}
1a002c80:	bd08      	pop	{r3, pc}
1a002c82:	Address 0x000000001a002c82 is out of bounds.


1a002c84 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002c84:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002c86:	2069      	movs	r0, #105	; 0x69
1a002c88:	f000 faa8 	bl	1a0031dc <Chip_Clock_GetRate>
1a002c8c:	4b01      	ldr	r3, [pc, #4]	; (1a002c94 <SystemCoreClockUpdate+0x10>)
1a002c8e:	6018      	str	r0, [r3, #0]
}
1a002c90:	bd08      	pop	{r3, pc}
1a002c92:	bf00      	nop
1a002c94:	100023d8 	.word	0x100023d8

1a002c98 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002c98:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002c9a:	680b      	ldr	r3, [r1, #0]
1a002c9c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ca0:	d002      	beq.n	1a002ca8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002ca6:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002ca8:	4607      	mov	r7, r0
1a002caa:	2501      	movs	r5, #1
1a002cac:	e03b      	b.n	1a002d26 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002cae:	694b      	ldr	r3, [r1, #20]
1a002cb0:	fb03 f302 	mul.w	r3, r3, r2
1a002cb4:	fbb3 f3f5 	udiv	r3, r3, r5
1a002cb8:	e014      	b.n	1a002ce4 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002cba:	461c      	mov	r4, r3
1a002cbc:	e020      	b.n	1a002d00 <pll_calc_divs+0x68>
		return -val;
1a002cbe:	f1cc 0c00 	rsb	ip, ip, #0
1a002cc2:	e020      	b.n	1a002d06 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a002cc4:	3201      	adds	r2, #1
1a002cc6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002cca:	dc26      	bgt.n	1a002d1a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a002ccc:	680c      	ldr	r4, [r1, #0]
1a002cce:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002cd2:	d0ec      	beq.n	1a002cae <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002cd4:	1c73      	adds	r3, r6, #1
1a002cd6:	fa02 fc03 	lsl.w	ip, r2, r3
1a002cda:	694b      	ldr	r3, [r1, #20]
1a002cdc:	fb03 f30c 	mul.w	r3, r3, ip
1a002ce0:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002ce4:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a002d34 <pll_calc_divs+0x9c>
1a002ce8:	4563      	cmp	r3, ip
1a002cea:	d9eb      	bls.n	1a002cc4 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002cec:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a002d38 <pll_calc_divs+0xa0>
1a002cf0:	4563      	cmp	r3, ip
1a002cf2:	d812      	bhi.n	1a002d1a <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a002cf4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002cf8:	d1df      	bne.n	1a002cba <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a002cfa:	1c74      	adds	r4, r6, #1
1a002cfc:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a002d00:	ebb0 0c04 	subs.w	ip, r0, r4
1a002d04:	d4db      	bmi.n	1a002cbe <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a002d06:	4567      	cmp	r7, ip
1a002d08:	d9dc      	bls.n	1a002cc4 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a002d0a:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002d0c:	1c77      	adds	r7, r6, #1
1a002d0e:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002d10:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002d12:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002d14:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002d16:	4667      	mov	r7, ip
1a002d18:	e7d4      	b.n	1a002cc4 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a002d1a:	3601      	adds	r6, #1
1a002d1c:	2e03      	cmp	r6, #3
1a002d1e:	dc01      	bgt.n	1a002d24 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a002d20:	2201      	movs	r2, #1
1a002d22:	e7d0      	b.n	1a002cc6 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a002d24:	3501      	adds	r5, #1
1a002d26:	2d04      	cmp	r5, #4
1a002d28:	dc01      	bgt.n	1a002d2e <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a002d2a:	2600      	movs	r6, #0
1a002d2c:	e7f6      	b.n	1a002d1c <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a002d2e:	bcf0      	pop	{r4, r5, r6, r7}
1a002d30:	4770      	bx	lr
1a002d32:	bf00      	nop
1a002d34:	094c5eff 	.word	0x094c5eff
1a002d38:	1312d000 	.word	0x1312d000

1a002d3c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002d3e:	b099      	sub	sp, #100	; 0x64
1a002d40:	4605      	mov	r5, r0
1a002d42:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002d44:	225c      	movs	r2, #92	; 0x5c
1a002d46:	2100      	movs	r1, #0
1a002d48:	a801      	add	r0, sp, #4
1a002d4a:	f001 f980 	bl	1a00404e <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002d4e:	2380      	movs	r3, #128	; 0x80
1a002d50:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002d52:	6963      	ldr	r3, [r4, #20]
1a002d54:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002d56:	7923      	ldrb	r3, [r4, #4]
1a002d58:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002d5c:	4669      	mov	r1, sp
1a002d5e:	4628      	mov	r0, r5
1a002d60:	f7ff ff9a 	bl	1a002c98 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002d64:	9b06      	ldr	r3, [sp, #24]
1a002d66:	42ab      	cmp	r3, r5
1a002d68:	d027      	beq.n	1a002dba <pll_get_frac+0x7e>
	if (val < 0)
1a002d6a:	1aeb      	subs	r3, r5, r3
1a002d6c:	d42e      	bmi.n	1a002dcc <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002d6e:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002d76:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002d78:	6963      	ldr	r3, [r4, #20]
1a002d7a:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002d7c:	7923      	ldrb	r3, [r4, #4]
1a002d7e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002d82:	a910      	add	r1, sp, #64	; 0x40
1a002d84:	4628      	mov	r0, r5
1a002d86:	f7ff ff87 	bl	1a002c98 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002d8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002d8c:	42ab      	cmp	r3, r5
1a002d8e:	d01f      	beq.n	1a002dd0 <pll_get_frac+0x94>
	if (val < 0)
1a002d90:	1aeb      	subs	r3, r5, r3
1a002d92:	d425      	bmi.n	1a002de0 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002d94:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002d96:	4b2b      	ldr	r3, [pc, #172]	; (1a002e44 <pll_get_frac+0x108>)
1a002d98:	429d      	cmp	r5, r3
1a002d9a:	d923      	bls.n	1a002de4 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002d9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a002d9e:	1aed      	subs	r5, r5, r3
1a002da0:	d433      	bmi.n	1a002e0a <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002da2:	42ae      	cmp	r6, r5
1a002da4:	dc3b      	bgt.n	1a002e1e <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002da6:	42be      	cmp	r6, r7
1a002da8:	dc31      	bgt.n	1a002e0e <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002daa:	466d      	mov	r5, sp
1a002dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002db0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002db4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002db8:	e006      	b.n	1a002dc8 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002dba:	466d      	mov	r5, sp
1a002dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002dc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002dc8:	b019      	add	sp, #100	; 0x64
1a002dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002dcc:	425b      	negs	r3, r3
1a002dce:	e7ce      	b.n	1a002d6e <pll_get_frac+0x32>
		*ppll = pll[2];
1a002dd0:	ad10      	add	r5, sp, #64	; 0x40
1a002dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002dd6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002dda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002dde:	e7f3      	b.n	1a002dc8 <pll_get_frac+0x8c>
		return -val;
1a002de0:	425b      	negs	r3, r3
1a002de2:	e7d7      	b.n	1a002d94 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002de4:	2340      	movs	r3, #64	; 0x40
1a002de6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002de8:	6963      	ldr	r3, [r4, #20]
1a002dea:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002dec:	a908      	add	r1, sp, #32
1a002dee:	4628      	mov	r0, r5
1a002df0:	f7ff ff52 	bl	1a002c98 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002df6:	42ab      	cmp	r3, r5
1a002df8:	d1d0      	bne.n	1a002d9c <pll_get_frac+0x60>
			*ppll = pll[1];
1a002dfa:	ad08      	add	r5, sp, #32
1a002dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002e08:	e7de      	b.n	1a002dc8 <pll_get_frac+0x8c>
		return -val;
1a002e0a:	426d      	negs	r5, r5
1a002e0c:	e7c9      	b.n	1a002da2 <pll_get_frac+0x66>
			*ppll = pll[2];
1a002e0e:	ad10      	add	r5, sp, #64	; 0x40
1a002e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e1c:	e7d4      	b.n	1a002dc8 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002e1e:	42af      	cmp	r7, r5
1a002e20:	db07      	blt.n	1a002e32 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002e22:	ad08      	add	r5, sp, #32
1a002e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e30:	e7ca      	b.n	1a002dc8 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002e32:	ad10      	add	r5, sp, #64	; 0x40
1a002e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002e38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002e3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002e40:	e7c2      	b.n	1a002dc8 <pll_get_frac+0x8c>
1a002e42:	bf00      	nop
1a002e44:	068e7780 	.word	0x068e7780

1a002e48 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002e48:	b430      	push	{r4, r5}
1a002e4a:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002e4c:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002e4e:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002e50:	e000      	b.n	1a002e54 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002e52:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002e54:	281c      	cmp	r0, #28
1a002e56:	d118      	bne.n	1a002e8a <Chip_Clock_FindBaseClock+0x42>
1a002e58:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e5c:	0051      	lsls	r1, r2, #1
1a002e5e:	4a0c      	ldr	r2, [pc, #48]	; (1a002e90 <Chip_Clock_FindBaseClock+0x48>)
1a002e60:	440a      	add	r2, r1
1a002e62:	7914      	ldrb	r4, [r2, #4]
1a002e64:	4284      	cmp	r4, r0
1a002e66:	d010      	beq.n	1a002e8a <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002e68:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a002e6c:	004a      	lsls	r2, r1, #1
1a002e6e:	4908      	ldr	r1, [pc, #32]	; (1a002e90 <Chip_Clock_FindBaseClock+0x48>)
1a002e70:	5a8a      	ldrh	r2, [r1, r2]
1a002e72:	42aa      	cmp	r2, r5
1a002e74:	d8ed      	bhi.n	1a002e52 <Chip_Clock_FindBaseClock+0xa>
1a002e76:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002e7a:	0051      	lsls	r1, r2, #1
1a002e7c:	4a04      	ldr	r2, [pc, #16]	; (1a002e90 <Chip_Clock_FindBaseClock+0x48>)
1a002e7e:	440a      	add	r2, r1
1a002e80:	8852      	ldrh	r2, [r2, #2]
1a002e82:	42aa      	cmp	r2, r5
1a002e84:	d3e5      	bcc.n	1a002e52 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002e86:	4620      	mov	r0, r4
1a002e88:	e7e4      	b.n	1a002e54 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002e8a:	bc30      	pop	{r4, r5}
1a002e8c:	4770      	bx	lr
1a002e8e:	bf00      	nop
1a002e90:	1a004d98 	.word	0x1a004d98

1a002e94 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002e94:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002e9a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002e9c:	4a0d      	ldr	r2, [pc, #52]	; (1a002ed4 <Chip_Clock_EnableCrystal+0x40>)
1a002e9e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002ea0:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002ea4:	6992      	ldr	r2, [r2, #24]
1a002ea6:	428a      	cmp	r2, r1
1a002ea8:	d001      	beq.n	1a002eae <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002eaa:	4a0a      	ldr	r2, [pc, #40]	; (1a002ed4 <Chip_Clock_EnableCrystal+0x40>)
1a002eac:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002eae:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002eb2:	4a09      	ldr	r2, [pc, #36]	; (1a002ed8 <Chip_Clock_EnableCrystal+0x44>)
1a002eb4:	6811      	ldr	r1, [r2, #0]
1a002eb6:	4a09      	ldr	r2, [pc, #36]	; (1a002edc <Chip_Clock_EnableCrystal+0x48>)
1a002eb8:	4291      	cmp	r1, r2
1a002eba:	d901      	bls.n	1a002ec0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002ebc:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002ec0:	4a04      	ldr	r2, [pc, #16]	; (1a002ed4 <Chip_Clock_EnableCrystal+0x40>)
1a002ec2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002ec4:	9b01      	ldr	r3, [sp, #4]
1a002ec6:	1e5a      	subs	r2, r3, #1
1a002ec8:	9201      	str	r2, [sp, #4]
1a002eca:	2b00      	cmp	r3, #0
1a002ecc:	d1fa      	bne.n	1a002ec4 <Chip_Clock_EnableCrystal+0x30>
}
1a002ece:	b002      	add	sp, #8
1a002ed0:	4770      	bx	lr
1a002ed2:	bf00      	nop
1a002ed4:	40050000 	.word	0x40050000
1a002ed8:	1a004d00 	.word	0x1a004d00
1a002edc:	01312cff 	.word	0x01312cff

1a002ee0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002ee0:	3012      	adds	r0, #18
1a002ee2:	4b05      	ldr	r3, [pc, #20]	; (1a002ef8 <Chip_Clock_GetDividerSource+0x18>)
1a002ee4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002ee8:	f010 0f01 	tst.w	r0, #1
1a002eec:	d102      	bne.n	1a002ef4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002eee:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ef2:	4770      	bx	lr
		return CLKINPUT_PD;
1a002ef4:	2011      	movs	r0, #17
}
1a002ef6:	4770      	bx	lr
1a002ef8:	40050000 	.word	0x40050000

1a002efc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002efc:	f100 0212 	add.w	r2, r0, #18
1a002f00:	4b03      	ldr	r3, [pc, #12]	; (1a002f10 <Chip_Clock_GetDividerDivisor+0x14>)
1a002f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002f06:	4b03      	ldr	r3, [pc, #12]	; (1a002f14 <Chip_Clock_GetDividerDivisor+0x18>)
1a002f08:	5c18      	ldrb	r0, [r3, r0]
}
1a002f0a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002f0e:	4770      	bx	lr
1a002f10:	40050000 	.word	0x40050000
1a002f14:	1a004d90 	.word	0x1a004d90

1a002f18 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002f18:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002f1a:	2810      	cmp	r0, #16
1a002f1c:	d80a      	bhi.n	1a002f34 <Chip_Clock_GetClockInputHz+0x1c>
1a002f1e:	e8df f000 	tbb	[pc, r0]
1a002f22:	0b42      	.short	0x0b42
1a002f24:	091f160d 	.word	0x091f160d
1a002f28:	2b282522 	.word	0x2b282522
1a002f2c:	322e0909 	.word	0x322e0909
1a002f30:	3a36      	.short	0x3a36
1a002f32:	3e          	.byte	0x3e
1a002f33:	00          	.byte	0x00
	uint32_t rate = 0;
1a002f34:	2000      	movs	r0, #0
1a002f36:	e038      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002f38:	481e      	ldr	r0, [pc, #120]	; (1a002fb4 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002f3a:	e036      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002f3c:	4b1e      	ldr	r3, [pc, #120]	; (1a002fb8 <Chip_Clock_GetClockInputHz+0xa0>)
1a002f3e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002f42:	f003 0307 	and.w	r3, r3, #7
1a002f46:	2b04      	cmp	r3, #4
1a002f48:	d130      	bne.n	1a002fac <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a002f4a:	2000      	movs	r0, #0
1a002f4c:	e02d      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002f4e:	4b1a      	ldr	r3, [pc, #104]	; (1a002fb8 <Chip_Clock_GetClockInputHz+0xa0>)
1a002f50:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002f54:	f003 0307 	and.w	r3, r3, #7
1a002f58:	2b04      	cmp	r3, #4
1a002f5a:	d029      	beq.n	1a002fb0 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002f5c:	4817      	ldr	r0, [pc, #92]	; (1a002fbc <Chip_Clock_GetClockInputHz+0xa4>)
1a002f5e:	e024      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002f60:	4b17      	ldr	r3, [pc, #92]	; (1a002fc0 <Chip_Clock_GetClockInputHz+0xa8>)
1a002f62:	6818      	ldr	r0, [r3, #0]
		break;
1a002f64:	e021      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002f66:	4b17      	ldr	r3, [pc, #92]	; (1a002fc4 <Chip_Clock_GetClockInputHz+0xac>)
1a002f68:	6818      	ldr	r0, [r3, #0]
		break;
1a002f6a:	e01e      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002f6c:	4b16      	ldr	r3, [pc, #88]	; (1a002fc8 <Chip_Clock_GetClockInputHz+0xb0>)
1a002f6e:	6818      	ldr	r0, [r3, #0]
		break;
1a002f70:	e01b      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002f72:	4b15      	ldr	r3, [pc, #84]	; (1a002fc8 <Chip_Clock_GetClockInputHz+0xb0>)
1a002f74:	6858      	ldr	r0, [r3, #4]
		break;
1a002f76:	e018      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002f78:	f000 f86a 	bl	1a003050 <Chip_Clock_GetMainPLLHz>
		break;
1a002f7c:	e015      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002f7e:	2100      	movs	r1, #0
1a002f80:	f000 f89c 	bl	1a0030bc <Chip_Clock_GetDivRate>
		break;
1a002f84:	e011      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002f86:	2101      	movs	r1, #1
1a002f88:	f000 f898 	bl	1a0030bc <Chip_Clock_GetDivRate>
		break;
1a002f8c:	e00d      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002f8e:	2102      	movs	r1, #2
1a002f90:	f000 f894 	bl	1a0030bc <Chip_Clock_GetDivRate>
		break;
1a002f94:	e009      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002f96:	2103      	movs	r1, #3
1a002f98:	f000 f890 	bl	1a0030bc <Chip_Clock_GetDivRate>
		break;
1a002f9c:	e005      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002f9e:	2104      	movs	r1, #4
1a002fa0:	f000 f88c 	bl	1a0030bc <Chip_Clock_GetDivRate>
		break;
1a002fa4:	e001      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a002fa6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a002faa:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a002fac:	4803      	ldr	r0, [pc, #12]	; (1a002fbc <Chip_Clock_GetClockInputHz+0xa4>)
1a002fae:	e7fc      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a002fb0:	4806      	ldr	r0, [pc, #24]	; (1a002fcc <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002fb2:	e7fa      	b.n	1a002faa <Chip_Clock_GetClockInputHz+0x92>
1a002fb4:	00b71b00 	.word	0x00b71b00
1a002fb8:	40043000 	.word	0x40043000
1a002fbc:	017d7840 	.word	0x017d7840
1a002fc0:	1a004cd4 	.word	0x1a004cd4
1a002fc4:	1a004d00 	.word	0x1a004d00
1a002fc8:	1000231c 	.word	0x1000231c
1a002fcc:	02faf080 	.word	0x02faf080

1a002fd0 <Chip_Clock_CalcMainPLLValue>:
{
1a002fd0:	b538      	push	{r3, r4, r5, lr}
1a002fd2:	4605      	mov	r5, r0
1a002fd4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002fd6:	7908      	ldrb	r0, [r1, #4]
1a002fd8:	f7ff ff9e 	bl	1a002f18 <Chip_Clock_GetClockInputHz>
1a002fdc:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002fde:	4b19      	ldr	r3, [pc, #100]	; (1a003044 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002fe0:	442b      	add	r3, r5
1a002fe2:	4a19      	ldr	r2, [pc, #100]	; (1a003048 <Chip_Clock_CalcMainPLLValue+0x78>)
1a002fe4:	4293      	cmp	r3, r2
1a002fe6:	d821      	bhi.n	1a00302c <Chip_Clock_CalcMainPLLValue+0x5c>
1a002fe8:	b318      	cbz	r0, 1a003032 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002fea:	2380      	movs	r3, #128	; 0x80
1a002fec:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002fee:	2300      	movs	r3, #0
1a002ff0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002ff2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002ff4:	fbb5 f3f0 	udiv	r3, r5, r0
1a002ff8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002ffa:	4a14      	ldr	r2, [pc, #80]	; (1a00304c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002ffc:	4295      	cmp	r5, r2
1a002ffe:	d903      	bls.n	1a003008 <Chip_Clock_CalcMainPLLValue+0x38>
1a003000:	fb03 f000 	mul.w	r0, r3, r0
1a003004:	42a8      	cmp	r0, r5
1a003006:	d007      	beq.n	1a003018 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003008:	4621      	mov	r1, r4
1a00300a:	4628      	mov	r0, r5
1a00300c:	f7ff fe96 	bl	1a002d3c <pll_get_frac>
		if (!ppll->nsel) {
1a003010:	68a3      	ldr	r3, [r4, #8]
1a003012:	b18b      	cbz	r3, 1a003038 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003014:	3b01      	subs	r3, #1
1a003016:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003018:	6923      	ldr	r3, [r4, #16]
1a00301a:	b183      	cbz	r3, 1a00303e <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a00301c:	68e2      	ldr	r2, [r4, #12]
1a00301e:	b10a      	cbz	r2, 1a003024 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003020:	3a01      	subs	r2, #1
1a003022:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003024:	3b01      	subs	r3, #1
1a003026:	6123      	str	r3, [r4, #16]
	return 0;
1a003028:	2000      	movs	r0, #0
}
1a00302a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00302c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003030:	e7fb      	b.n	1a00302a <Chip_Clock_CalcMainPLLValue+0x5a>
1a003032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003036:	e7f8      	b.n	1a00302a <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00303c:	e7f5      	b.n	1a00302a <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00303e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003042:	e7f2      	b.n	1a00302a <Chip_Clock_CalcMainPLLValue+0x5a>
1a003044:	ff6b3a10 	.word	0xff6b3a10
1a003048:	0b940510 	.word	0x0b940510
1a00304c:	094c5eff 	.word	0x094c5eff

1a003050 <Chip_Clock_GetMainPLLHz>:
{
1a003050:	b530      	push	{r4, r5, lr}
1a003052:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003054:	4d17      	ldr	r5, [pc, #92]	; (1a0030b4 <Chip_Clock_GetMainPLLHz+0x64>)
1a003056:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003058:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00305c:	f7ff ff5c 	bl	1a002f18 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003060:	4b15      	ldr	r3, [pc, #84]	; (1a0030b8 <Chip_Clock_GetMainPLLHz+0x68>)
1a003062:	681b      	ldr	r3, [r3, #0]
1a003064:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003066:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003068:	f013 0f01 	tst.w	r3, #1
1a00306c:	d01f      	beq.n	1a0030ae <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a00306e:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a003072:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a003076:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00307a:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a00307e:	3301      	adds	r3, #1
	n = nsel + 1;
1a003080:	3201      	adds	r2, #1
	p = ptab[psel];
1a003082:	f10d 0c08 	add.w	ip, sp, #8
1a003086:	4461      	add	r1, ip
1a003088:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a00308c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003090:	d108      	bne.n	1a0030a4 <Chip_Clock_GetMainPLLHz+0x54>
1a003092:	b93d      	cbnz	r5, 1a0030a4 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a003094:	0049      	lsls	r1, r1, #1
1a003096:	fbb3 f3f1 	udiv	r3, r3, r1
1a00309a:	fbb0 f0f2 	udiv	r0, r0, r2
1a00309e:	fb00 f003 	mul.w	r0, r0, r3
1a0030a2:	e005      	b.n	1a0030b0 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0030a4:	fbb0 f0f2 	udiv	r0, r0, r2
1a0030a8:	fb03 f000 	mul.w	r0, r3, r0
1a0030ac:	e000      	b.n	1a0030b0 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0030ae:	2000      	movs	r0, #0
}
1a0030b0:	b003      	add	sp, #12
1a0030b2:	bd30      	pop	{r4, r5, pc}
1a0030b4:	40050000 	.word	0x40050000
1a0030b8:	1a004d8c 	.word	0x1a004d8c

1a0030bc <Chip_Clock_GetDivRate>:
{
1a0030bc:	b538      	push	{r3, r4, r5, lr}
1a0030be:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0030c0:	4608      	mov	r0, r1
1a0030c2:	f7ff ff0d 	bl	1a002ee0 <Chip_Clock_GetDividerSource>
1a0030c6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0030c8:	4620      	mov	r0, r4
1a0030ca:	f7ff ff17 	bl	1a002efc <Chip_Clock_GetDividerDivisor>
1a0030ce:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0030d0:	4628      	mov	r0, r5
1a0030d2:	f7ff ff21 	bl	1a002f18 <Chip_Clock_GetClockInputHz>
1a0030d6:	3401      	adds	r4, #1
}
1a0030d8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0030dc:	bd38      	pop	{r3, r4, r5, pc}
1a0030de:	Address 0x000000001a0030de is out of bounds.


1a0030e0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0030e0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0030e2:	f100 0416 	add.w	r4, r0, #22
1a0030e6:	00a4      	lsls	r4, r4, #2
1a0030e8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0030ec:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0030f0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0030f2:	281b      	cmp	r0, #27
1a0030f4:	d813      	bhi.n	1a00311e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0030f6:	2911      	cmp	r1, #17
1a0030f8:	d01a      	beq.n	1a003130 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0030fa:	4d0e      	ldr	r5, [pc, #56]	; (1a003134 <Chip_Clock_SetBaseClock+0x54>)
1a0030fc:	4025      	ands	r5, r4

			if (autoblocken) {
1a0030fe:	b10a      	cbz	r2, 1a003104 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a003100:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003104:	b10b      	cbz	r3, 1a00310a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003106:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00310a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00310e:	3016      	adds	r0, #22
1a003110:	0080      	lsls	r0, r0, #2
1a003112:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003116:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00311a:	6045      	str	r5, [r0, #4]
1a00311c:	e008      	b.n	1a003130 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00311e:	f044 0401 	orr.w	r4, r4, #1
1a003122:	3016      	adds	r0, #22
1a003124:	0080      	lsls	r0, r0, #2
1a003126:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00312a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00312e:	6044      	str	r4, [r0, #4]
	}
}
1a003130:	bc30      	pop	{r4, r5}
1a003132:	4770      	bx	lr
1a003134:	e0fff7fe 	.word	0xe0fff7fe

1a003138 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003138:	281b      	cmp	r0, #27
1a00313a:	d80c      	bhi.n	1a003156 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00313c:	3016      	adds	r0, #22
1a00313e:	0080      	lsls	r0, r0, #2
1a003140:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003144:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003148:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00314a:	f010 0f01 	tst.w	r0, #1
1a00314e:	d104      	bne.n	1a00315a <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003150:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003154:	4770      	bx	lr
		return CLKINPUT_PD;
1a003156:	2011      	movs	r0, #17
1a003158:	4770      	bx	lr
		return CLKINPUT_PD;
1a00315a:	2011      	movs	r0, #17
}
1a00315c:	4770      	bx	lr

1a00315e <Chip_Clock_GetBaseClocktHz>:
{
1a00315e:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003160:	f7ff ffea 	bl	1a003138 <Chip_Clock_GetBaseClock>
1a003164:	f7ff fed8 	bl	1a002f18 <Chip_Clock_GetClockInputHz>
}
1a003168:	bd08      	pop	{r3, pc}
1a00316a:	Address 0x000000001a00316a is out of bounds.


1a00316c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00316c:	b969      	cbnz	r1, 1a00318a <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a00316e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003170:	b10a      	cbz	r2, 1a003176 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a003172:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a003176:	2b02      	cmp	r3, #2
1a003178:	d009      	beq.n	1a00318e <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00317a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00317e:	d209      	bcs.n	1a003194 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003180:	3020      	adds	r0, #32
1a003182:	4b07      	ldr	r3, [pc, #28]	; (1a0031a0 <Chip_Clock_EnableOpts+0x34>)
1a003184:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003188:	4770      	bx	lr
		reg |= (1 << 1);
1a00318a:	2103      	movs	r1, #3
1a00318c:	e7f0      	b.n	1a003170 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a00318e:	f041 0120 	orr.w	r1, r1, #32
1a003192:	e7f2      	b.n	1a00317a <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003194:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003198:	4b02      	ldr	r3, [pc, #8]	; (1a0031a4 <Chip_Clock_EnableOpts+0x38>)
1a00319a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00319e:	4770      	bx	lr
1a0031a0:	40051000 	.word	0x40051000
1a0031a4:	40052000 	.word	0x40052000

1a0031a8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0031a8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0031ac:	d208      	bcs.n	1a0031c0 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0031ae:	4a09      	ldr	r2, [pc, #36]	; (1a0031d4 <Chip_Clock_Enable+0x2c>)
1a0031b0:	3020      	adds	r0, #32
1a0031b2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0031b6:	f043 0301 	orr.w	r3, r3, #1
1a0031ba:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0031be:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0031c0:	4a05      	ldr	r2, [pc, #20]	; (1a0031d8 <Chip_Clock_Enable+0x30>)
1a0031c2:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0031c6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0031ca:	f043 0301 	orr.w	r3, r3, #1
1a0031ce:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0031d2:	4770      	bx	lr
1a0031d4:	40051000 	.word	0x40051000
1a0031d8:	40052000 	.word	0x40052000

1a0031dc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0031dc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0031de:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0031e2:	d309      	bcc.n	1a0031f8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0031e4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0031e8:	4a0d      	ldr	r2, [pc, #52]	; (1a003220 <Chip_Clock_GetRate+0x44>)
1a0031ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0031ee:	f014 0f01 	tst.w	r4, #1
1a0031f2:	d107      	bne.n	1a003204 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0031f4:	2000      	movs	r0, #0
	}

	return rate;
}
1a0031f6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0031f8:	f100 0320 	add.w	r3, r0, #32
1a0031fc:	4a09      	ldr	r2, [pc, #36]	; (1a003224 <Chip_Clock_GetRate+0x48>)
1a0031fe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003202:	e7f4      	b.n	1a0031ee <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003204:	f7ff fe20 	bl	1a002e48 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003208:	f7ff ffa9 	bl	1a00315e <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00320c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003210:	d103      	bne.n	1a00321a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003212:	2301      	movs	r3, #1
		rate = rate / div;
1a003214:	fbb0 f0f3 	udiv	r0, r0, r3
1a003218:	e7ed      	b.n	1a0031f6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00321a:	2302      	movs	r3, #2
1a00321c:	e7fa      	b.n	1a003214 <Chip_Clock_GetRate+0x38>
1a00321e:	bf00      	nop
1a003220:	40052000 	.word	0x40052000
1a003224:	40051000 	.word	0x40051000

1a003228 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003228:	b570      	push	{r4, r5, r6, lr}
1a00322a:	b08a      	sub	sp, #40	; 0x28
1a00322c:	4605      	mov	r5, r0
1a00322e:	460e      	mov	r6, r1
1a003230:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003232:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003236:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003238:	2806      	cmp	r0, #6
1a00323a:	d018      	beq.n	1a00326e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00323c:	2300      	movs	r3, #0
1a00323e:	2201      	movs	r2, #1
1a003240:	4629      	mov	r1, r5
1a003242:	2004      	movs	r0, #4
1a003244:	f7ff ff4c 	bl	1a0030e0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003248:	4a49      	ldr	r2, [pc, #292]	; (1a003370 <Chip_SetupCoreClock+0x148>)
1a00324a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00324c:	f043 0301 	orr.w	r3, r3, #1
1a003250:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003252:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003256:	a901      	add	r1, sp, #4
1a003258:	4630      	mov	r0, r6
1a00325a:	f7ff feb9 	bl	1a002fd0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00325e:	4b45      	ldr	r3, [pc, #276]	; (1a003374 <Chip_SetupCoreClock+0x14c>)
1a003260:	429e      	cmp	r6, r3
1a003262:	d916      	bls.n	1a003292 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003264:	9b01      	ldr	r3, [sp, #4]
1a003266:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00326a:	d003      	beq.n	1a003274 <Chip_SetupCoreClock+0x4c>
1a00326c:	e7fe      	b.n	1a00326c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00326e:	f7ff fe11 	bl	1a002e94 <Chip_Clock_EnableCrystal>
1a003272:	e7e3      	b.n	1a00323c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003274:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003278:	d005      	beq.n	1a003286 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00327a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00327e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003280:	2500      	movs	r5, #0
			direct = 1;
1a003282:	2601      	movs	r6, #1
1a003284:	e007      	b.n	1a003296 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a003286:	9b04      	ldr	r3, [sp, #16]
1a003288:	3301      	adds	r3, #1
1a00328a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00328c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a00328e:	2600      	movs	r6, #0
1a003290:	e001      	b.n	1a003296 <Chip_SetupCoreClock+0x6e>
1a003292:	2500      	movs	r5, #0
1a003294:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003296:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00329a:	9b01      	ldr	r3, [sp, #4]
1a00329c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0032a0:	9a05      	ldr	r2, [sp, #20]
1a0032a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0032a6:	9a03      	ldr	r2, [sp, #12]
1a0032a8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0032ac:	9a04      	ldr	r2, [sp, #16]
1a0032ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0032b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0032b6:	4a2e      	ldr	r2, [pc, #184]	; (1a003370 <Chip_SetupCoreClock+0x148>)
1a0032b8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0032ba:	4b2d      	ldr	r3, [pc, #180]	; (1a003370 <Chip_SetupCoreClock+0x148>)
1a0032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0032be:	f013 0f01 	tst.w	r3, #1
1a0032c2:	d0fa      	beq.n	1a0032ba <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0032c4:	2300      	movs	r3, #0
1a0032c6:	2201      	movs	r2, #1
1a0032c8:	2109      	movs	r1, #9
1a0032ca:	2004      	movs	r0, #4
1a0032cc:	f7ff ff08 	bl	1a0030e0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0032d0:	b1fe      	cbz	r6, 1a003312 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0032d2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0032d6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0032d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0032da:	1e5a      	subs	r2, r3, #1
1a0032dc:	9209      	str	r2, [sp, #36]	; 0x24
1a0032de:	2b00      	cmp	r3, #0
1a0032e0:	d1fa      	bne.n	1a0032d8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0032e2:	9b01      	ldr	r3, [sp, #4]
1a0032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0032e8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0032ea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0032ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0032f2:	9a05      	ldr	r2, [sp, #20]
1a0032f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0032f8:	9a03      	ldr	r2, [sp, #12]
1a0032fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0032fe:	9a04      	ldr	r2, [sp, #16]
1a003300:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003304:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003308:	4a19      	ldr	r2, [pc, #100]	; (1a003370 <Chip_SetupCoreClock+0x148>)
1a00330a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00330c:	b36c      	cbz	r4, 1a00336a <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00330e:	2400      	movs	r4, #0
1a003310:	e029      	b.n	1a003366 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003312:	2d00      	cmp	r5, #0
1a003314:	d0fa      	beq.n	1a00330c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003316:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00331a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00331c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00331e:	1e5a      	subs	r2, r3, #1
1a003320:	9209      	str	r2, [sp, #36]	; 0x24
1a003322:	2b00      	cmp	r3, #0
1a003324:	d1fa      	bne.n	1a00331c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003326:	9b04      	ldr	r3, [sp, #16]
1a003328:	1e5a      	subs	r2, r3, #1
1a00332a:	9204      	str	r2, [sp, #16]
1a00332c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003330:	9b01      	ldr	r3, [sp, #4]
1a003332:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003336:	9905      	ldr	r1, [sp, #20]
1a003338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00333c:	9903      	ldr	r1, [sp, #12]
1a00333e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003342:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003346:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00334a:	4a09      	ldr	r2, [pc, #36]	; (1a003370 <Chip_SetupCoreClock+0x148>)
1a00334c:	6453      	str	r3, [r2, #68]	; 0x44
1a00334e:	e7dd      	b.n	1a00330c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003350:	4809      	ldr	r0, [pc, #36]	; (1a003378 <Chip_SetupCoreClock+0x150>)
1a003352:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a003356:	78cb      	ldrb	r3, [r1, #3]
1a003358:	788a      	ldrb	r2, [r1, #2]
1a00335a:	7849      	ldrb	r1, [r1, #1]
1a00335c:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003360:	f7ff febe 	bl	1a0030e0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003364:	3401      	adds	r4, #1
1a003366:	2c11      	cmp	r4, #17
1a003368:	d9f2      	bls.n	1a003350 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00336a:	b00a      	add	sp, #40	; 0x28
1a00336c:	bd70      	pop	{r4, r5, r6, pc}
1a00336e:	bf00      	nop
1a003370:	40050000 	.word	0x40050000
1a003374:	068e7780 	.word	0x068e7780
1a003378:	1a004e04 	.word	0x1a004e04

1a00337c <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a00337c:	4770      	bx	lr
1a00337e:	Address 0x000000001a00337e is out of bounds.


1a003380 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003380:	2901      	cmp	r1, #1
1a003382:	d000      	beq.n	1a003386 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003384:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003386:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00338a:	0082      	lsls	r2, r0, #2
1a00338c:	4b03      	ldr	r3, [pc, #12]	; (1a00339c <Chip_I2C_EventHandler+0x1c>)
1a00338e:	4413      	add	r3, r2
1a003390:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003392:	7d13      	ldrb	r3, [r2, #20]
1a003394:	b2db      	uxtb	r3, r3
1a003396:	2b04      	cmp	r3, #4
1a003398:	d0fb      	beq.n	1a003392 <Chip_I2C_EventHandler+0x12>
1a00339a:	e7f3      	b.n	1a003384 <Chip_I2C_EventHandler+0x4>
1a00339c:	10000008 	.word	0x10000008

1a0033a0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0033a0:	b570      	push	{r4, r5, r6, lr}
1a0033a2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0033a4:	4e06      	ldr	r6, [pc, #24]	; (1a0033c0 <Chip_I2C_Init+0x20>)
1a0033a6:	00c4      	lsls	r4, r0, #3
1a0033a8:	1a22      	subs	r2, r4, r0
1a0033aa:	0093      	lsls	r3, r2, #2
1a0033ac:	4433      	add	r3, r6
1a0033ae:	8898      	ldrh	r0, [r3, #4]
1a0033b0:	f7ff fefa 	bl	1a0031a8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0033b4:	1b64      	subs	r4, r4, r5
1a0033b6:	00a3      	lsls	r3, r4, #2
1a0033b8:	58f3      	ldr	r3, [r6, r3]
1a0033ba:	226c      	movs	r2, #108	; 0x6c
1a0033bc:	619a      	str	r2, [r3, #24]
}
1a0033be:	bd70      	pop	{r4, r5, r6, pc}
1a0033c0:	10000008 	.word	0x10000008

1a0033c4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0033c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0033c8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0033ca:	4e0b      	ldr	r6, [pc, #44]	; (1a0033f8 <Chip_I2C_SetClockRate+0x34>)
1a0033cc:	00c5      	lsls	r5, r0, #3
1a0033ce:	1a2b      	subs	r3, r5, r0
1a0033d0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0033d4:	eb06 0308 	add.w	r3, r6, r8
1a0033d8:	8898      	ldrh	r0, [r3, #4]
1a0033da:	f7ff feff 	bl	1a0031dc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0033de:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0033e2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0033e6:	0842      	lsrs	r2, r0, #1
1a0033e8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0033ea:	f856 3008 	ldr.w	r3, [r6, r8]
1a0033ee:	691a      	ldr	r2, [r3, #16]
1a0033f0:	1a80      	subs	r0, r0, r2
1a0033f2:	6158      	str	r0, [r3, #20]
}
1a0033f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0033f8:	10000008 	.word	0x10000008

1a0033fc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0033fc:	4b03      	ldr	r3, [pc, #12]	; (1a00340c <Chip_SSP_GetClockIndex+0x10>)
1a0033fe:	4298      	cmp	r0, r3
1a003400:	d001      	beq.n	1a003406 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003402:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003404:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003406:	20a5      	movs	r0, #165	; 0xa5
1a003408:	4770      	bx	lr
1a00340a:	bf00      	nop
1a00340c:	400c5000 	.word	0x400c5000

1a003410 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003410:	4b04      	ldr	r3, [pc, #16]	; (1a003424 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003412:	4298      	cmp	r0, r3
1a003414:	d002      	beq.n	1a00341c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003416:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00341a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00341c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003420:	4770      	bx	lr
1a003422:	bf00      	nop
1a003424:	400c5000 	.word	0x400c5000

1a003428 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003428:	6803      	ldr	r3, [r0, #0]
1a00342a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00342e:	0209      	lsls	r1, r1, #8
1a003430:	b289      	uxth	r1, r1
1a003432:	4319      	orrs	r1, r3
1a003434:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003436:	6102      	str	r2, [r0, #16]
}
1a003438:	4770      	bx	lr

1a00343a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00343a:	b570      	push	{r4, r5, r6, lr}
1a00343c:	4606      	mov	r6, r0
1a00343e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003440:	f7ff ffe6 	bl	1a003410 <Chip_SSP_GetPeriphClockIndex>
1a003444:	f7ff feca 	bl	1a0031dc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003448:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00344a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00344e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003450:	e000      	b.n	1a003454 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003452:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003454:	42ab      	cmp	r3, r5
1a003456:	d90b      	bls.n	1a003470 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003458:	1c4c      	adds	r4, r1, #1
1a00345a:	fb02 f304 	mul.w	r3, r2, r4
1a00345e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003462:	429d      	cmp	r5, r3
1a003464:	d2f6      	bcs.n	1a003454 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003466:	2cff      	cmp	r4, #255	; 0xff
1a003468:	d9f3      	bls.n	1a003452 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00346a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00346c:	2100      	movs	r1, #0
1a00346e:	e7f1      	b.n	1a003454 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003470:	4630      	mov	r0, r6
1a003472:	f7ff ffd9 	bl	1a003428 <Chip_SSP_SetClockRate>
}
1a003476:	bd70      	pop	{r4, r5, r6, pc}

1a003478 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003478:	b510      	push	{r4, lr}
1a00347a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00347c:	f7ff ffbe 	bl	1a0033fc <Chip_SSP_GetClockIndex>
1a003480:	f7ff fe92 	bl	1a0031a8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003484:	4620      	mov	r0, r4
1a003486:	f7ff ffc3 	bl	1a003410 <Chip_SSP_GetPeriphClockIndex>
1a00348a:	f7ff fe8d 	bl	1a0031a8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00348e:	6863      	ldr	r3, [r4, #4]
1a003490:	f023 0304 	bic.w	r3, r3, #4
1a003494:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003496:	6823      	ldr	r3, [r4, #0]
1a003498:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00349c:	f043 0307 	orr.w	r3, r3, #7
1a0034a0:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0034a2:	4902      	ldr	r1, [pc, #8]	; (1a0034ac <Chip_SSP_Init+0x34>)
1a0034a4:	4620      	mov	r0, r4
1a0034a6:	f7ff ffc8 	bl	1a00343a <Chip_SSP_SetBitRate>
}
1a0034aa:	bd10      	pop	{r4, pc}
1a0034ac:	000186a0 	.word	0x000186a0

1a0034b0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0034b0:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0034b2:	4a0b      	ldr	r2, [pc, #44]	; (1a0034e0 <SystemInit+0x30>)
1a0034b4:	4b0b      	ldr	r3, [pc, #44]	; (1a0034e4 <SystemInit+0x34>)
1a0034b6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0034b8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0034bc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0034be:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0034c2:	2b20      	cmp	r3, #32
1a0034c4:	d004      	beq.n	1a0034d0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0034c6:	f7ff fa9f 	bl	1a002a08 <Board_SystemInit>
   Board_Init();
1a0034ca:	f7ff fa25 	bl	1a002918 <Board_Init>
}
1a0034ce:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0034d0:	4a04      	ldr	r2, [pc, #16]	; (1a0034e4 <SystemInit+0x34>)
1a0034d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0034d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0034da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0034de:	e7f2      	b.n	1a0034c6 <SystemInit+0x16>
1a0034e0:	1a000000 	.word	0x1a000000
1a0034e4:	e000ed00 	.word	0xe000ed00

1a0034e8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0034e8:	4b04      	ldr	r3, [pc, #16]	; (1a0034fc <cyclesCounterInit+0x14>)
1a0034ea:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0034ec:	4a04      	ldr	r2, [pc, #16]	; (1a003500 <cyclesCounterInit+0x18>)
1a0034ee:	6813      	ldr	r3, [r2, #0]
1a0034f0:	f043 0301 	orr.w	r3, r3, #1
1a0034f4:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0034f6:	2001      	movs	r0, #1
1a0034f8:	4770      	bx	lr
1a0034fa:	bf00      	nop
1a0034fc:	10000040 	.word	0x10000040
1a003500:	e0001000 	.word	0xe0001000

1a003504 <uartProcessIRQ>:
{
1a003504:	b570      	push	{r4, r5, r6, lr}
1a003506:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a003508:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a00350c:	0093      	lsls	r3, r2, #2
1a00350e:	4a1f      	ldr	r2, [pc, #124]	; (1a00358c <uartProcessIRQ+0x88>)
1a003510:	58d6      	ldr	r6, [r2, r3]
	return pUART->LSR;
1a003512:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a003514:	b2ed      	uxtb	r5, r5
1a003516:	f015 0f01 	tst.w	r5, #1
1a00351a:	d009      	beq.n	1a003530 <uartProcessIRQ+0x2c>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00351c:	b920      	cbnz	r0, 1a003528 <uartProcessIRQ+0x24>
1a00351e:	4b1c      	ldr	r3, [pc, #112]	; (1a003590 <uartProcessIRQ+0x8c>)
1a003520:	681b      	ldr	r3, [r3, #0]
1a003522:	b10b      	cbz	r3, 1a003528 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a003524:	2000      	movs	r0, #0
1a003526:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003528:	2c03      	cmp	r4, #3
1a00352a:	d013      	beq.n	1a003554 <uartProcessIRQ+0x50>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00352c:	2c05      	cmp	r4, #5
1a00352e:	d018      	beq.n	1a003562 <uartProcessIRQ+0x5e>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a003530:	f015 0f20 	tst.w	r5, #32
1a003534:	d00d      	beq.n	1a003552 <uartProcessIRQ+0x4e>
	return pUART->IER;
1a003536:	6873      	ldr	r3, [r6, #4]
1a003538:	f013 0f02 	tst.w	r3, #2
1a00353c:	d009      	beq.n	1a003552 <uartProcessIRQ+0x4e>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a00353e:	b924      	cbnz	r4, 1a00354a <uartProcessIRQ+0x46>
1a003540:	4b14      	ldr	r3, [pc, #80]	; (1a003594 <uartProcessIRQ+0x90>)
1a003542:	681b      	ldr	r3, [r3, #0]
1a003544:	b10b      	cbz	r3, 1a00354a <uartProcessIRQ+0x46>
         (*txIsrCallbackUART0)(0);
1a003546:	2000      	movs	r0, #0
1a003548:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a00354a:	2c03      	cmp	r4, #3
1a00354c:	d010      	beq.n	1a003570 <uartProcessIRQ+0x6c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00354e:	2c05      	cmp	r4, #5
1a003550:	d015      	beq.n	1a00357e <uartProcessIRQ+0x7a>
}
1a003552:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a003554:	4b10      	ldr	r3, [pc, #64]	; (1a003598 <uartProcessIRQ+0x94>)
1a003556:	681b      	ldr	r3, [r3, #0]
1a003558:	2b00      	cmp	r3, #0
1a00355a:	d0e7      	beq.n	1a00352c <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART2)(0);
1a00355c:	2000      	movs	r0, #0
1a00355e:	4798      	blx	r3
1a003560:	e7e4      	b.n	1a00352c <uartProcessIRQ+0x28>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a003562:	4b0e      	ldr	r3, [pc, #56]	; (1a00359c <uartProcessIRQ+0x98>)
1a003564:	681b      	ldr	r3, [r3, #0]
1a003566:	2b00      	cmp	r3, #0
1a003568:	d0e2      	beq.n	1a003530 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART3)(0);
1a00356a:	2000      	movs	r0, #0
1a00356c:	4798      	blx	r3
1a00356e:	e7df      	b.n	1a003530 <uartProcessIRQ+0x2c>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003570:	4b0b      	ldr	r3, [pc, #44]	; (1a0035a0 <uartProcessIRQ+0x9c>)
1a003572:	681b      	ldr	r3, [r3, #0]
1a003574:	2b00      	cmp	r3, #0
1a003576:	d0ea      	beq.n	1a00354e <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART2)(0);
1a003578:	2000      	movs	r0, #0
1a00357a:	4798      	blx	r3
1a00357c:	e7e7      	b.n	1a00354e <uartProcessIRQ+0x4a>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00357e:	4b09      	ldr	r3, [pc, #36]	; (1a0035a4 <uartProcessIRQ+0xa0>)
1a003580:	681b      	ldr	r3, [r3, #0]
1a003582:	2b00      	cmp	r3, #0
1a003584:	d0e5      	beq.n	1a003552 <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART3)(0);
1a003586:	2000      	movs	r0, #0
1a003588:	4798      	blx	r3
}
1a00358a:	e7e2      	b.n	1a003552 <uartProcessIRQ+0x4e>
1a00358c:	1a004e4c 	.word	0x1a004e4c
1a003590:	10002324 	.word	0x10002324
1a003594:	10002330 	.word	0x10002330
1a003598:	10002328 	.word	0x10002328
1a00359c:	1000232c 	.word	0x1000232c
1a0035a0:	10002334 	.word	0x10002334
1a0035a4:	10002338 	.word	0x10002338

1a0035a8 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0035a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0035ac:	0083      	lsls	r3, r0, #2
1a0035ae:	4a03      	ldr	r2, [pc, #12]	; (1a0035bc <uartTxReady+0x14>)
1a0035b0:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a0035b2:	6958      	ldr	r0, [r3, #20]
}
1a0035b4:	f000 0020 	and.w	r0, r0, #32
1a0035b8:	4770      	bx	lr
1a0035ba:	bf00      	nop
1a0035bc:	1a004e4c 	.word	0x1a004e4c

1a0035c0 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0035c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0035c4:	0083      	lsls	r3, r0, #2
1a0035c6:	4a02      	ldr	r2, [pc, #8]	; (1a0035d0 <uartTxWrite+0x10>)
1a0035c8:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0035ca:	6019      	str	r1, [r3, #0]
}
1a0035cc:	4770      	bx	lr
1a0035ce:	bf00      	nop
1a0035d0:	1a004e4c 	.word	0x1a004e4c

1a0035d4 <uartInit>:
{
1a0035d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0035d8:	4680      	mov	r8, r0
1a0035da:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0035dc:	4c19      	ldr	r4, [pc, #100]	; (1a003644 <uartInit+0x70>)
1a0035de:	0045      	lsls	r5, r0, #1
1a0035e0:	182a      	adds	r2, r5, r0
1a0035e2:	0093      	lsls	r3, r2, #2
1a0035e4:	18e6      	adds	r6, r4, r3
1a0035e6:	58e7      	ldr	r7, [r4, r3]
1a0035e8:	4638      	mov	r0, r7
1a0035ea:	f7ff fa29 	bl	1a002a40 <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0035ee:	4649      	mov	r1, r9
1a0035f0:	4638      	mov	r0, r7
1a0035f2:	f7ff fa4f 	bl	1a002a94 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0035f6:	2307      	movs	r3, #7
1a0035f8:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0035fa:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a0035fc:	2301      	movs	r3, #1
1a0035fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003600:	7930      	ldrb	r0, [r6, #4]
1a003602:	7973      	ldrb	r3, [r6, #5]
1a003604:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003606:	f042 0218 	orr.w	r2, r2, #24
1a00360a:	490f      	ldr	r1, [pc, #60]	; (1a003648 <uartInit+0x74>)
1a00360c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003614:	79f0      	ldrb	r0, [r6, #7]
1a003616:	7a33      	ldrb	r3, [r6, #8]
1a003618:	7a72      	ldrb	r2, [r6, #9]
1a00361a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00361e:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a003626:	f1b8 0f01 	cmp.w	r8, #1
1a00362a:	d001      	beq.n	1a003630 <uartInit+0x5c>
}
1a00362c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003630:	4a06      	ldr	r2, [pc, #24]	; (1a00364c <uartInit+0x78>)
1a003632:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003634:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003638:	64d3      	str	r3, [r2, #76]	; 0x4c
1a00363a:	221a      	movs	r2, #26
1a00363c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003640:	e7f4      	b.n	1a00362c <uartInit+0x58>
1a003642:	bf00      	nop
1a003644:	1a004e4c 	.word	0x1a004e4c
1a003648:	40086000 	.word	0x40086000
1a00364c:	40081000 	.word	0x40081000

1a003650 <uartWriteByte>:
{
1a003650:	b538      	push	{r3, r4, r5, lr}
1a003652:	4604      	mov	r4, r0
1a003654:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a003656:	4620      	mov	r0, r4
1a003658:	f7ff ffa6 	bl	1a0035a8 <uartTxReady>
1a00365c:	2800      	cmp	r0, #0
1a00365e:	d0fa      	beq.n	1a003656 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a003660:	4629      	mov	r1, r5
1a003662:	4620      	mov	r0, r4
1a003664:	f7ff ffac 	bl	1a0035c0 <uartTxWrite>
}
1a003668:	bd38      	pop	{r3, r4, r5, pc}

1a00366a <uartWriteString>:
{
1a00366a:	b538      	push	{r3, r4, r5, lr}
1a00366c:	4605      	mov	r5, r0
1a00366e:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003670:	e003      	b.n	1a00367a <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003672:	4628      	mov	r0, r5
1a003674:	f7ff ffec 	bl	1a003650 <uartWriteByte>
      str++;
1a003678:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a00367a:	7821      	ldrb	r1, [r4, #0]
1a00367c:	2900      	cmp	r1, #0
1a00367e:	d1f8      	bne.n	1a003672 <uartWriteString+0x8>
}
1a003680:	bd38      	pop	{r3, r4, r5, pc}

1a003682 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a003682:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a003684:	2003      	movs	r0, #3
1a003686:	f7ff ff3d 	bl	1a003504 <uartProcessIRQ>
}
1a00368a:	bd08      	pop	{r3, pc}

1a00368c <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a00368c:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a00368e:	2005      	movs	r0, #5
1a003690:	f7ff ff38 	bl	1a003504 <uartProcessIRQ>
}
1a003694:	bd08      	pop	{r3, pc}
1a003696:	Address 0x000000001a003696 is out of bounds.


1a003698 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003698:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00369a:	4d0b      	ldr	r5, [pc, #44]	; (1a0036c8 <gpioObtainPinInit+0x30>)
1a00369c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0036a0:	182c      	adds	r4, r5, r0
1a0036a2:	5628      	ldrsb	r0, [r5, r0]
1a0036a4:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0036a6:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0036aa:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0036ac:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0036b0:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0036b2:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0036b6:	9b02      	ldr	r3, [sp, #8]
1a0036b8:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0036ba:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a0036be:	9b03      	ldr	r3, [sp, #12]
1a0036c0:	701a      	strb	r2, [r3, #0]
}
1a0036c2:	bc30      	pop	{r4, r5}
1a0036c4:	4770      	bx	lr
1a0036c6:	bf00      	nop
1a0036c8:	1a004e94 	.word	0x1a004e94

1a0036cc <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0036cc:	f110 0f02 	cmn.w	r0, #2
1a0036d0:	f000 80c7 	beq.w	1a003862 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0036d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0036d8:	f000 80c5 	beq.w	1a003866 <gpioInit+0x19a>
{
1a0036dc:	b570      	push	{r4, r5, r6, lr}
1a0036de:	b084      	sub	sp, #16
1a0036e0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0036e2:	2300      	movs	r3, #0
1a0036e4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0036e8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0036ec:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0036f0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0036f4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0036f8:	f10d 030b 	add.w	r3, sp, #11
1a0036fc:	9301      	str	r3, [sp, #4]
1a0036fe:	ab03      	add	r3, sp, #12
1a003700:	9300      	str	r3, [sp, #0]
1a003702:	f10d 030d 	add.w	r3, sp, #13
1a003706:	f10d 020e 	add.w	r2, sp, #14
1a00370a:	f10d 010f 	add.w	r1, sp, #15
1a00370e:	f7ff ffc3 	bl	1a003698 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003712:	2c05      	cmp	r4, #5
1a003714:	f200 80a9 	bhi.w	1a00386a <gpioInit+0x19e>
1a003718:	e8df f004 	tbb	[pc, r4]
1a00371c:	45278109 	.word	0x45278109
1a003720:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003722:	4853      	ldr	r0, [pc, #332]	; (1a003870 <gpioInit+0x1a4>)
1a003724:	f7ff fe2a 	bl	1a00337c <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003728:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00372a:	b004      	add	sp, #16
1a00372c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a00372e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003732:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003736:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00373a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00373e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003742:	494c      	ldr	r1, [pc, #304]	; (1a003874 <gpioInit+0x1a8>)
1a003744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003748:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00374c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003750:	2001      	movs	r0, #1
1a003752:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003756:	4c46      	ldr	r4, [pc, #280]	; (1a003870 <gpioInit+0x1a4>)
1a003758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00375c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003760:	ea22 0201 	bic.w	r2, r2, r1
1a003764:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003768:	e7df      	b.n	1a00372a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00376a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00376e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003772:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003776:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00377a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00377e:	493d      	ldr	r1, [pc, #244]	; (1a003874 <gpioInit+0x1a8>)
1a003780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003784:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003788:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00378c:	2001      	movs	r0, #1
1a00378e:	fa00 f102 	lsl.w	r1, r0, r2
1a003792:	4c37      	ldr	r4, [pc, #220]	; (1a003870 <gpioInit+0x1a4>)
1a003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003798:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00379c:	ea22 0201 	bic.w	r2, r2, r1
1a0037a0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0037a4:	e7c1      	b.n	1a00372a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0037a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0037aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0037ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0037b2:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0037b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0037ba:	492e      	ldr	r1, [pc, #184]	; (1a003874 <gpioInit+0x1a8>)
1a0037bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0037c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0037c8:	2001      	movs	r0, #1
1a0037ca:	fa00 f102 	lsl.w	r1, r0, r2
1a0037ce:	4c28      	ldr	r4, [pc, #160]	; (1a003870 <gpioInit+0x1a4>)
1a0037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0037d4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0037d8:	ea22 0201 	bic.w	r2, r2, r1
1a0037dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0037e0:	e7a3      	b.n	1a00372a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0037e2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0037e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0037ea:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0037ee:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0037f2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0037f6:	491f      	ldr	r1, [pc, #124]	; (1a003874 <gpioInit+0x1a8>)
1a0037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0037fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003800:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003804:	2001      	movs	r0, #1
1a003806:	fa00 f102 	lsl.w	r1, r0, r2
1a00380a:	4c19      	ldr	r4, [pc, #100]	; (1a003870 <gpioInit+0x1a4>)
1a00380c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003810:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003814:	ea22 0201 	bic.w	r2, r2, r1
1a003818:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00381c:	e785      	b.n	1a00372a <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00381e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003822:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003826:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00382a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00382e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003832:	4910      	ldr	r1, [pc, #64]	; (1a003874 <gpioInit+0x1a8>)
1a003834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003838:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00383c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003840:	2001      	movs	r0, #1
1a003842:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003846:	4b0a      	ldr	r3, [pc, #40]	; (1a003870 <gpioInit+0x1a4>)
1a003848:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00384c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003850:	4331      	orrs	r1, r6
1a003852:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003856:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003858:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00385c:	2100      	movs	r1, #0
1a00385e:	5499      	strb	r1, [r3, r2]
1a003860:	e763      	b.n	1a00372a <gpioInit+0x5e>
	  return FALSE;
1a003862:	2000      	movs	r0, #0
1a003864:	4770      	bx	lr
	  return FALSE;
1a003866:	2000      	movs	r0, #0
}
1a003868:	4770      	bx	lr
      ret_val = 0;
1a00386a:	2000      	movs	r0, #0
1a00386c:	e75d      	b.n	1a00372a <gpioInit+0x5e>
1a00386e:	bf00      	nop
1a003870:	400f4000 	.word	0x400f4000
1a003874:	40086000 	.word	0x40086000

1a003878 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a003878:	f110 0f02 	cmn.w	r0, #2
1a00387c:	d02d      	beq.n	1a0038da <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00387e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003882:	d02c      	beq.n	1a0038de <gpioWrite+0x66>
{
1a003884:	b510      	push	{r4, lr}
1a003886:	b084      	sub	sp, #16
1a003888:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00388a:	2300      	movs	r3, #0
1a00388c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003890:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003894:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003898:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00389c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0038a0:	f10d 030b 	add.w	r3, sp, #11
1a0038a4:	9301      	str	r3, [sp, #4]
1a0038a6:	ab03      	add	r3, sp, #12
1a0038a8:	9300      	str	r3, [sp, #0]
1a0038aa:	f10d 030d 	add.w	r3, sp, #13
1a0038ae:	f10d 020e 	add.w	r2, sp, #14
1a0038b2:	f10d 010f 	add.w	r1, sp, #15
1a0038b6:	f7ff feef 	bl	1a003698 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0038ba:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0038be:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0038c2:	1c21      	adds	r1, r4, #0
1a0038c4:	bf18      	it	ne
1a0038c6:	2101      	movne	r1, #1
1a0038c8:	015b      	lsls	r3, r3, #5
1a0038ca:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0038ce:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0038d2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0038d4:	2001      	movs	r0, #1
}
1a0038d6:	b004      	add	sp, #16
1a0038d8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0038da:	2000      	movs	r0, #0
1a0038dc:	4770      	bx	lr
	  return FALSE;
1a0038de:	2000      	movs	r0, #0
}
1a0038e0:	4770      	bx	lr

1a0038e2 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0038e2:	f110 0f02 	cmn.w	r0, #2
1a0038e6:	d02c      	beq.n	1a003942 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0038e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0038ec:	d02b      	beq.n	1a003946 <gpioRead+0x64>
{
1a0038ee:	b500      	push	{lr}
1a0038f0:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0038f2:	2300      	movs	r3, #0
1a0038f4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0038f8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0038fc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003900:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003904:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003908:	f10d 030b 	add.w	r3, sp, #11
1a00390c:	9301      	str	r3, [sp, #4]
1a00390e:	ab03      	add	r3, sp, #12
1a003910:	9300      	str	r3, [sp, #0]
1a003912:	f10d 030d 	add.w	r3, sp, #13
1a003916:	f10d 020e 	add.w	r2, sp, #14
1a00391a:	f10d 010f 	add.w	r1, sp, #15
1a00391e:	f7ff febb 	bl	1a003698 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003922:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003926:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a00392a:	015b      	lsls	r3, r3, #5
1a00392c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003930:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003934:	5c98      	ldrb	r0, [r3, r2]
1a003936:	3000      	adds	r0, #0
1a003938:	bf18      	it	ne
1a00393a:	2001      	movne	r0, #1

   return ret_val;
}
1a00393c:	b005      	add	sp, #20
1a00393e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a003942:	2001      	movs	r0, #1
1a003944:	4770      	bx	lr
      return FALSE;
1a003946:	2000      	movs	r0, #0
}
1a003948:	4770      	bx	lr
1a00394a:	Address 0x000000001a00394a is out of bounds.


1a00394c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00394c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00394e:	4b04      	ldr	r3, [pc, #16]	; (1a003960 <USB0_IRQHandler+0x14>)
1a003950:	681b      	ldr	r3, [r3, #0]
1a003952:	681b      	ldr	r3, [r3, #0]
1a003954:	68db      	ldr	r3, [r3, #12]
1a003956:	4a03      	ldr	r2, [pc, #12]	; (1a003964 <USB0_IRQHandler+0x18>)
1a003958:	6810      	ldr	r0, [r2, #0]
1a00395a:	4798      	blx	r3
}
1a00395c:	bd08      	pop	{r3, pc}
1a00395e:	bf00      	nop
1a003960:	100023dc 	.word	0x100023dc
1a003964:	1000233c 	.word	0x1000233c

1a003968 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003968:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00396a:	f7ff f98b 	bl	1a002c84 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00396e:	4b18      	ldr	r3, [pc, #96]	; (1a0039d0 <boardInit+0x68>)
1a003970:	6818      	ldr	r0, [r3, #0]
1a003972:	f7ff fdb9 	bl	1a0034e8 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a003976:	2105      	movs	r1, #5
1a003978:	2000      	movs	r0, #0
1a00397a:	f7ff fea7 	bl	1a0036cc <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00397e:	2100      	movs	r1, #0
1a003980:	2024      	movs	r0, #36	; 0x24
1a003982:	f7ff fea3 	bl	1a0036cc <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a003986:	2100      	movs	r1, #0
1a003988:	2025      	movs	r0, #37	; 0x25
1a00398a:	f7ff fe9f 	bl	1a0036cc <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00398e:	2100      	movs	r1, #0
1a003990:	2026      	movs	r0, #38	; 0x26
1a003992:	f7ff fe9b 	bl	1a0036cc <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a003996:	2100      	movs	r1, #0
1a003998:	2027      	movs	r0, #39	; 0x27
1a00399a:	f7ff fe97 	bl	1a0036cc <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00399e:	2101      	movs	r1, #1
1a0039a0:	2028      	movs	r0, #40	; 0x28
1a0039a2:	f7ff fe93 	bl	1a0036cc <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a0039a6:	2101      	movs	r1, #1
1a0039a8:	2029      	movs	r0, #41	; 0x29
1a0039aa:	f7ff fe8f 	bl	1a0036cc <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a0039ae:	2101      	movs	r1, #1
1a0039b0:	202a      	movs	r0, #42	; 0x2a
1a0039b2:	f7ff fe8b 	bl	1a0036cc <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a0039b6:	2101      	movs	r1, #1
1a0039b8:	202b      	movs	r0, #43	; 0x2b
1a0039ba:	f7ff fe87 	bl	1a0036cc <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a0039be:	2101      	movs	r1, #1
1a0039c0:	202c      	movs	r0, #44	; 0x2c
1a0039c2:	f7ff fe83 	bl	1a0036cc <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a0039c6:	2101      	movs	r1, #1
1a0039c8:	202d      	movs	r0, #45	; 0x2d
1a0039ca:	f7ff fe7f 	bl	1a0036cc <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a0039ce:	bd08      	pop	{r3, pc}
1a0039d0:	100023d8 	.word	0x100023d8

1a0039d4 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a0039d4:	b508      	push	{r3, lr}
1a0039d6:	460b      	mov	r3, r1
   *printer = uart;
1a0039d8:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a0039da:	4611      	mov	r1, r2
1a0039dc:	4618      	mov	r0, r3
1a0039de:	f7ff fdf9 	bl	1a0035d4 <uartInit>
}
1a0039e2:	bd08      	pop	{r3, pc}

1a0039e4 <printString>:
}

// Print String

void printString( print_t printer, const char* string )
{
1a0039e4:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a0039e6:	f7ff fe40 	bl	1a00366a <uartWriteString>
}
1a0039ea:	bd08      	pop	{r3, pc}

1a0039ec <printEnter>:

void printEnter( print_t printer )
{
1a0039ec:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a0039ee:	4902      	ldr	r1, [pc, #8]	; (1a0039f8 <printEnter+0xc>)
1a0039f0:	f7ff fe3b 	bl	1a00366a <uartWriteString>
}
1a0039f4:	bd08      	pop	{r3, pc}
1a0039f6:	bf00      	nop
1a0039f8:	1a004cb8 	.word	0x1a004cb8

1a0039fc <__aeabi_uldivmod>:
1a0039fc:	b953      	cbnz	r3, 1a003a14 <__aeabi_uldivmod+0x18>
1a0039fe:	b94a      	cbnz	r2, 1a003a14 <__aeabi_uldivmod+0x18>
1a003a00:	2900      	cmp	r1, #0
1a003a02:	bf08      	it	eq
1a003a04:	2800      	cmpeq	r0, #0
1a003a06:	bf1c      	itt	ne
1a003a08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a003a0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a003a10:	f000 b972 	b.w	1a003cf8 <__aeabi_idiv0>
1a003a14:	f1ad 0c08 	sub.w	ip, sp, #8
1a003a18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a003a1c:	f000 f806 	bl	1a003a2c <__udivmoddi4>
1a003a20:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a003a28:	b004      	add	sp, #16
1a003a2a:	4770      	bx	lr

1a003a2c <__udivmoddi4>:
1a003a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003a30:	9e08      	ldr	r6, [sp, #32]
1a003a32:	4604      	mov	r4, r0
1a003a34:	4688      	mov	r8, r1
1a003a36:	2b00      	cmp	r3, #0
1a003a38:	d14b      	bne.n	1a003ad2 <__udivmoddi4+0xa6>
1a003a3a:	428a      	cmp	r2, r1
1a003a3c:	4615      	mov	r5, r2
1a003a3e:	d967      	bls.n	1a003b10 <__udivmoddi4+0xe4>
1a003a40:	fab2 f282 	clz	r2, r2
1a003a44:	b14a      	cbz	r2, 1a003a5a <__udivmoddi4+0x2e>
1a003a46:	f1c2 0720 	rsb	r7, r2, #32
1a003a4a:	fa01 f302 	lsl.w	r3, r1, r2
1a003a4e:	fa20 f707 	lsr.w	r7, r0, r7
1a003a52:	4095      	lsls	r5, r2
1a003a54:	ea47 0803 	orr.w	r8, r7, r3
1a003a58:	4094      	lsls	r4, r2
1a003a5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003a5e:	0c23      	lsrs	r3, r4, #16
1a003a60:	fbb8 f7fe 	udiv	r7, r8, lr
1a003a64:	fa1f fc85 	uxth.w	ip, r5
1a003a68:	fb0e 8817 	mls	r8, lr, r7, r8
1a003a6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003a70:	fb07 f10c 	mul.w	r1, r7, ip
1a003a74:	4299      	cmp	r1, r3
1a003a76:	d909      	bls.n	1a003a8c <__udivmoddi4+0x60>
1a003a78:	18eb      	adds	r3, r5, r3
1a003a7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a003a7e:	f080 811b 	bcs.w	1a003cb8 <__udivmoddi4+0x28c>
1a003a82:	4299      	cmp	r1, r3
1a003a84:	f240 8118 	bls.w	1a003cb8 <__udivmoddi4+0x28c>
1a003a88:	3f02      	subs	r7, #2
1a003a8a:	442b      	add	r3, r5
1a003a8c:	1a5b      	subs	r3, r3, r1
1a003a8e:	b2a4      	uxth	r4, r4
1a003a90:	fbb3 f0fe 	udiv	r0, r3, lr
1a003a94:	fb0e 3310 	mls	r3, lr, r0, r3
1a003a98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003a9c:	fb00 fc0c 	mul.w	ip, r0, ip
1a003aa0:	45a4      	cmp	ip, r4
1a003aa2:	d909      	bls.n	1a003ab8 <__udivmoddi4+0x8c>
1a003aa4:	192c      	adds	r4, r5, r4
1a003aa6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003aaa:	f080 8107 	bcs.w	1a003cbc <__udivmoddi4+0x290>
1a003aae:	45a4      	cmp	ip, r4
1a003ab0:	f240 8104 	bls.w	1a003cbc <__udivmoddi4+0x290>
1a003ab4:	3802      	subs	r0, #2
1a003ab6:	442c      	add	r4, r5
1a003ab8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a003abc:	eba4 040c 	sub.w	r4, r4, ip
1a003ac0:	2700      	movs	r7, #0
1a003ac2:	b11e      	cbz	r6, 1a003acc <__udivmoddi4+0xa0>
1a003ac4:	40d4      	lsrs	r4, r2
1a003ac6:	2300      	movs	r3, #0
1a003ac8:	e9c6 4300 	strd	r4, r3, [r6]
1a003acc:	4639      	mov	r1, r7
1a003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003ad2:	428b      	cmp	r3, r1
1a003ad4:	d909      	bls.n	1a003aea <__udivmoddi4+0xbe>
1a003ad6:	2e00      	cmp	r6, #0
1a003ad8:	f000 80eb 	beq.w	1a003cb2 <__udivmoddi4+0x286>
1a003adc:	2700      	movs	r7, #0
1a003ade:	e9c6 0100 	strd	r0, r1, [r6]
1a003ae2:	4638      	mov	r0, r7
1a003ae4:	4639      	mov	r1, r7
1a003ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003aea:	fab3 f783 	clz	r7, r3
1a003aee:	2f00      	cmp	r7, #0
1a003af0:	d147      	bne.n	1a003b82 <__udivmoddi4+0x156>
1a003af2:	428b      	cmp	r3, r1
1a003af4:	d302      	bcc.n	1a003afc <__udivmoddi4+0xd0>
1a003af6:	4282      	cmp	r2, r0
1a003af8:	f200 80fa 	bhi.w	1a003cf0 <__udivmoddi4+0x2c4>
1a003afc:	1a84      	subs	r4, r0, r2
1a003afe:	eb61 0303 	sbc.w	r3, r1, r3
1a003b02:	2001      	movs	r0, #1
1a003b04:	4698      	mov	r8, r3
1a003b06:	2e00      	cmp	r6, #0
1a003b08:	d0e0      	beq.n	1a003acc <__udivmoddi4+0xa0>
1a003b0a:	e9c6 4800 	strd	r4, r8, [r6]
1a003b0e:	e7dd      	b.n	1a003acc <__udivmoddi4+0xa0>
1a003b10:	b902      	cbnz	r2, 1a003b14 <__udivmoddi4+0xe8>
1a003b12:	deff      	udf	#255	; 0xff
1a003b14:	fab2 f282 	clz	r2, r2
1a003b18:	2a00      	cmp	r2, #0
1a003b1a:	f040 808f 	bne.w	1a003c3c <__udivmoddi4+0x210>
1a003b1e:	1b49      	subs	r1, r1, r5
1a003b20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003b24:	fa1f f885 	uxth.w	r8, r5
1a003b28:	2701      	movs	r7, #1
1a003b2a:	fbb1 fcfe 	udiv	ip, r1, lr
1a003b2e:	0c23      	lsrs	r3, r4, #16
1a003b30:	fb0e 111c 	mls	r1, lr, ip, r1
1a003b34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003b38:	fb08 f10c 	mul.w	r1, r8, ip
1a003b3c:	4299      	cmp	r1, r3
1a003b3e:	d907      	bls.n	1a003b50 <__udivmoddi4+0x124>
1a003b40:	18eb      	adds	r3, r5, r3
1a003b42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a003b46:	d202      	bcs.n	1a003b4e <__udivmoddi4+0x122>
1a003b48:	4299      	cmp	r1, r3
1a003b4a:	f200 80cd 	bhi.w	1a003ce8 <__udivmoddi4+0x2bc>
1a003b4e:	4684      	mov	ip, r0
1a003b50:	1a59      	subs	r1, r3, r1
1a003b52:	b2a3      	uxth	r3, r4
1a003b54:	fbb1 f0fe 	udiv	r0, r1, lr
1a003b58:	fb0e 1410 	mls	r4, lr, r0, r1
1a003b5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a003b60:	fb08 f800 	mul.w	r8, r8, r0
1a003b64:	45a0      	cmp	r8, r4
1a003b66:	d907      	bls.n	1a003b78 <__udivmoddi4+0x14c>
1a003b68:	192c      	adds	r4, r5, r4
1a003b6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003b6e:	d202      	bcs.n	1a003b76 <__udivmoddi4+0x14a>
1a003b70:	45a0      	cmp	r8, r4
1a003b72:	f200 80b6 	bhi.w	1a003ce2 <__udivmoddi4+0x2b6>
1a003b76:	4618      	mov	r0, r3
1a003b78:	eba4 0408 	sub.w	r4, r4, r8
1a003b7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a003b80:	e79f      	b.n	1a003ac2 <__udivmoddi4+0x96>
1a003b82:	f1c7 0c20 	rsb	ip, r7, #32
1a003b86:	40bb      	lsls	r3, r7
1a003b88:	fa22 fe0c 	lsr.w	lr, r2, ip
1a003b8c:	ea4e 0e03 	orr.w	lr, lr, r3
1a003b90:	fa01 f407 	lsl.w	r4, r1, r7
1a003b94:	fa20 f50c 	lsr.w	r5, r0, ip
1a003b98:	fa21 f30c 	lsr.w	r3, r1, ip
1a003b9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a003ba0:	4325      	orrs	r5, r4
1a003ba2:	fbb3 f9f8 	udiv	r9, r3, r8
1a003ba6:	0c2c      	lsrs	r4, r5, #16
1a003ba8:	fb08 3319 	mls	r3, r8, r9, r3
1a003bac:	fa1f fa8e 	uxth.w	sl, lr
1a003bb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a003bb4:	fb09 f40a 	mul.w	r4, r9, sl
1a003bb8:	429c      	cmp	r4, r3
1a003bba:	fa02 f207 	lsl.w	r2, r2, r7
1a003bbe:	fa00 f107 	lsl.w	r1, r0, r7
1a003bc2:	d90b      	bls.n	1a003bdc <__udivmoddi4+0x1b0>
1a003bc4:	eb1e 0303 	adds.w	r3, lr, r3
1a003bc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a003bcc:	f080 8087 	bcs.w	1a003cde <__udivmoddi4+0x2b2>
1a003bd0:	429c      	cmp	r4, r3
1a003bd2:	f240 8084 	bls.w	1a003cde <__udivmoddi4+0x2b2>
1a003bd6:	f1a9 0902 	sub.w	r9, r9, #2
1a003bda:	4473      	add	r3, lr
1a003bdc:	1b1b      	subs	r3, r3, r4
1a003bde:	b2ad      	uxth	r5, r5
1a003be0:	fbb3 f0f8 	udiv	r0, r3, r8
1a003be4:	fb08 3310 	mls	r3, r8, r0, r3
1a003be8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a003bec:	fb00 fa0a 	mul.w	sl, r0, sl
1a003bf0:	45a2      	cmp	sl, r4
1a003bf2:	d908      	bls.n	1a003c06 <__udivmoddi4+0x1da>
1a003bf4:	eb1e 0404 	adds.w	r4, lr, r4
1a003bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a003bfc:	d26b      	bcs.n	1a003cd6 <__udivmoddi4+0x2aa>
1a003bfe:	45a2      	cmp	sl, r4
1a003c00:	d969      	bls.n	1a003cd6 <__udivmoddi4+0x2aa>
1a003c02:	3802      	subs	r0, #2
1a003c04:	4474      	add	r4, lr
1a003c06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a003c0a:	fba0 8902 	umull	r8, r9, r0, r2
1a003c0e:	eba4 040a 	sub.w	r4, r4, sl
1a003c12:	454c      	cmp	r4, r9
1a003c14:	46c2      	mov	sl, r8
1a003c16:	464b      	mov	r3, r9
1a003c18:	d354      	bcc.n	1a003cc4 <__udivmoddi4+0x298>
1a003c1a:	d051      	beq.n	1a003cc0 <__udivmoddi4+0x294>
1a003c1c:	2e00      	cmp	r6, #0
1a003c1e:	d069      	beq.n	1a003cf4 <__udivmoddi4+0x2c8>
1a003c20:	ebb1 050a 	subs.w	r5, r1, sl
1a003c24:	eb64 0403 	sbc.w	r4, r4, r3
1a003c28:	fa04 fc0c 	lsl.w	ip, r4, ip
1a003c2c:	40fd      	lsrs	r5, r7
1a003c2e:	40fc      	lsrs	r4, r7
1a003c30:	ea4c 0505 	orr.w	r5, ip, r5
1a003c34:	e9c6 5400 	strd	r5, r4, [r6]
1a003c38:	2700      	movs	r7, #0
1a003c3a:	e747      	b.n	1a003acc <__udivmoddi4+0xa0>
1a003c3c:	f1c2 0320 	rsb	r3, r2, #32
1a003c40:	fa20 f703 	lsr.w	r7, r0, r3
1a003c44:	4095      	lsls	r5, r2
1a003c46:	fa01 f002 	lsl.w	r0, r1, r2
1a003c4a:	fa21 f303 	lsr.w	r3, r1, r3
1a003c4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c52:	4338      	orrs	r0, r7
1a003c54:	0c01      	lsrs	r1, r0, #16
1a003c56:	fbb3 f7fe 	udiv	r7, r3, lr
1a003c5a:	fa1f f885 	uxth.w	r8, r5
1a003c5e:	fb0e 3317 	mls	r3, lr, r7, r3
1a003c62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003c66:	fb07 f308 	mul.w	r3, r7, r8
1a003c6a:	428b      	cmp	r3, r1
1a003c6c:	fa04 f402 	lsl.w	r4, r4, r2
1a003c70:	d907      	bls.n	1a003c82 <__udivmoddi4+0x256>
1a003c72:	1869      	adds	r1, r5, r1
1a003c74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a003c78:	d22f      	bcs.n	1a003cda <__udivmoddi4+0x2ae>
1a003c7a:	428b      	cmp	r3, r1
1a003c7c:	d92d      	bls.n	1a003cda <__udivmoddi4+0x2ae>
1a003c7e:	3f02      	subs	r7, #2
1a003c80:	4429      	add	r1, r5
1a003c82:	1acb      	subs	r3, r1, r3
1a003c84:	b281      	uxth	r1, r0
1a003c86:	fbb3 f0fe 	udiv	r0, r3, lr
1a003c8a:	fb0e 3310 	mls	r3, lr, r0, r3
1a003c8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003c92:	fb00 f308 	mul.w	r3, r0, r8
1a003c96:	428b      	cmp	r3, r1
1a003c98:	d907      	bls.n	1a003caa <__udivmoddi4+0x27e>
1a003c9a:	1869      	adds	r1, r5, r1
1a003c9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a003ca0:	d217      	bcs.n	1a003cd2 <__udivmoddi4+0x2a6>
1a003ca2:	428b      	cmp	r3, r1
1a003ca4:	d915      	bls.n	1a003cd2 <__udivmoddi4+0x2a6>
1a003ca6:	3802      	subs	r0, #2
1a003ca8:	4429      	add	r1, r5
1a003caa:	1ac9      	subs	r1, r1, r3
1a003cac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a003cb0:	e73b      	b.n	1a003b2a <__udivmoddi4+0xfe>
1a003cb2:	4637      	mov	r7, r6
1a003cb4:	4630      	mov	r0, r6
1a003cb6:	e709      	b.n	1a003acc <__udivmoddi4+0xa0>
1a003cb8:	4607      	mov	r7, r0
1a003cba:	e6e7      	b.n	1a003a8c <__udivmoddi4+0x60>
1a003cbc:	4618      	mov	r0, r3
1a003cbe:	e6fb      	b.n	1a003ab8 <__udivmoddi4+0x8c>
1a003cc0:	4541      	cmp	r1, r8
1a003cc2:	d2ab      	bcs.n	1a003c1c <__udivmoddi4+0x1f0>
1a003cc4:	ebb8 0a02 	subs.w	sl, r8, r2
1a003cc8:	eb69 020e 	sbc.w	r2, r9, lr
1a003ccc:	3801      	subs	r0, #1
1a003cce:	4613      	mov	r3, r2
1a003cd0:	e7a4      	b.n	1a003c1c <__udivmoddi4+0x1f0>
1a003cd2:	4660      	mov	r0, ip
1a003cd4:	e7e9      	b.n	1a003caa <__udivmoddi4+0x27e>
1a003cd6:	4618      	mov	r0, r3
1a003cd8:	e795      	b.n	1a003c06 <__udivmoddi4+0x1da>
1a003cda:	4667      	mov	r7, ip
1a003cdc:	e7d1      	b.n	1a003c82 <__udivmoddi4+0x256>
1a003cde:	4681      	mov	r9, r0
1a003ce0:	e77c      	b.n	1a003bdc <__udivmoddi4+0x1b0>
1a003ce2:	3802      	subs	r0, #2
1a003ce4:	442c      	add	r4, r5
1a003ce6:	e747      	b.n	1a003b78 <__udivmoddi4+0x14c>
1a003ce8:	f1ac 0c02 	sub.w	ip, ip, #2
1a003cec:	442b      	add	r3, r5
1a003cee:	e72f      	b.n	1a003b50 <__udivmoddi4+0x124>
1a003cf0:	4638      	mov	r0, r7
1a003cf2:	e708      	b.n	1a003b06 <__udivmoddi4+0xda>
1a003cf4:	4637      	mov	r7, r6
1a003cf6:	e6e9      	b.n	1a003acc <__udivmoddi4+0xa0>

1a003cf8 <__aeabi_idiv0>:
1a003cf8:	4770      	bx	lr
1a003cfa:	bf00      	nop

1a003cfc <__sflush_r>:
1a003cfc:	898a      	ldrh	r2, [r1, #12]
1a003cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d02:	4605      	mov	r5, r0
1a003d04:	0710      	lsls	r0, r2, #28
1a003d06:	460c      	mov	r4, r1
1a003d08:	d458      	bmi.n	1a003dbc <__sflush_r+0xc0>
1a003d0a:	684b      	ldr	r3, [r1, #4]
1a003d0c:	2b00      	cmp	r3, #0
1a003d0e:	dc05      	bgt.n	1a003d1c <__sflush_r+0x20>
1a003d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a003d12:	2b00      	cmp	r3, #0
1a003d14:	dc02      	bgt.n	1a003d1c <__sflush_r+0x20>
1a003d16:	2000      	movs	r0, #0
1a003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003d1e:	2e00      	cmp	r6, #0
1a003d20:	d0f9      	beq.n	1a003d16 <__sflush_r+0x1a>
1a003d22:	2300      	movs	r3, #0
1a003d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a003d28:	682f      	ldr	r7, [r5, #0]
1a003d2a:	6a21      	ldr	r1, [r4, #32]
1a003d2c:	602b      	str	r3, [r5, #0]
1a003d2e:	d032      	beq.n	1a003d96 <__sflush_r+0x9a>
1a003d30:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a003d32:	89a3      	ldrh	r3, [r4, #12]
1a003d34:	075a      	lsls	r2, r3, #29
1a003d36:	d505      	bpl.n	1a003d44 <__sflush_r+0x48>
1a003d38:	6863      	ldr	r3, [r4, #4]
1a003d3a:	1ac0      	subs	r0, r0, r3
1a003d3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a003d3e:	b10b      	cbz	r3, 1a003d44 <__sflush_r+0x48>
1a003d40:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003d42:	1ac0      	subs	r0, r0, r3
1a003d44:	2300      	movs	r3, #0
1a003d46:	4602      	mov	r2, r0
1a003d48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a003d4a:	6a21      	ldr	r1, [r4, #32]
1a003d4c:	4628      	mov	r0, r5
1a003d4e:	47b0      	blx	r6
1a003d50:	1c43      	adds	r3, r0, #1
1a003d52:	89a3      	ldrh	r3, [r4, #12]
1a003d54:	d106      	bne.n	1a003d64 <__sflush_r+0x68>
1a003d56:	6829      	ldr	r1, [r5, #0]
1a003d58:	291d      	cmp	r1, #29
1a003d5a:	d848      	bhi.n	1a003dee <__sflush_r+0xf2>
1a003d5c:	4a29      	ldr	r2, [pc, #164]	; (1a003e04 <__sflush_r+0x108>)
1a003d5e:	40ca      	lsrs	r2, r1
1a003d60:	07d6      	lsls	r6, r2, #31
1a003d62:	d544      	bpl.n	1a003dee <__sflush_r+0xf2>
1a003d64:	2200      	movs	r2, #0
1a003d66:	6062      	str	r2, [r4, #4]
1a003d68:	04d9      	lsls	r1, r3, #19
1a003d6a:	6922      	ldr	r2, [r4, #16]
1a003d6c:	6022      	str	r2, [r4, #0]
1a003d6e:	d504      	bpl.n	1a003d7a <__sflush_r+0x7e>
1a003d70:	1c42      	adds	r2, r0, #1
1a003d72:	d101      	bne.n	1a003d78 <__sflush_r+0x7c>
1a003d74:	682b      	ldr	r3, [r5, #0]
1a003d76:	b903      	cbnz	r3, 1a003d7a <__sflush_r+0x7e>
1a003d78:	6560      	str	r0, [r4, #84]	; 0x54
1a003d7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a003d7c:	602f      	str	r7, [r5, #0]
1a003d7e:	2900      	cmp	r1, #0
1a003d80:	d0c9      	beq.n	1a003d16 <__sflush_r+0x1a>
1a003d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003d86:	4299      	cmp	r1, r3
1a003d88:	d002      	beq.n	1a003d90 <__sflush_r+0x94>
1a003d8a:	4628      	mov	r0, r5
1a003d8c:	f000 f968 	bl	1a004060 <_free_r>
1a003d90:	2000      	movs	r0, #0
1a003d92:	6360      	str	r0, [r4, #52]	; 0x34
1a003d94:	e7c0      	b.n	1a003d18 <__sflush_r+0x1c>
1a003d96:	2301      	movs	r3, #1
1a003d98:	4628      	mov	r0, r5
1a003d9a:	47b0      	blx	r6
1a003d9c:	1c41      	adds	r1, r0, #1
1a003d9e:	d1c8      	bne.n	1a003d32 <__sflush_r+0x36>
1a003da0:	682b      	ldr	r3, [r5, #0]
1a003da2:	2b00      	cmp	r3, #0
1a003da4:	d0c5      	beq.n	1a003d32 <__sflush_r+0x36>
1a003da6:	2b1d      	cmp	r3, #29
1a003da8:	d001      	beq.n	1a003dae <__sflush_r+0xb2>
1a003daa:	2b16      	cmp	r3, #22
1a003dac:	d101      	bne.n	1a003db2 <__sflush_r+0xb6>
1a003dae:	602f      	str	r7, [r5, #0]
1a003db0:	e7b1      	b.n	1a003d16 <__sflush_r+0x1a>
1a003db2:	89a3      	ldrh	r3, [r4, #12]
1a003db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003db8:	81a3      	strh	r3, [r4, #12]
1a003dba:	e7ad      	b.n	1a003d18 <__sflush_r+0x1c>
1a003dbc:	690f      	ldr	r7, [r1, #16]
1a003dbe:	2f00      	cmp	r7, #0
1a003dc0:	d0a9      	beq.n	1a003d16 <__sflush_r+0x1a>
1a003dc2:	0793      	lsls	r3, r2, #30
1a003dc4:	680e      	ldr	r6, [r1, #0]
1a003dc6:	bf08      	it	eq
1a003dc8:	694b      	ldreq	r3, [r1, #20]
1a003dca:	600f      	str	r7, [r1, #0]
1a003dcc:	bf18      	it	ne
1a003dce:	2300      	movne	r3, #0
1a003dd0:	eba6 0807 	sub.w	r8, r6, r7
1a003dd4:	608b      	str	r3, [r1, #8]
1a003dd6:	f1b8 0f00 	cmp.w	r8, #0
1a003dda:	dd9c      	ble.n	1a003d16 <__sflush_r+0x1a>
1a003ddc:	4643      	mov	r3, r8
1a003dde:	463a      	mov	r2, r7
1a003de0:	6a21      	ldr	r1, [r4, #32]
1a003de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a003de4:	4628      	mov	r0, r5
1a003de6:	47b0      	blx	r6
1a003de8:	2800      	cmp	r0, #0
1a003dea:	dc06      	bgt.n	1a003dfa <__sflush_r+0xfe>
1a003dec:	89a3      	ldrh	r3, [r4, #12]
1a003dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003df2:	81a3      	strh	r3, [r4, #12]
1a003df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003df8:	e78e      	b.n	1a003d18 <__sflush_r+0x1c>
1a003dfa:	4407      	add	r7, r0
1a003dfc:	eba8 0800 	sub.w	r8, r8, r0
1a003e00:	e7e9      	b.n	1a003dd6 <__sflush_r+0xda>
1a003e02:	bf00      	nop
1a003e04:	20400001 	.word	0x20400001

1a003e08 <_fflush_r>:
1a003e08:	b538      	push	{r3, r4, r5, lr}
1a003e0a:	690b      	ldr	r3, [r1, #16]
1a003e0c:	4605      	mov	r5, r0
1a003e0e:	460c      	mov	r4, r1
1a003e10:	b1db      	cbz	r3, 1a003e4a <_fflush_r+0x42>
1a003e12:	b118      	cbz	r0, 1a003e1c <_fflush_r+0x14>
1a003e14:	6983      	ldr	r3, [r0, #24]
1a003e16:	b90b      	cbnz	r3, 1a003e1c <_fflush_r+0x14>
1a003e18:	f000 f860 	bl	1a003edc <__sinit>
1a003e1c:	4b0c      	ldr	r3, [pc, #48]	; (1a003e50 <_fflush_r+0x48>)
1a003e1e:	429c      	cmp	r4, r3
1a003e20:	d109      	bne.n	1a003e36 <_fflush_r+0x2e>
1a003e22:	686c      	ldr	r4, [r5, #4]
1a003e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003e28:	b17b      	cbz	r3, 1a003e4a <_fflush_r+0x42>
1a003e2a:	4621      	mov	r1, r4
1a003e2c:	4628      	mov	r0, r5
1a003e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003e32:	f7ff bf63 	b.w	1a003cfc <__sflush_r>
1a003e36:	4b07      	ldr	r3, [pc, #28]	; (1a003e54 <_fflush_r+0x4c>)
1a003e38:	429c      	cmp	r4, r3
1a003e3a:	d101      	bne.n	1a003e40 <_fflush_r+0x38>
1a003e3c:	68ac      	ldr	r4, [r5, #8]
1a003e3e:	e7f1      	b.n	1a003e24 <_fflush_r+0x1c>
1a003e40:	4b05      	ldr	r3, [pc, #20]	; (1a003e58 <_fflush_r+0x50>)
1a003e42:	429c      	cmp	r4, r3
1a003e44:	bf08      	it	eq
1a003e46:	68ec      	ldreq	r4, [r5, #12]
1a003e48:	e7ec      	b.n	1a003e24 <_fflush_r+0x1c>
1a003e4a:	2000      	movs	r0, #0
1a003e4c:	bd38      	pop	{r3, r4, r5, pc}
1a003e4e:	bf00      	nop
1a003e50:	1a004f9c 	.word	0x1a004f9c
1a003e54:	1a004fbc 	.word	0x1a004fbc
1a003e58:	1a004f7c 	.word	0x1a004f7c

1a003e5c <std>:
1a003e5c:	2300      	movs	r3, #0
1a003e5e:	b510      	push	{r4, lr}
1a003e60:	4604      	mov	r4, r0
1a003e62:	e9c0 3300 	strd	r3, r3, [r0]
1a003e66:	6083      	str	r3, [r0, #8]
1a003e68:	8181      	strh	r1, [r0, #12]
1a003e6a:	6643      	str	r3, [r0, #100]	; 0x64
1a003e6c:	81c2      	strh	r2, [r0, #14]
1a003e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a003e72:	6183      	str	r3, [r0, #24]
1a003e74:	4619      	mov	r1, r3
1a003e76:	2208      	movs	r2, #8
1a003e78:	305c      	adds	r0, #92	; 0x5c
1a003e7a:	f000 f8e8 	bl	1a00404e <memset>
1a003e7e:	4b05      	ldr	r3, [pc, #20]	; (1a003e94 <std+0x38>)
1a003e80:	6263      	str	r3, [r4, #36]	; 0x24
1a003e82:	4b05      	ldr	r3, [pc, #20]	; (1a003e98 <std+0x3c>)
1a003e84:	62a3      	str	r3, [r4, #40]	; 0x28
1a003e86:	4b05      	ldr	r3, [pc, #20]	; (1a003e9c <std+0x40>)
1a003e88:	62e3      	str	r3, [r4, #44]	; 0x2c
1a003e8a:	4b05      	ldr	r3, [pc, #20]	; (1a003ea0 <std+0x44>)
1a003e8c:	6224      	str	r4, [r4, #32]
1a003e8e:	6323      	str	r3, [r4, #48]	; 0x30
1a003e90:	bd10      	pop	{r4, pc}
1a003e92:	bf00      	nop
1a003e94:	1a0042a9 	.word	0x1a0042a9
1a003e98:	1a0042cb 	.word	0x1a0042cb
1a003e9c:	1a004303 	.word	0x1a004303
1a003ea0:	1a004327 	.word	0x1a004327

1a003ea4 <_cleanup_r>:
1a003ea4:	4901      	ldr	r1, [pc, #4]	; (1a003eac <_cleanup_r+0x8>)
1a003ea6:	f000 b885 	b.w	1a003fb4 <_fwalk_reent>
1a003eaa:	bf00      	nop
1a003eac:	1a003e09 	.word	0x1a003e09

1a003eb0 <__sfmoreglue>:
1a003eb0:	b570      	push	{r4, r5, r6, lr}
1a003eb2:	1e4a      	subs	r2, r1, #1
1a003eb4:	2568      	movs	r5, #104	; 0x68
1a003eb6:	4355      	muls	r5, r2
1a003eb8:	460e      	mov	r6, r1
1a003eba:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a003ebe:	f000 f91d 	bl	1a0040fc <_malloc_r>
1a003ec2:	4604      	mov	r4, r0
1a003ec4:	b140      	cbz	r0, 1a003ed8 <__sfmoreglue+0x28>
1a003ec6:	2100      	movs	r1, #0
1a003ec8:	e9c0 1600 	strd	r1, r6, [r0]
1a003ecc:	300c      	adds	r0, #12
1a003ece:	60a0      	str	r0, [r4, #8]
1a003ed0:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a003ed4:	f000 f8bb 	bl	1a00404e <memset>
1a003ed8:	4620      	mov	r0, r4
1a003eda:	bd70      	pop	{r4, r5, r6, pc}

1a003edc <__sinit>:
1a003edc:	6983      	ldr	r3, [r0, #24]
1a003ede:	b510      	push	{r4, lr}
1a003ee0:	4604      	mov	r4, r0
1a003ee2:	bb33      	cbnz	r3, 1a003f32 <__sinit+0x56>
1a003ee4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a003ee8:	6503      	str	r3, [r0, #80]	; 0x50
1a003eea:	4b12      	ldr	r3, [pc, #72]	; (1a003f34 <__sinit+0x58>)
1a003eec:	4a12      	ldr	r2, [pc, #72]	; (1a003f38 <__sinit+0x5c>)
1a003eee:	681b      	ldr	r3, [r3, #0]
1a003ef0:	6282      	str	r2, [r0, #40]	; 0x28
1a003ef2:	4298      	cmp	r0, r3
1a003ef4:	bf04      	itt	eq
1a003ef6:	2301      	moveq	r3, #1
1a003ef8:	6183      	streq	r3, [r0, #24]
1a003efa:	f000 f81f 	bl	1a003f3c <__sfp>
1a003efe:	6060      	str	r0, [r4, #4]
1a003f00:	4620      	mov	r0, r4
1a003f02:	f000 f81b 	bl	1a003f3c <__sfp>
1a003f06:	60a0      	str	r0, [r4, #8]
1a003f08:	4620      	mov	r0, r4
1a003f0a:	f000 f817 	bl	1a003f3c <__sfp>
1a003f0e:	2200      	movs	r2, #0
1a003f10:	60e0      	str	r0, [r4, #12]
1a003f12:	2104      	movs	r1, #4
1a003f14:	6860      	ldr	r0, [r4, #4]
1a003f16:	f7ff ffa1 	bl	1a003e5c <std>
1a003f1a:	2201      	movs	r2, #1
1a003f1c:	2109      	movs	r1, #9
1a003f1e:	68a0      	ldr	r0, [r4, #8]
1a003f20:	f7ff ff9c 	bl	1a003e5c <std>
1a003f24:	2202      	movs	r2, #2
1a003f26:	2112      	movs	r1, #18
1a003f28:	68e0      	ldr	r0, [r4, #12]
1a003f2a:	f7ff ff97 	bl	1a003e5c <std>
1a003f2e:	2301      	movs	r3, #1
1a003f30:	61a3      	str	r3, [r4, #24]
1a003f32:	bd10      	pop	{r4, pc}
1a003f34:	1a004fdc 	.word	0x1a004fdc
1a003f38:	1a003ea5 	.word	0x1a003ea5

1a003f3c <__sfp>:
1a003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003f3e:	4b1b      	ldr	r3, [pc, #108]	; (1a003fac <__sfp+0x70>)
1a003f40:	681e      	ldr	r6, [r3, #0]
1a003f42:	69b3      	ldr	r3, [r6, #24]
1a003f44:	4607      	mov	r7, r0
1a003f46:	b913      	cbnz	r3, 1a003f4e <__sfp+0x12>
1a003f48:	4630      	mov	r0, r6
1a003f4a:	f7ff ffc7 	bl	1a003edc <__sinit>
1a003f4e:	3648      	adds	r6, #72	; 0x48
1a003f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a003f54:	3b01      	subs	r3, #1
1a003f56:	d503      	bpl.n	1a003f60 <__sfp+0x24>
1a003f58:	6833      	ldr	r3, [r6, #0]
1a003f5a:	b133      	cbz	r3, 1a003f6a <__sfp+0x2e>
1a003f5c:	6836      	ldr	r6, [r6, #0]
1a003f5e:	e7f7      	b.n	1a003f50 <__sfp+0x14>
1a003f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a003f64:	b16d      	cbz	r5, 1a003f82 <__sfp+0x46>
1a003f66:	3468      	adds	r4, #104	; 0x68
1a003f68:	e7f4      	b.n	1a003f54 <__sfp+0x18>
1a003f6a:	2104      	movs	r1, #4
1a003f6c:	4638      	mov	r0, r7
1a003f6e:	f7ff ff9f 	bl	1a003eb0 <__sfmoreglue>
1a003f72:	6030      	str	r0, [r6, #0]
1a003f74:	2800      	cmp	r0, #0
1a003f76:	d1f1      	bne.n	1a003f5c <__sfp+0x20>
1a003f78:	230c      	movs	r3, #12
1a003f7a:	603b      	str	r3, [r7, #0]
1a003f7c:	4604      	mov	r4, r0
1a003f7e:	4620      	mov	r0, r4
1a003f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003f82:	4b0b      	ldr	r3, [pc, #44]	; (1a003fb0 <__sfp+0x74>)
1a003f84:	6665      	str	r5, [r4, #100]	; 0x64
1a003f86:	e9c4 5500 	strd	r5, r5, [r4]
1a003f8a:	60a5      	str	r5, [r4, #8]
1a003f8c:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a003f90:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a003f94:	2208      	movs	r2, #8
1a003f96:	4629      	mov	r1, r5
1a003f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a003f9c:	f000 f857 	bl	1a00404e <memset>
1a003fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a003fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a003fa8:	e7e9      	b.n	1a003f7e <__sfp+0x42>
1a003faa:	bf00      	nop
1a003fac:	1a004fdc 	.word	0x1a004fdc
1a003fb0:	ffff0001 	.word	0xffff0001

1a003fb4 <_fwalk_reent>:
1a003fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003fb8:	4680      	mov	r8, r0
1a003fba:	4689      	mov	r9, r1
1a003fbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a003fc0:	2600      	movs	r6, #0
1a003fc2:	b914      	cbnz	r4, 1a003fca <_fwalk_reent+0x16>
1a003fc4:	4630      	mov	r0, r6
1a003fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003fca:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a003fce:	3f01      	subs	r7, #1
1a003fd0:	d501      	bpl.n	1a003fd6 <_fwalk_reent+0x22>
1a003fd2:	6824      	ldr	r4, [r4, #0]
1a003fd4:	e7f5      	b.n	1a003fc2 <_fwalk_reent+0xe>
1a003fd6:	89ab      	ldrh	r3, [r5, #12]
1a003fd8:	2b01      	cmp	r3, #1
1a003fda:	d907      	bls.n	1a003fec <_fwalk_reent+0x38>
1a003fdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a003fe0:	3301      	adds	r3, #1
1a003fe2:	d003      	beq.n	1a003fec <_fwalk_reent+0x38>
1a003fe4:	4629      	mov	r1, r5
1a003fe6:	4640      	mov	r0, r8
1a003fe8:	47c8      	blx	r9
1a003fea:	4306      	orrs	r6, r0
1a003fec:	3568      	adds	r5, #104	; 0x68
1a003fee:	e7ee      	b.n	1a003fce <_fwalk_reent+0x1a>

1a003ff0 <__libc_init_array>:
1a003ff0:	b570      	push	{r4, r5, r6, lr}
1a003ff2:	4e0d      	ldr	r6, [pc, #52]	; (1a004028 <__libc_init_array+0x38>)
1a003ff4:	4c0d      	ldr	r4, [pc, #52]	; (1a00402c <__libc_init_array+0x3c>)
1a003ff6:	1ba4      	subs	r4, r4, r6
1a003ff8:	10a4      	asrs	r4, r4, #2
1a003ffa:	2500      	movs	r5, #0
1a003ffc:	42a5      	cmp	r5, r4
1a003ffe:	d109      	bne.n	1a004014 <__libc_init_array+0x24>
1a004000:	4e0b      	ldr	r6, [pc, #44]	; (1a004030 <__libc_init_array+0x40>)
1a004002:	4c0c      	ldr	r4, [pc, #48]	; (1a004034 <__libc_init_array+0x44>)
1a004004:	f7fc fdab 	bl	1a000b5e <_init>
1a004008:	1ba4      	subs	r4, r4, r6
1a00400a:	10a4      	asrs	r4, r4, #2
1a00400c:	2500      	movs	r5, #0
1a00400e:	42a5      	cmp	r5, r4
1a004010:	d105      	bne.n	1a00401e <__libc_init_array+0x2e>
1a004012:	bd70      	pop	{r4, r5, r6, pc}
1a004014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004018:	4798      	blx	r3
1a00401a:	3501      	adds	r5, #1
1a00401c:	e7ee      	b.n	1a003ffc <__libc_init_array+0xc>
1a00401e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004022:	4798      	blx	r3
1a004024:	3501      	adds	r5, #1
1a004026:	e7f2      	b.n	1a00400e <__libc_init_array+0x1e>
1a004028:	1a005014 	.word	0x1a005014
1a00402c:	1a005014 	.word	0x1a005014
1a004030:	1a005014 	.word	0x1a005014
1a004034:	1a005018 	.word	0x1a005018

1a004038 <memcpy>:
1a004038:	b510      	push	{r4, lr}
1a00403a:	1e43      	subs	r3, r0, #1
1a00403c:	440a      	add	r2, r1
1a00403e:	4291      	cmp	r1, r2
1a004040:	d100      	bne.n	1a004044 <memcpy+0xc>
1a004042:	bd10      	pop	{r4, pc}
1a004044:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004048:	f803 4f01 	strb.w	r4, [r3, #1]!
1a00404c:	e7f7      	b.n	1a00403e <memcpy+0x6>

1a00404e <memset>:
1a00404e:	4402      	add	r2, r0
1a004050:	4603      	mov	r3, r0
1a004052:	4293      	cmp	r3, r2
1a004054:	d100      	bne.n	1a004058 <memset+0xa>
1a004056:	4770      	bx	lr
1a004058:	f803 1b01 	strb.w	r1, [r3], #1
1a00405c:	e7f9      	b.n	1a004052 <memset+0x4>
1a00405e:	Address 0x000000001a00405e is out of bounds.


1a004060 <_free_r>:
1a004060:	b538      	push	{r3, r4, r5, lr}
1a004062:	4605      	mov	r5, r0
1a004064:	2900      	cmp	r1, #0
1a004066:	d045      	beq.n	1a0040f4 <_free_r+0x94>
1a004068:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00406c:	1f0c      	subs	r4, r1, #4
1a00406e:	2b00      	cmp	r3, #0
1a004070:	bfb8      	it	lt
1a004072:	18e4      	addlt	r4, r4, r3
1a004074:	f000 fa80 	bl	1a004578 <__malloc_lock>
1a004078:	4a1f      	ldr	r2, [pc, #124]	; (1a0040f8 <_free_r+0x98>)
1a00407a:	6813      	ldr	r3, [r2, #0]
1a00407c:	4610      	mov	r0, r2
1a00407e:	b933      	cbnz	r3, 1a00408e <_free_r+0x2e>
1a004080:	6063      	str	r3, [r4, #4]
1a004082:	6014      	str	r4, [r2, #0]
1a004084:	4628      	mov	r0, r5
1a004086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00408a:	f000 ba76 	b.w	1a00457a <__malloc_unlock>
1a00408e:	42a3      	cmp	r3, r4
1a004090:	d90c      	bls.n	1a0040ac <_free_r+0x4c>
1a004092:	6821      	ldr	r1, [r4, #0]
1a004094:	1862      	adds	r2, r4, r1
1a004096:	4293      	cmp	r3, r2
1a004098:	bf04      	itt	eq
1a00409a:	681a      	ldreq	r2, [r3, #0]
1a00409c:	685b      	ldreq	r3, [r3, #4]
1a00409e:	6063      	str	r3, [r4, #4]
1a0040a0:	bf04      	itt	eq
1a0040a2:	1852      	addeq	r2, r2, r1
1a0040a4:	6022      	streq	r2, [r4, #0]
1a0040a6:	6004      	str	r4, [r0, #0]
1a0040a8:	e7ec      	b.n	1a004084 <_free_r+0x24>
1a0040aa:	4613      	mov	r3, r2
1a0040ac:	685a      	ldr	r2, [r3, #4]
1a0040ae:	b10a      	cbz	r2, 1a0040b4 <_free_r+0x54>
1a0040b0:	42a2      	cmp	r2, r4
1a0040b2:	d9fa      	bls.n	1a0040aa <_free_r+0x4a>
1a0040b4:	6819      	ldr	r1, [r3, #0]
1a0040b6:	1858      	adds	r0, r3, r1
1a0040b8:	42a0      	cmp	r0, r4
1a0040ba:	d10b      	bne.n	1a0040d4 <_free_r+0x74>
1a0040bc:	6820      	ldr	r0, [r4, #0]
1a0040be:	4401      	add	r1, r0
1a0040c0:	1858      	adds	r0, r3, r1
1a0040c2:	4282      	cmp	r2, r0
1a0040c4:	6019      	str	r1, [r3, #0]
1a0040c6:	d1dd      	bne.n	1a004084 <_free_r+0x24>
1a0040c8:	6810      	ldr	r0, [r2, #0]
1a0040ca:	6852      	ldr	r2, [r2, #4]
1a0040cc:	605a      	str	r2, [r3, #4]
1a0040ce:	4401      	add	r1, r0
1a0040d0:	6019      	str	r1, [r3, #0]
1a0040d2:	e7d7      	b.n	1a004084 <_free_r+0x24>
1a0040d4:	d902      	bls.n	1a0040dc <_free_r+0x7c>
1a0040d6:	230c      	movs	r3, #12
1a0040d8:	602b      	str	r3, [r5, #0]
1a0040da:	e7d3      	b.n	1a004084 <_free_r+0x24>
1a0040dc:	6820      	ldr	r0, [r4, #0]
1a0040de:	1821      	adds	r1, r4, r0
1a0040e0:	428a      	cmp	r2, r1
1a0040e2:	bf04      	itt	eq
1a0040e4:	6811      	ldreq	r1, [r2, #0]
1a0040e6:	6852      	ldreq	r2, [r2, #4]
1a0040e8:	6062      	str	r2, [r4, #4]
1a0040ea:	bf04      	itt	eq
1a0040ec:	1809      	addeq	r1, r1, r0
1a0040ee:	6021      	streq	r1, [r4, #0]
1a0040f0:	605c      	str	r4, [r3, #4]
1a0040f2:	e7c7      	b.n	1a004084 <_free_r+0x24>
1a0040f4:	bd38      	pop	{r3, r4, r5, pc}
1a0040f6:	bf00      	nop
1a0040f8:	10002340 	.word	0x10002340

1a0040fc <_malloc_r>:
1a0040fc:	b570      	push	{r4, r5, r6, lr}
1a0040fe:	1ccd      	adds	r5, r1, #3
1a004100:	f025 0503 	bic.w	r5, r5, #3
1a004104:	3508      	adds	r5, #8
1a004106:	2d0c      	cmp	r5, #12
1a004108:	bf38      	it	cc
1a00410a:	250c      	movcc	r5, #12
1a00410c:	2d00      	cmp	r5, #0
1a00410e:	4606      	mov	r6, r0
1a004110:	db01      	blt.n	1a004116 <_malloc_r+0x1a>
1a004112:	42a9      	cmp	r1, r5
1a004114:	d903      	bls.n	1a00411e <_malloc_r+0x22>
1a004116:	230c      	movs	r3, #12
1a004118:	6033      	str	r3, [r6, #0]
1a00411a:	2000      	movs	r0, #0
1a00411c:	bd70      	pop	{r4, r5, r6, pc}
1a00411e:	f000 fa2b 	bl	1a004578 <__malloc_lock>
1a004122:	4a21      	ldr	r2, [pc, #132]	; (1a0041a8 <_malloc_r+0xac>)
1a004124:	6814      	ldr	r4, [r2, #0]
1a004126:	4621      	mov	r1, r4
1a004128:	b991      	cbnz	r1, 1a004150 <_malloc_r+0x54>
1a00412a:	4c20      	ldr	r4, [pc, #128]	; (1a0041ac <_malloc_r+0xb0>)
1a00412c:	6823      	ldr	r3, [r4, #0]
1a00412e:	b91b      	cbnz	r3, 1a004138 <_malloc_r+0x3c>
1a004130:	4630      	mov	r0, r6
1a004132:	f7fc fd69 	bl	1a000c08 <_sbrk_r>
1a004136:	6020      	str	r0, [r4, #0]
1a004138:	4629      	mov	r1, r5
1a00413a:	4630      	mov	r0, r6
1a00413c:	f7fc fd64 	bl	1a000c08 <_sbrk_r>
1a004140:	1c43      	adds	r3, r0, #1
1a004142:	d124      	bne.n	1a00418e <_malloc_r+0x92>
1a004144:	230c      	movs	r3, #12
1a004146:	6033      	str	r3, [r6, #0]
1a004148:	4630      	mov	r0, r6
1a00414a:	f000 fa16 	bl	1a00457a <__malloc_unlock>
1a00414e:	e7e4      	b.n	1a00411a <_malloc_r+0x1e>
1a004150:	680b      	ldr	r3, [r1, #0]
1a004152:	1b5b      	subs	r3, r3, r5
1a004154:	d418      	bmi.n	1a004188 <_malloc_r+0x8c>
1a004156:	2b0b      	cmp	r3, #11
1a004158:	d90f      	bls.n	1a00417a <_malloc_r+0x7e>
1a00415a:	600b      	str	r3, [r1, #0]
1a00415c:	50cd      	str	r5, [r1, r3]
1a00415e:	18cc      	adds	r4, r1, r3
1a004160:	4630      	mov	r0, r6
1a004162:	f000 fa0a 	bl	1a00457a <__malloc_unlock>
1a004166:	f104 000b 	add.w	r0, r4, #11
1a00416a:	1d23      	adds	r3, r4, #4
1a00416c:	f020 0007 	bic.w	r0, r0, #7
1a004170:	1ac3      	subs	r3, r0, r3
1a004172:	d0d3      	beq.n	1a00411c <_malloc_r+0x20>
1a004174:	425a      	negs	r2, r3
1a004176:	50e2      	str	r2, [r4, r3]
1a004178:	e7d0      	b.n	1a00411c <_malloc_r+0x20>
1a00417a:	428c      	cmp	r4, r1
1a00417c:	684b      	ldr	r3, [r1, #4]
1a00417e:	bf16      	itet	ne
1a004180:	6063      	strne	r3, [r4, #4]
1a004182:	6013      	streq	r3, [r2, #0]
1a004184:	460c      	movne	r4, r1
1a004186:	e7eb      	b.n	1a004160 <_malloc_r+0x64>
1a004188:	460c      	mov	r4, r1
1a00418a:	6849      	ldr	r1, [r1, #4]
1a00418c:	e7cc      	b.n	1a004128 <_malloc_r+0x2c>
1a00418e:	1cc4      	adds	r4, r0, #3
1a004190:	f024 0403 	bic.w	r4, r4, #3
1a004194:	42a0      	cmp	r0, r4
1a004196:	d005      	beq.n	1a0041a4 <_malloc_r+0xa8>
1a004198:	1a21      	subs	r1, r4, r0
1a00419a:	4630      	mov	r0, r6
1a00419c:	f7fc fd34 	bl	1a000c08 <_sbrk_r>
1a0041a0:	3001      	adds	r0, #1
1a0041a2:	d0cf      	beq.n	1a004144 <_malloc_r+0x48>
1a0041a4:	6025      	str	r5, [r4, #0]
1a0041a6:	e7db      	b.n	1a004160 <_malloc_r+0x64>
1a0041a8:	10002340 	.word	0x10002340
1a0041ac:	10002344 	.word	0x10002344

1a0041b0 <iprintf>:
1a0041b0:	b40f      	push	{r0, r1, r2, r3}
1a0041b2:	4b0a      	ldr	r3, [pc, #40]	; (1a0041dc <iprintf+0x2c>)
1a0041b4:	b513      	push	{r0, r1, r4, lr}
1a0041b6:	681c      	ldr	r4, [r3, #0]
1a0041b8:	b124      	cbz	r4, 1a0041c4 <iprintf+0x14>
1a0041ba:	69a3      	ldr	r3, [r4, #24]
1a0041bc:	b913      	cbnz	r3, 1a0041c4 <iprintf+0x14>
1a0041be:	4620      	mov	r0, r4
1a0041c0:	f7ff fe8c 	bl	1a003edc <__sinit>
1a0041c4:	ab05      	add	r3, sp, #20
1a0041c6:	9a04      	ldr	r2, [sp, #16]
1a0041c8:	68a1      	ldr	r1, [r4, #8]
1a0041ca:	9301      	str	r3, [sp, #4]
1a0041cc:	4620      	mov	r0, r4
1a0041ce:	f000 f9ff 	bl	1a0045d0 <_vfiprintf_r>
1a0041d2:	b002      	add	sp, #8
1a0041d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0041d8:	b004      	add	sp, #16
1a0041da:	4770      	bx	lr
1a0041dc:	10000044 	.word	0x10000044

1a0041e0 <_puts_r>:
1a0041e0:	b570      	push	{r4, r5, r6, lr}
1a0041e2:	460e      	mov	r6, r1
1a0041e4:	4605      	mov	r5, r0
1a0041e6:	b118      	cbz	r0, 1a0041f0 <_puts_r+0x10>
1a0041e8:	6983      	ldr	r3, [r0, #24]
1a0041ea:	b90b      	cbnz	r3, 1a0041f0 <_puts_r+0x10>
1a0041ec:	f7ff fe76 	bl	1a003edc <__sinit>
1a0041f0:	69ab      	ldr	r3, [r5, #24]
1a0041f2:	68ac      	ldr	r4, [r5, #8]
1a0041f4:	b913      	cbnz	r3, 1a0041fc <_puts_r+0x1c>
1a0041f6:	4628      	mov	r0, r5
1a0041f8:	f7ff fe70 	bl	1a003edc <__sinit>
1a0041fc:	4b23      	ldr	r3, [pc, #140]	; (1a00428c <_puts_r+0xac>)
1a0041fe:	429c      	cmp	r4, r3
1a004200:	d117      	bne.n	1a004232 <_puts_r+0x52>
1a004202:	686c      	ldr	r4, [r5, #4]
1a004204:	89a3      	ldrh	r3, [r4, #12]
1a004206:	071b      	lsls	r3, r3, #28
1a004208:	d51d      	bpl.n	1a004246 <_puts_r+0x66>
1a00420a:	6923      	ldr	r3, [r4, #16]
1a00420c:	b1db      	cbz	r3, 1a004246 <_puts_r+0x66>
1a00420e:	3e01      	subs	r6, #1
1a004210:	68a3      	ldr	r3, [r4, #8]
1a004212:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a004216:	3b01      	subs	r3, #1
1a004218:	60a3      	str	r3, [r4, #8]
1a00421a:	b9e9      	cbnz	r1, 1a004258 <_puts_r+0x78>
1a00421c:	2b00      	cmp	r3, #0
1a00421e:	da2e      	bge.n	1a00427e <_puts_r+0x9e>
1a004220:	4622      	mov	r2, r4
1a004222:	210a      	movs	r1, #10
1a004224:	4628      	mov	r0, r5
1a004226:	f000 f883 	bl	1a004330 <__swbuf_r>
1a00422a:	3001      	adds	r0, #1
1a00422c:	d011      	beq.n	1a004252 <_puts_r+0x72>
1a00422e:	200a      	movs	r0, #10
1a004230:	e011      	b.n	1a004256 <_puts_r+0x76>
1a004232:	4b17      	ldr	r3, [pc, #92]	; (1a004290 <_puts_r+0xb0>)
1a004234:	429c      	cmp	r4, r3
1a004236:	d101      	bne.n	1a00423c <_puts_r+0x5c>
1a004238:	68ac      	ldr	r4, [r5, #8]
1a00423a:	e7e3      	b.n	1a004204 <_puts_r+0x24>
1a00423c:	4b15      	ldr	r3, [pc, #84]	; (1a004294 <_puts_r+0xb4>)
1a00423e:	429c      	cmp	r4, r3
1a004240:	bf08      	it	eq
1a004242:	68ec      	ldreq	r4, [r5, #12]
1a004244:	e7de      	b.n	1a004204 <_puts_r+0x24>
1a004246:	4621      	mov	r1, r4
1a004248:	4628      	mov	r0, r5
1a00424a:	f000 f8c3 	bl	1a0043d4 <__swsetup_r>
1a00424e:	2800      	cmp	r0, #0
1a004250:	d0dd      	beq.n	1a00420e <_puts_r+0x2e>
1a004252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004256:	bd70      	pop	{r4, r5, r6, pc}
1a004258:	2b00      	cmp	r3, #0
1a00425a:	da04      	bge.n	1a004266 <_puts_r+0x86>
1a00425c:	69a2      	ldr	r2, [r4, #24]
1a00425e:	429a      	cmp	r2, r3
1a004260:	dc06      	bgt.n	1a004270 <_puts_r+0x90>
1a004262:	290a      	cmp	r1, #10
1a004264:	d004      	beq.n	1a004270 <_puts_r+0x90>
1a004266:	6823      	ldr	r3, [r4, #0]
1a004268:	1c5a      	adds	r2, r3, #1
1a00426a:	6022      	str	r2, [r4, #0]
1a00426c:	7019      	strb	r1, [r3, #0]
1a00426e:	e7cf      	b.n	1a004210 <_puts_r+0x30>
1a004270:	4622      	mov	r2, r4
1a004272:	4628      	mov	r0, r5
1a004274:	f000 f85c 	bl	1a004330 <__swbuf_r>
1a004278:	3001      	adds	r0, #1
1a00427a:	d1c9      	bne.n	1a004210 <_puts_r+0x30>
1a00427c:	e7e9      	b.n	1a004252 <_puts_r+0x72>
1a00427e:	6823      	ldr	r3, [r4, #0]
1a004280:	200a      	movs	r0, #10
1a004282:	1c5a      	adds	r2, r3, #1
1a004284:	6022      	str	r2, [r4, #0]
1a004286:	7018      	strb	r0, [r3, #0]
1a004288:	e7e5      	b.n	1a004256 <_puts_r+0x76>
1a00428a:	bf00      	nop
1a00428c:	1a004f9c 	.word	0x1a004f9c
1a004290:	1a004fbc 	.word	0x1a004fbc
1a004294:	1a004f7c 	.word	0x1a004f7c

1a004298 <puts>:
1a004298:	4b02      	ldr	r3, [pc, #8]	; (1a0042a4 <puts+0xc>)
1a00429a:	4601      	mov	r1, r0
1a00429c:	6818      	ldr	r0, [r3, #0]
1a00429e:	f7ff bf9f 	b.w	1a0041e0 <_puts_r>
1a0042a2:	bf00      	nop
1a0042a4:	10000044 	.word	0x10000044

1a0042a8 <__sread>:
1a0042a8:	b510      	push	{r4, lr}
1a0042aa:	460c      	mov	r4, r1
1a0042ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0042b0:	f7fc fc6e 	bl	1a000b90 <_read_r>
1a0042b4:	2800      	cmp	r0, #0
1a0042b6:	bfab      	itete	ge
1a0042b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0042ba:	89a3      	ldrhlt	r3, [r4, #12]
1a0042bc:	181b      	addge	r3, r3, r0
1a0042be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0042c2:	bfac      	ite	ge
1a0042c4:	6563      	strge	r3, [r4, #84]	; 0x54
1a0042c6:	81a3      	strhlt	r3, [r4, #12]
1a0042c8:	bd10      	pop	{r4, pc}

1a0042ca <__swrite>:
1a0042ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0042ce:	461f      	mov	r7, r3
1a0042d0:	898b      	ldrh	r3, [r1, #12]
1a0042d2:	05db      	lsls	r3, r3, #23
1a0042d4:	4605      	mov	r5, r0
1a0042d6:	460c      	mov	r4, r1
1a0042d8:	4616      	mov	r6, r2
1a0042da:	d505      	bpl.n	1a0042e8 <__swrite+0x1e>
1a0042dc:	2302      	movs	r3, #2
1a0042de:	2200      	movs	r2, #0
1a0042e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0042e4:	f7fc fc4f 	bl	1a000b86 <_lseek_r>
1a0042e8:	89a3      	ldrh	r3, [r4, #12]
1a0042ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0042ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0042f2:	81a3      	strh	r3, [r4, #12]
1a0042f4:	4632      	mov	r2, r6
1a0042f6:	463b      	mov	r3, r7
1a0042f8:	4628      	mov	r0, r5
1a0042fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0042fe:	f7fc bc6e 	b.w	1a000bde <_write_r>

1a004302 <__sseek>:
1a004302:	b510      	push	{r4, lr}
1a004304:	460c      	mov	r4, r1
1a004306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00430a:	f7fc fc3c 	bl	1a000b86 <_lseek_r>
1a00430e:	1c43      	adds	r3, r0, #1
1a004310:	89a3      	ldrh	r3, [r4, #12]
1a004312:	bf15      	itete	ne
1a004314:	6560      	strne	r0, [r4, #84]	; 0x54
1a004316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00431a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a00431e:	81a3      	strheq	r3, [r4, #12]
1a004320:	bf18      	it	ne
1a004322:	81a3      	strhne	r3, [r4, #12]
1a004324:	bd10      	pop	{r4, pc}

1a004326 <__sclose>:
1a004326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00432a:	f7fc bc19 	b.w	1a000b60 <_close_r>
1a00432e:	Address 0x000000001a00432e is out of bounds.


1a004330 <__swbuf_r>:
1a004330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004332:	460e      	mov	r6, r1
1a004334:	4614      	mov	r4, r2
1a004336:	4605      	mov	r5, r0
1a004338:	b118      	cbz	r0, 1a004342 <__swbuf_r+0x12>
1a00433a:	6983      	ldr	r3, [r0, #24]
1a00433c:	b90b      	cbnz	r3, 1a004342 <__swbuf_r+0x12>
1a00433e:	f7ff fdcd 	bl	1a003edc <__sinit>
1a004342:	4b21      	ldr	r3, [pc, #132]	; (1a0043c8 <__swbuf_r+0x98>)
1a004344:	429c      	cmp	r4, r3
1a004346:	d12a      	bne.n	1a00439e <__swbuf_r+0x6e>
1a004348:	686c      	ldr	r4, [r5, #4]
1a00434a:	69a3      	ldr	r3, [r4, #24]
1a00434c:	60a3      	str	r3, [r4, #8]
1a00434e:	89a3      	ldrh	r3, [r4, #12]
1a004350:	071a      	lsls	r2, r3, #28
1a004352:	d52e      	bpl.n	1a0043b2 <__swbuf_r+0x82>
1a004354:	6923      	ldr	r3, [r4, #16]
1a004356:	b363      	cbz	r3, 1a0043b2 <__swbuf_r+0x82>
1a004358:	6923      	ldr	r3, [r4, #16]
1a00435a:	6820      	ldr	r0, [r4, #0]
1a00435c:	1ac0      	subs	r0, r0, r3
1a00435e:	6963      	ldr	r3, [r4, #20]
1a004360:	b2f6      	uxtb	r6, r6
1a004362:	4283      	cmp	r3, r0
1a004364:	4637      	mov	r7, r6
1a004366:	dc04      	bgt.n	1a004372 <__swbuf_r+0x42>
1a004368:	4621      	mov	r1, r4
1a00436a:	4628      	mov	r0, r5
1a00436c:	f7ff fd4c 	bl	1a003e08 <_fflush_r>
1a004370:	bb28      	cbnz	r0, 1a0043be <__swbuf_r+0x8e>
1a004372:	68a3      	ldr	r3, [r4, #8]
1a004374:	3b01      	subs	r3, #1
1a004376:	60a3      	str	r3, [r4, #8]
1a004378:	6823      	ldr	r3, [r4, #0]
1a00437a:	1c5a      	adds	r2, r3, #1
1a00437c:	6022      	str	r2, [r4, #0]
1a00437e:	701e      	strb	r6, [r3, #0]
1a004380:	6963      	ldr	r3, [r4, #20]
1a004382:	3001      	adds	r0, #1
1a004384:	4283      	cmp	r3, r0
1a004386:	d004      	beq.n	1a004392 <__swbuf_r+0x62>
1a004388:	89a3      	ldrh	r3, [r4, #12]
1a00438a:	07db      	lsls	r3, r3, #31
1a00438c:	d519      	bpl.n	1a0043c2 <__swbuf_r+0x92>
1a00438e:	2e0a      	cmp	r6, #10
1a004390:	d117      	bne.n	1a0043c2 <__swbuf_r+0x92>
1a004392:	4621      	mov	r1, r4
1a004394:	4628      	mov	r0, r5
1a004396:	f7ff fd37 	bl	1a003e08 <_fflush_r>
1a00439a:	b190      	cbz	r0, 1a0043c2 <__swbuf_r+0x92>
1a00439c:	e00f      	b.n	1a0043be <__swbuf_r+0x8e>
1a00439e:	4b0b      	ldr	r3, [pc, #44]	; (1a0043cc <__swbuf_r+0x9c>)
1a0043a0:	429c      	cmp	r4, r3
1a0043a2:	d101      	bne.n	1a0043a8 <__swbuf_r+0x78>
1a0043a4:	68ac      	ldr	r4, [r5, #8]
1a0043a6:	e7d0      	b.n	1a00434a <__swbuf_r+0x1a>
1a0043a8:	4b09      	ldr	r3, [pc, #36]	; (1a0043d0 <__swbuf_r+0xa0>)
1a0043aa:	429c      	cmp	r4, r3
1a0043ac:	bf08      	it	eq
1a0043ae:	68ec      	ldreq	r4, [r5, #12]
1a0043b0:	e7cb      	b.n	1a00434a <__swbuf_r+0x1a>
1a0043b2:	4621      	mov	r1, r4
1a0043b4:	4628      	mov	r0, r5
1a0043b6:	f000 f80d 	bl	1a0043d4 <__swsetup_r>
1a0043ba:	2800      	cmp	r0, #0
1a0043bc:	d0cc      	beq.n	1a004358 <__swbuf_r+0x28>
1a0043be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a0043c2:	4638      	mov	r0, r7
1a0043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0043c6:	bf00      	nop
1a0043c8:	1a004f9c 	.word	0x1a004f9c
1a0043cc:	1a004fbc 	.word	0x1a004fbc
1a0043d0:	1a004f7c 	.word	0x1a004f7c

1a0043d4 <__swsetup_r>:
1a0043d4:	4b32      	ldr	r3, [pc, #200]	; (1a0044a0 <__swsetup_r+0xcc>)
1a0043d6:	b570      	push	{r4, r5, r6, lr}
1a0043d8:	681d      	ldr	r5, [r3, #0]
1a0043da:	4606      	mov	r6, r0
1a0043dc:	460c      	mov	r4, r1
1a0043de:	b125      	cbz	r5, 1a0043ea <__swsetup_r+0x16>
1a0043e0:	69ab      	ldr	r3, [r5, #24]
1a0043e2:	b913      	cbnz	r3, 1a0043ea <__swsetup_r+0x16>
1a0043e4:	4628      	mov	r0, r5
1a0043e6:	f7ff fd79 	bl	1a003edc <__sinit>
1a0043ea:	4b2e      	ldr	r3, [pc, #184]	; (1a0044a4 <__swsetup_r+0xd0>)
1a0043ec:	429c      	cmp	r4, r3
1a0043ee:	d10f      	bne.n	1a004410 <__swsetup_r+0x3c>
1a0043f0:	686c      	ldr	r4, [r5, #4]
1a0043f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0043f6:	b29a      	uxth	r2, r3
1a0043f8:	0715      	lsls	r5, r2, #28
1a0043fa:	d42c      	bmi.n	1a004456 <__swsetup_r+0x82>
1a0043fc:	06d0      	lsls	r0, r2, #27
1a0043fe:	d411      	bmi.n	1a004424 <__swsetup_r+0x50>
1a004400:	2209      	movs	r2, #9
1a004402:	6032      	str	r2, [r6, #0]
1a004404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004408:	81a3      	strh	r3, [r4, #12]
1a00440a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00440e:	e03e      	b.n	1a00448e <__swsetup_r+0xba>
1a004410:	4b25      	ldr	r3, [pc, #148]	; (1a0044a8 <__swsetup_r+0xd4>)
1a004412:	429c      	cmp	r4, r3
1a004414:	d101      	bne.n	1a00441a <__swsetup_r+0x46>
1a004416:	68ac      	ldr	r4, [r5, #8]
1a004418:	e7eb      	b.n	1a0043f2 <__swsetup_r+0x1e>
1a00441a:	4b24      	ldr	r3, [pc, #144]	; (1a0044ac <__swsetup_r+0xd8>)
1a00441c:	429c      	cmp	r4, r3
1a00441e:	bf08      	it	eq
1a004420:	68ec      	ldreq	r4, [r5, #12]
1a004422:	e7e6      	b.n	1a0043f2 <__swsetup_r+0x1e>
1a004424:	0751      	lsls	r1, r2, #29
1a004426:	d512      	bpl.n	1a00444e <__swsetup_r+0x7a>
1a004428:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00442a:	b141      	cbz	r1, 1a00443e <__swsetup_r+0x6a>
1a00442c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a004430:	4299      	cmp	r1, r3
1a004432:	d002      	beq.n	1a00443a <__swsetup_r+0x66>
1a004434:	4630      	mov	r0, r6
1a004436:	f7ff fe13 	bl	1a004060 <_free_r>
1a00443a:	2300      	movs	r3, #0
1a00443c:	6363      	str	r3, [r4, #52]	; 0x34
1a00443e:	89a3      	ldrh	r3, [r4, #12]
1a004440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a004444:	81a3      	strh	r3, [r4, #12]
1a004446:	2300      	movs	r3, #0
1a004448:	6063      	str	r3, [r4, #4]
1a00444a:	6923      	ldr	r3, [r4, #16]
1a00444c:	6023      	str	r3, [r4, #0]
1a00444e:	89a3      	ldrh	r3, [r4, #12]
1a004450:	f043 0308 	orr.w	r3, r3, #8
1a004454:	81a3      	strh	r3, [r4, #12]
1a004456:	6923      	ldr	r3, [r4, #16]
1a004458:	b94b      	cbnz	r3, 1a00446e <__swsetup_r+0x9a>
1a00445a:	89a3      	ldrh	r3, [r4, #12]
1a00445c:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a004464:	d003      	beq.n	1a00446e <__swsetup_r+0x9a>
1a004466:	4621      	mov	r1, r4
1a004468:	4630      	mov	r0, r6
1a00446a:	f000 f845 	bl	1a0044f8 <__smakebuf_r>
1a00446e:	89a2      	ldrh	r2, [r4, #12]
1a004470:	f012 0301 	ands.w	r3, r2, #1
1a004474:	d00c      	beq.n	1a004490 <__swsetup_r+0xbc>
1a004476:	2300      	movs	r3, #0
1a004478:	60a3      	str	r3, [r4, #8]
1a00447a:	6963      	ldr	r3, [r4, #20]
1a00447c:	425b      	negs	r3, r3
1a00447e:	61a3      	str	r3, [r4, #24]
1a004480:	6923      	ldr	r3, [r4, #16]
1a004482:	b953      	cbnz	r3, 1a00449a <__swsetup_r+0xc6>
1a004484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004488:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a00448c:	d1ba      	bne.n	1a004404 <__swsetup_r+0x30>
1a00448e:	bd70      	pop	{r4, r5, r6, pc}
1a004490:	0792      	lsls	r2, r2, #30
1a004492:	bf58      	it	pl
1a004494:	6963      	ldrpl	r3, [r4, #20]
1a004496:	60a3      	str	r3, [r4, #8]
1a004498:	e7f2      	b.n	1a004480 <__swsetup_r+0xac>
1a00449a:	2000      	movs	r0, #0
1a00449c:	e7f7      	b.n	1a00448e <__swsetup_r+0xba>
1a00449e:	bf00      	nop
1a0044a0:	10000044 	.word	0x10000044
1a0044a4:	1a004f9c 	.word	0x1a004f9c
1a0044a8:	1a004fbc 	.word	0x1a004fbc
1a0044ac:	1a004f7c 	.word	0x1a004f7c

1a0044b0 <__swhatbuf_r>:
1a0044b0:	b570      	push	{r4, r5, r6, lr}
1a0044b2:	460e      	mov	r6, r1
1a0044b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0044b8:	2900      	cmp	r1, #0
1a0044ba:	b096      	sub	sp, #88	; 0x58
1a0044bc:	4614      	mov	r4, r2
1a0044be:	461d      	mov	r5, r3
1a0044c0:	da07      	bge.n	1a0044d2 <__swhatbuf_r+0x22>
1a0044c2:	2300      	movs	r3, #0
1a0044c4:	602b      	str	r3, [r5, #0]
1a0044c6:	89b3      	ldrh	r3, [r6, #12]
1a0044c8:	061a      	lsls	r2, r3, #24
1a0044ca:	d410      	bmi.n	1a0044ee <__swhatbuf_r+0x3e>
1a0044cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0044d0:	e00e      	b.n	1a0044f0 <__swhatbuf_r+0x40>
1a0044d2:	466a      	mov	r2, sp
1a0044d4:	f7fc fb49 	bl	1a000b6a <_fstat_r>
1a0044d8:	2800      	cmp	r0, #0
1a0044da:	dbf2      	blt.n	1a0044c2 <__swhatbuf_r+0x12>
1a0044dc:	9a01      	ldr	r2, [sp, #4]
1a0044de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a0044e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a0044e6:	425a      	negs	r2, r3
1a0044e8:	415a      	adcs	r2, r3
1a0044ea:	602a      	str	r2, [r5, #0]
1a0044ec:	e7ee      	b.n	1a0044cc <__swhatbuf_r+0x1c>
1a0044ee:	2340      	movs	r3, #64	; 0x40
1a0044f0:	2000      	movs	r0, #0
1a0044f2:	6023      	str	r3, [r4, #0]
1a0044f4:	b016      	add	sp, #88	; 0x58
1a0044f6:	bd70      	pop	{r4, r5, r6, pc}

1a0044f8 <__smakebuf_r>:
1a0044f8:	898b      	ldrh	r3, [r1, #12]
1a0044fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a0044fc:	079d      	lsls	r5, r3, #30
1a0044fe:	4606      	mov	r6, r0
1a004500:	460c      	mov	r4, r1
1a004502:	d507      	bpl.n	1a004514 <__smakebuf_r+0x1c>
1a004504:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a004508:	6023      	str	r3, [r4, #0]
1a00450a:	6123      	str	r3, [r4, #16]
1a00450c:	2301      	movs	r3, #1
1a00450e:	6163      	str	r3, [r4, #20]
1a004510:	b002      	add	sp, #8
1a004512:	bd70      	pop	{r4, r5, r6, pc}
1a004514:	ab01      	add	r3, sp, #4
1a004516:	466a      	mov	r2, sp
1a004518:	f7ff ffca 	bl	1a0044b0 <__swhatbuf_r>
1a00451c:	9900      	ldr	r1, [sp, #0]
1a00451e:	4605      	mov	r5, r0
1a004520:	4630      	mov	r0, r6
1a004522:	f7ff fdeb 	bl	1a0040fc <_malloc_r>
1a004526:	b948      	cbnz	r0, 1a00453c <__smakebuf_r+0x44>
1a004528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00452c:	059a      	lsls	r2, r3, #22
1a00452e:	d4ef      	bmi.n	1a004510 <__smakebuf_r+0x18>
1a004530:	f023 0303 	bic.w	r3, r3, #3
1a004534:	f043 0302 	orr.w	r3, r3, #2
1a004538:	81a3      	strh	r3, [r4, #12]
1a00453a:	e7e3      	b.n	1a004504 <__smakebuf_r+0xc>
1a00453c:	4b0d      	ldr	r3, [pc, #52]	; (1a004574 <__smakebuf_r+0x7c>)
1a00453e:	62b3      	str	r3, [r6, #40]	; 0x28
1a004540:	89a3      	ldrh	r3, [r4, #12]
1a004542:	6020      	str	r0, [r4, #0]
1a004544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004548:	81a3      	strh	r3, [r4, #12]
1a00454a:	9b00      	ldr	r3, [sp, #0]
1a00454c:	6163      	str	r3, [r4, #20]
1a00454e:	9b01      	ldr	r3, [sp, #4]
1a004550:	6120      	str	r0, [r4, #16]
1a004552:	b15b      	cbz	r3, 1a00456c <__smakebuf_r+0x74>
1a004554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004558:	4630      	mov	r0, r6
1a00455a:	f7fc fb0b 	bl	1a000b74 <_isatty_r>
1a00455e:	b128      	cbz	r0, 1a00456c <__smakebuf_r+0x74>
1a004560:	89a3      	ldrh	r3, [r4, #12]
1a004562:	f023 0303 	bic.w	r3, r3, #3
1a004566:	f043 0301 	orr.w	r3, r3, #1
1a00456a:	81a3      	strh	r3, [r4, #12]
1a00456c:	89a3      	ldrh	r3, [r4, #12]
1a00456e:	431d      	orrs	r5, r3
1a004570:	81a5      	strh	r5, [r4, #12]
1a004572:	e7cd      	b.n	1a004510 <__smakebuf_r+0x18>
1a004574:	1a003ea5 	.word	0x1a003ea5

1a004578 <__malloc_lock>:
1a004578:	4770      	bx	lr

1a00457a <__malloc_unlock>:
1a00457a:	4770      	bx	lr

1a00457c <__sfputc_r>:
1a00457c:	6893      	ldr	r3, [r2, #8]
1a00457e:	3b01      	subs	r3, #1
1a004580:	2b00      	cmp	r3, #0
1a004582:	b410      	push	{r4}
1a004584:	6093      	str	r3, [r2, #8]
1a004586:	da08      	bge.n	1a00459a <__sfputc_r+0x1e>
1a004588:	6994      	ldr	r4, [r2, #24]
1a00458a:	42a3      	cmp	r3, r4
1a00458c:	db01      	blt.n	1a004592 <__sfputc_r+0x16>
1a00458e:	290a      	cmp	r1, #10
1a004590:	d103      	bne.n	1a00459a <__sfputc_r+0x1e>
1a004592:	f85d 4b04 	ldr.w	r4, [sp], #4
1a004596:	f7ff becb 	b.w	1a004330 <__swbuf_r>
1a00459a:	6813      	ldr	r3, [r2, #0]
1a00459c:	1c58      	adds	r0, r3, #1
1a00459e:	6010      	str	r0, [r2, #0]
1a0045a0:	7019      	strb	r1, [r3, #0]
1a0045a2:	4608      	mov	r0, r1
1a0045a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0045a8:	4770      	bx	lr

1a0045aa <__sfputs_r>:
1a0045aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0045ac:	4606      	mov	r6, r0
1a0045ae:	460f      	mov	r7, r1
1a0045b0:	4614      	mov	r4, r2
1a0045b2:	18d5      	adds	r5, r2, r3
1a0045b4:	42ac      	cmp	r4, r5
1a0045b6:	d101      	bne.n	1a0045bc <__sfputs_r+0x12>
1a0045b8:	2000      	movs	r0, #0
1a0045ba:	e007      	b.n	1a0045cc <__sfputs_r+0x22>
1a0045bc:	463a      	mov	r2, r7
1a0045be:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0045c2:	4630      	mov	r0, r6
1a0045c4:	f7ff ffda 	bl	1a00457c <__sfputc_r>
1a0045c8:	1c43      	adds	r3, r0, #1
1a0045ca:	d1f3      	bne.n	1a0045b4 <__sfputs_r+0xa>
1a0045cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0045ce:	Address 0x000000001a0045ce is out of bounds.


1a0045d0 <_vfiprintf_r>:
1a0045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0045d4:	460c      	mov	r4, r1
1a0045d6:	b09d      	sub	sp, #116	; 0x74
1a0045d8:	4617      	mov	r7, r2
1a0045da:	461d      	mov	r5, r3
1a0045dc:	4606      	mov	r6, r0
1a0045de:	b118      	cbz	r0, 1a0045e8 <_vfiprintf_r+0x18>
1a0045e0:	6983      	ldr	r3, [r0, #24]
1a0045e2:	b90b      	cbnz	r3, 1a0045e8 <_vfiprintf_r+0x18>
1a0045e4:	f7ff fc7a 	bl	1a003edc <__sinit>
1a0045e8:	4b7c      	ldr	r3, [pc, #496]	; (1a0047dc <_vfiprintf_r+0x20c>)
1a0045ea:	429c      	cmp	r4, r3
1a0045ec:	d158      	bne.n	1a0046a0 <_vfiprintf_r+0xd0>
1a0045ee:	6874      	ldr	r4, [r6, #4]
1a0045f0:	89a3      	ldrh	r3, [r4, #12]
1a0045f2:	0718      	lsls	r0, r3, #28
1a0045f4:	d55e      	bpl.n	1a0046b4 <_vfiprintf_r+0xe4>
1a0045f6:	6923      	ldr	r3, [r4, #16]
1a0045f8:	2b00      	cmp	r3, #0
1a0045fa:	d05b      	beq.n	1a0046b4 <_vfiprintf_r+0xe4>
1a0045fc:	2300      	movs	r3, #0
1a0045fe:	9309      	str	r3, [sp, #36]	; 0x24
1a004600:	2320      	movs	r3, #32
1a004602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a004606:	2330      	movs	r3, #48	; 0x30
1a004608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a00460c:	9503      	str	r5, [sp, #12]
1a00460e:	f04f 0b01 	mov.w	fp, #1
1a004612:	46b8      	mov	r8, r7
1a004614:	4645      	mov	r5, r8
1a004616:	f815 3b01 	ldrb.w	r3, [r5], #1
1a00461a:	b10b      	cbz	r3, 1a004620 <_vfiprintf_r+0x50>
1a00461c:	2b25      	cmp	r3, #37	; 0x25
1a00461e:	d154      	bne.n	1a0046ca <_vfiprintf_r+0xfa>
1a004620:	ebb8 0a07 	subs.w	sl, r8, r7
1a004624:	d00b      	beq.n	1a00463e <_vfiprintf_r+0x6e>
1a004626:	4653      	mov	r3, sl
1a004628:	463a      	mov	r2, r7
1a00462a:	4621      	mov	r1, r4
1a00462c:	4630      	mov	r0, r6
1a00462e:	f7ff ffbc 	bl	1a0045aa <__sfputs_r>
1a004632:	3001      	adds	r0, #1
1a004634:	f000 80c2 	beq.w	1a0047bc <_vfiprintf_r+0x1ec>
1a004638:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00463a:	4453      	add	r3, sl
1a00463c:	9309      	str	r3, [sp, #36]	; 0x24
1a00463e:	f898 3000 	ldrb.w	r3, [r8]
1a004642:	2b00      	cmp	r3, #0
1a004644:	f000 80ba 	beq.w	1a0047bc <_vfiprintf_r+0x1ec>
1a004648:	2300      	movs	r3, #0
1a00464a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00464e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a004652:	9304      	str	r3, [sp, #16]
1a004654:	9307      	str	r3, [sp, #28]
1a004656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a00465a:	931a      	str	r3, [sp, #104]	; 0x68
1a00465c:	46a8      	mov	r8, r5
1a00465e:	2205      	movs	r2, #5
1a004660:	f818 1b01 	ldrb.w	r1, [r8], #1
1a004664:	485e      	ldr	r0, [pc, #376]	; (1a0047e0 <_vfiprintf_r+0x210>)
1a004666:	f000 fa53 	bl	1a004b10 <memchr>
1a00466a:	9b04      	ldr	r3, [sp, #16]
1a00466c:	bb78      	cbnz	r0, 1a0046ce <_vfiprintf_r+0xfe>
1a00466e:	06d9      	lsls	r1, r3, #27
1a004670:	bf44      	itt	mi
1a004672:	2220      	movmi	r2, #32
1a004674:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004678:	071a      	lsls	r2, r3, #28
1a00467a:	bf44      	itt	mi
1a00467c:	222b      	movmi	r2, #43	; 0x2b
1a00467e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a004682:	782a      	ldrb	r2, [r5, #0]
1a004684:	2a2a      	cmp	r2, #42	; 0x2a
1a004686:	d02a      	beq.n	1a0046de <_vfiprintf_r+0x10e>
1a004688:	9a07      	ldr	r2, [sp, #28]
1a00468a:	46a8      	mov	r8, r5
1a00468c:	2000      	movs	r0, #0
1a00468e:	250a      	movs	r5, #10
1a004690:	4641      	mov	r1, r8
1a004692:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004696:	3b30      	subs	r3, #48	; 0x30
1a004698:	2b09      	cmp	r3, #9
1a00469a:	d969      	bls.n	1a004770 <_vfiprintf_r+0x1a0>
1a00469c:	b360      	cbz	r0, 1a0046f8 <_vfiprintf_r+0x128>
1a00469e:	e024      	b.n	1a0046ea <_vfiprintf_r+0x11a>
1a0046a0:	4b50      	ldr	r3, [pc, #320]	; (1a0047e4 <_vfiprintf_r+0x214>)
1a0046a2:	429c      	cmp	r4, r3
1a0046a4:	d101      	bne.n	1a0046aa <_vfiprintf_r+0xda>
1a0046a6:	68b4      	ldr	r4, [r6, #8]
1a0046a8:	e7a2      	b.n	1a0045f0 <_vfiprintf_r+0x20>
1a0046aa:	4b4f      	ldr	r3, [pc, #316]	; (1a0047e8 <_vfiprintf_r+0x218>)
1a0046ac:	429c      	cmp	r4, r3
1a0046ae:	bf08      	it	eq
1a0046b0:	68f4      	ldreq	r4, [r6, #12]
1a0046b2:	e79d      	b.n	1a0045f0 <_vfiprintf_r+0x20>
1a0046b4:	4621      	mov	r1, r4
1a0046b6:	4630      	mov	r0, r6
1a0046b8:	f7ff fe8c 	bl	1a0043d4 <__swsetup_r>
1a0046bc:	2800      	cmp	r0, #0
1a0046be:	d09d      	beq.n	1a0045fc <_vfiprintf_r+0x2c>
1a0046c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0046c4:	b01d      	add	sp, #116	; 0x74
1a0046c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0046ca:	46a8      	mov	r8, r5
1a0046cc:	e7a2      	b.n	1a004614 <_vfiprintf_r+0x44>
1a0046ce:	4a44      	ldr	r2, [pc, #272]	; (1a0047e0 <_vfiprintf_r+0x210>)
1a0046d0:	1a80      	subs	r0, r0, r2
1a0046d2:	fa0b f000 	lsl.w	r0, fp, r0
1a0046d6:	4318      	orrs	r0, r3
1a0046d8:	9004      	str	r0, [sp, #16]
1a0046da:	4645      	mov	r5, r8
1a0046dc:	e7be      	b.n	1a00465c <_vfiprintf_r+0x8c>
1a0046de:	9a03      	ldr	r2, [sp, #12]
1a0046e0:	1d11      	adds	r1, r2, #4
1a0046e2:	6812      	ldr	r2, [r2, #0]
1a0046e4:	9103      	str	r1, [sp, #12]
1a0046e6:	2a00      	cmp	r2, #0
1a0046e8:	db01      	blt.n	1a0046ee <_vfiprintf_r+0x11e>
1a0046ea:	9207      	str	r2, [sp, #28]
1a0046ec:	e004      	b.n	1a0046f8 <_vfiprintf_r+0x128>
1a0046ee:	4252      	negs	r2, r2
1a0046f0:	f043 0302 	orr.w	r3, r3, #2
1a0046f4:	9207      	str	r2, [sp, #28]
1a0046f6:	9304      	str	r3, [sp, #16]
1a0046f8:	f898 3000 	ldrb.w	r3, [r8]
1a0046fc:	2b2e      	cmp	r3, #46	; 0x2e
1a0046fe:	d10e      	bne.n	1a00471e <_vfiprintf_r+0x14e>
1a004700:	f898 3001 	ldrb.w	r3, [r8, #1]
1a004704:	2b2a      	cmp	r3, #42	; 0x2a
1a004706:	d138      	bne.n	1a00477a <_vfiprintf_r+0x1aa>
1a004708:	9b03      	ldr	r3, [sp, #12]
1a00470a:	1d1a      	adds	r2, r3, #4
1a00470c:	681b      	ldr	r3, [r3, #0]
1a00470e:	9203      	str	r2, [sp, #12]
1a004710:	2b00      	cmp	r3, #0
1a004712:	bfb8      	it	lt
1a004714:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a004718:	f108 0802 	add.w	r8, r8, #2
1a00471c:	9305      	str	r3, [sp, #20]
1a00471e:	4d33      	ldr	r5, [pc, #204]	; (1a0047ec <_vfiprintf_r+0x21c>)
1a004720:	f898 1000 	ldrb.w	r1, [r8]
1a004724:	2203      	movs	r2, #3
1a004726:	4628      	mov	r0, r5
1a004728:	f000 f9f2 	bl	1a004b10 <memchr>
1a00472c:	b140      	cbz	r0, 1a004740 <_vfiprintf_r+0x170>
1a00472e:	2340      	movs	r3, #64	; 0x40
1a004730:	1b40      	subs	r0, r0, r5
1a004732:	fa03 f000 	lsl.w	r0, r3, r0
1a004736:	9b04      	ldr	r3, [sp, #16]
1a004738:	4303      	orrs	r3, r0
1a00473a:	f108 0801 	add.w	r8, r8, #1
1a00473e:	9304      	str	r3, [sp, #16]
1a004740:	f898 1000 	ldrb.w	r1, [r8]
1a004744:	482a      	ldr	r0, [pc, #168]	; (1a0047f0 <_vfiprintf_r+0x220>)
1a004746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a00474a:	2206      	movs	r2, #6
1a00474c:	f108 0701 	add.w	r7, r8, #1
1a004750:	f000 f9de 	bl	1a004b10 <memchr>
1a004754:	2800      	cmp	r0, #0
1a004756:	d037      	beq.n	1a0047c8 <_vfiprintf_r+0x1f8>
1a004758:	4b26      	ldr	r3, [pc, #152]	; (1a0047f4 <_vfiprintf_r+0x224>)
1a00475a:	bb1b      	cbnz	r3, 1a0047a4 <_vfiprintf_r+0x1d4>
1a00475c:	9b03      	ldr	r3, [sp, #12]
1a00475e:	3307      	adds	r3, #7
1a004760:	f023 0307 	bic.w	r3, r3, #7
1a004764:	3308      	adds	r3, #8
1a004766:	9303      	str	r3, [sp, #12]
1a004768:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00476a:	444b      	add	r3, r9
1a00476c:	9309      	str	r3, [sp, #36]	; 0x24
1a00476e:	e750      	b.n	1a004612 <_vfiprintf_r+0x42>
1a004770:	fb05 3202 	mla	r2, r5, r2, r3
1a004774:	2001      	movs	r0, #1
1a004776:	4688      	mov	r8, r1
1a004778:	e78a      	b.n	1a004690 <_vfiprintf_r+0xc0>
1a00477a:	2300      	movs	r3, #0
1a00477c:	f108 0801 	add.w	r8, r8, #1
1a004780:	9305      	str	r3, [sp, #20]
1a004782:	4619      	mov	r1, r3
1a004784:	250a      	movs	r5, #10
1a004786:	4640      	mov	r0, r8
1a004788:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00478c:	3a30      	subs	r2, #48	; 0x30
1a00478e:	2a09      	cmp	r2, #9
1a004790:	d903      	bls.n	1a00479a <_vfiprintf_r+0x1ca>
1a004792:	2b00      	cmp	r3, #0
1a004794:	d0c3      	beq.n	1a00471e <_vfiprintf_r+0x14e>
1a004796:	9105      	str	r1, [sp, #20]
1a004798:	e7c1      	b.n	1a00471e <_vfiprintf_r+0x14e>
1a00479a:	fb05 2101 	mla	r1, r5, r1, r2
1a00479e:	2301      	movs	r3, #1
1a0047a0:	4680      	mov	r8, r0
1a0047a2:	e7f0      	b.n	1a004786 <_vfiprintf_r+0x1b6>
1a0047a4:	ab03      	add	r3, sp, #12
1a0047a6:	9300      	str	r3, [sp, #0]
1a0047a8:	4622      	mov	r2, r4
1a0047aa:	4b13      	ldr	r3, [pc, #76]	; (1a0047f8 <_vfiprintf_r+0x228>)
1a0047ac:	a904      	add	r1, sp, #16
1a0047ae:	4630      	mov	r0, r6
1a0047b0:	f3af 8000 	nop.w
1a0047b4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0047b8:	4681      	mov	r9, r0
1a0047ba:	d1d5      	bne.n	1a004768 <_vfiprintf_r+0x198>
1a0047bc:	89a3      	ldrh	r3, [r4, #12]
1a0047be:	065b      	lsls	r3, r3, #25
1a0047c0:	f53f af7e 	bmi.w	1a0046c0 <_vfiprintf_r+0xf0>
1a0047c4:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0047c6:	e77d      	b.n	1a0046c4 <_vfiprintf_r+0xf4>
1a0047c8:	ab03      	add	r3, sp, #12
1a0047ca:	9300      	str	r3, [sp, #0]
1a0047cc:	4622      	mov	r2, r4
1a0047ce:	4b0a      	ldr	r3, [pc, #40]	; (1a0047f8 <_vfiprintf_r+0x228>)
1a0047d0:	a904      	add	r1, sp, #16
1a0047d2:	4630      	mov	r0, r6
1a0047d4:	f000 f888 	bl	1a0048e8 <_printf_i>
1a0047d8:	e7ec      	b.n	1a0047b4 <_vfiprintf_r+0x1e4>
1a0047da:	bf00      	nop
1a0047dc:	1a004f9c 	.word	0x1a004f9c
1a0047e0:	1a004fe0 	.word	0x1a004fe0
1a0047e4:	1a004fbc 	.word	0x1a004fbc
1a0047e8:	1a004f7c 	.word	0x1a004f7c
1a0047ec:	1a004fe6 	.word	0x1a004fe6
1a0047f0:	1a004fea 	.word	0x1a004fea
1a0047f4:	00000000 	.word	0x00000000
1a0047f8:	1a0045ab 	.word	0x1a0045ab

1a0047fc <_printf_common>:
1a0047fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004800:	4691      	mov	r9, r2
1a004802:	461f      	mov	r7, r3
1a004804:	688a      	ldr	r2, [r1, #8]
1a004806:	690b      	ldr	r3, [r1, #16]
1a004808:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00480c:	4293      	cmp	r3, r2
1a00480e:	bfb8      	it	lt
1a004810:	4613      	movlt	r3, r2
1a004812:	f8c9 3000 	str.w	r3, [r9]
1a004816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a00481a:	4606      	mov	r6, r0
1a00481c:	460c      	mov	r4, r1
1a00481e:	b112      	cbz	r2, 1a004826 <_printf_common+0x2a>
1a004820:	3301      	adds	r3, #1
1a004822:	f8c9 3000 	str.w	r3, [r9]
1a004826:	6823      	ldr	r3, [r4, #0]
1a004828:	0699      	lsls	r1, r3, #26
1a00482a:	bf42      	ittt	mi
1a00482c:	f8d9 3000 	ldrmi.w	r3, [r9]
1a004830:	3302      	addmi	r3, #2
1a004832:	f8c9 3000 	strmi.w	r3, [r9]
1a004836:	6825      	ldr	r5, [r4, #0]
1a004838:	f015 0506 	ands.w	r5, r5, #6
1a00483c:	d107      	bne.n	1a00484e <_printf_common+0x52>
1a00483e:	f104 0a19 	add.w	sl, r4, #25
1a004842:	68e3      	ldr	r3, [r4, #12]
1a004844:	f8d9 2000 	ldr.w	r2, [r9]
1a004848:	1a9b      	subs	r3, r3, r2
1a00484a:	42ab      	cmp	r3, r5
1a00484c:	dc28      	bgt.n	1a0048a0 <_printf_common+0xa4>
1a00484e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004852:	6822      	ldr	r2, [r4, #0]
1a004854:	3300      	adds	r3, #0
1a004856:	bf18      	it	ne
1a004858:	2301      	movne	r3, #1
1a00485a:	0692      	lsls	r2, r2, #26
1a00485c:	d42d      	bmi.n	1a0048ba <_printf_common+0xbe>
1a00485e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004862:	4639      	mov	r1, r7
1a004864:	4630      	mov	r0, r6
1a004866:	47c0      	blx	r8
1a004868:	3001      	adds	r0, #1
1a00486a:	d020      	beq.n	1a0048ae <_printf_common+0xb2>
1a00486c:	6823      	ldr	r3, [r4, #0]
1a00486e:	68e5      	ldr	r5, [r4, #12]
1a004870:	f8d9 2000 	ldr.w	r2, [r9]
1a004874:	f003 0306 	and.w	r3, r3, #6
1a004878:	2b04      	cmp	r3, #4
1a00487a:	bf08      	it	eq
1a00487c:	1aad      	subeq	r5, r5, r2
1a00487e:	68a3      	ldr	r3, [r4, #8]
1a004880:	6922      	ldr	r2, [r4, #16]
1a004882:	bf0c      	ite	eq
1a004884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a004888:	2500      	movne	r5, #0
1a00488a:	4293      	cmp	r3, r2
1a00488c:	bfc4      	itt	gt
1a00488e:	1a9b      	subgt	r3, r3, r2
1a004890:	18ed      	addgt	r5, r5, r3
1a004892:	f04f 0900 	mov.w	r9, #0
1a004896:	341a      	adds	r4, #26
1a004898:	454d      	cmp	r5, r9
1a00489a:	d11a      	bne.n	1a0048d2 <_printf_common+0xd6>
1a00489c:	2000      	movs	r0, #0
1a00489e:	e008      	b.n	1a0048b2 <_printf_common+0xb6>
1a0048a0:	2301      	movs	r3, #1
1a0048a2:	4652      	mov	r2, sl
1a0048a4:	4639      	mov	r1, r7
1a0048a6:	4630      	mov	r0, r6
1a0048a8:	47c0      	blx	r8
1a0048aa:	3001      	adds	r0, #1
1a0048ac:	d103      	bne.n	1a0048b6 <_printf_common+0xba>
1a0048ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0048b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0048b6:	3501      	adds	r5, #1
1a0048b8:	e7c3      	b.n	1a004842 <_printf_common+0x46>
1a0048ba:	18e1      	adds	r1, r4, r3
1a0048bc:	1c5a      	adds	r2, r3, #1
1a0048be:	2030      	movs	r0, #48	; 0x30
1a0048c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a0048c4:	4422      	add	r2, r4
1a0048c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a0048ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a0048ce:	3302      	adds	r3, #2
1a0048d0:	e7c5      	b.n	1a00485e <_printf_common+0x62>
1a0048d2:	2301      	movs	r3, #1
1a0048d4:	4622      	mov	r2, r4
1a0048d6:	4639      	mov	r1, r7
1a0048d8:	4630      	mov	r0, r6
1a0048da:	47c0      	blx	r8
1a0048dc:	3001      	adds	r0, #1
1a0048de:	d0e6      	beq.n	1a0048ae <_printf_common+0xb2>
1a0048e0:	f109 0901 	add.w	r9, r9, #1
1a0048e4:	e7d8      	b.n	1a004898 <_printf_common+0x9c>
1a0048e6:	Address 0x000000001a0048e6 is out of bounds.


1a0048e8 <_printf_i>:
1a0048e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0048ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a0048f0:	460c      	mov	r4, r1
1a0048f2:	7e09      	ldrb	r1, [r1, #24]
1a0048f4:	b085      	sub	sp, #20
1a0048f6:	296e      	cmp	r1, #110	; 0x6e
1a0048f8:	4617      	mov	r7, r2
1a0048fa:	4606      	mov	r6, r0
1a0048fc:	4698      	mov	r8, r3
1a0048fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004900:	f000 80b3 	beq.w	1a004a6a <_printf_i+0x182>
1a004904:	d822      	bhi.n	1a00494c <_printf_i+0x64>
1a004906:	2963      	cmp	r1, #99	; 0x63
1a004908:	d036      	beq.n	1a004978 <_printf_i+0x90>
1a00490a:	d80a      	bhi.n	1a004922 <_printf_i+0x3a>
1a00490c:	2900      	cmp	r1, #0
1a00490e:	f000 80b9 	beq.w	1a004a84 <_printf_i+0x19c>
1a004912:	2958      	cmp	r1, #88	; 0x58
1a004914:	f000 8083 	beq.w	1a004a1e <_printf_i+0x136>
1a004918:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00491c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004920:	e032      	b.n	1a004988 <_printf_i+0xa0>
1a004922:	2964      	cmp	r1, #100	; 0x64
1a004924:	d001      	beq.n	1a00492a <_printf_i+0x42>
1a004926:	2969      	cmp	r1, #105	; 0x69
1a004928:	d1f6      	bne.n	1a004918 <_printf_i+0x30>
1a00492a:	6820      	ldr	r0, [r4, #0]
1a00492c:	6813      	ldr	r3, [r2, #0]
1a00492e:	0605      	lsls	r5, r0, #24
1a004930:	f103 0104 	add.w	r1, r3, #4
1a004934:	d52a      	bpl.n	1a00498c <_printf_i+0xa4>
1a004936:	681b      	ldr	r3, [r3, #0]
1a004938:	6011      	str	r1, [r2, #0]
1a00493a:	2b00      	cmp	r3, #0
1a00493c:	da03      	bge.n	1a004946 <_printf_i+0x5e>
1a00493e:	222d      	movs	r2, #45	; 0x2d
1a004940:	425b      	negs	r3, r3
1a004942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a004946:	486f      	ldr	r0, [pc, #444]	; (1a004b04 <_printf_i+0x21c>)
1a004948:	220a      	movs	r2, #10
1a00494a:	e039      	b.n	1a0049c0 <_printf_i+0xd8>
1a00494c:	2973      	cmp	r1, #115	; 0x73
1a00494e:	f000 809d 	beq.w	1a004a8c <_printf_i+0x1a4>
1a004952:	d808      	bhi.n	1a004966 <_printf_i+0x7e>
1a004954:	296f      	cmp	r1, #111	; 0x6f
1a004956:	d020      	beq.n	1a00499a <_printf_i+0xb2>
1a004958:	2970      	cmp	r1, #112	; 0x70
1a00495a:	d1dd      	bne.n	1a004918 <_printf_i+0x30>
1a00495c:	6823      	ldr	r3, [r4, #0]
1a00495e:	f043 0320 	orr.w	r3, r3, #32
1a004962:	6023      	str	r3, [r4, #0]
1a004964:	e003      	b.n	1a00496e <_printf_i+0x86>
1a004966:	2975      	cmp	r1, #117	; 0x75
1a004968:	d017      	beq.n	1a00499a <_printf_i+0xb2>
1a00496a:	2978      	cmp	r1, #120	; 0x78
1a00496c:	d1d4      	bne.n	1a004918 <_printf_i+0x30>
1a00496e:	2378      	movs	r3, #120	; 0x78
1a004970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004974:	4864      	ldr	r0, [pc, #400]	; (1a004b08 <_printf_i+0x220>)
1a004976:	e055      	b.n	1a004a24 <_printf_i+0x13c>
1a004978:	6813      	ldr	r3, [r2, #0]
1a00497a:	1d19      	adds	r1, r3, #4
1a00497c:	681b      	ldr	r3, [r3, #0]
1a00497e:	6011      	str	r1, [r2, #0]
1a004980:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004988:	2301      	movs	r3, #1
1a00498a:	e08c      	b.n	1a004aa6 <_printf_i+0x1be>
1a00498c:	681b      	ldr	r3, [r3, #0]
1a00498e:	6011      	str	r1, [r2, #0]
1a004990:	f010 0f40 	tst.w	r0, #64	; 0x40
1a004994:	bf18      	it	ne
1a004996:	b21b      	sxthne	r3, r3
1a004998:	e7cf      	b.n	1a00493a <_printf_i+0x52>
1a00499a:	6813      	ldr	r3, [r2, #0]
1a00499c:	6825      	ldr	r5, [r4, #0]
1a00499e:	1d18      	adds	r0, r3, #4
1a0049a0:	6010      	str	r0, [r2, #0]
1a0049a2:	0628      	lsls	r0, r5, #24
1a0049a4:	d501      	bpl.n	1a0049aa <_printf_i+0xc2>
1a0049a6:	681b      	ldr	r3, [r3, #0]
1a0049a8:	e002      	b.n	1a0049b0 <_printf_i+0xc8>
1a0049aa:	0668      	lsls	r0, r5, #25
1a0049ac:	d5fb      	bpl.n	1a0049a6 <_printf_i+0xbe>
1a0049ae:	881b      	ldrh	r3, [r3, #0]
1a0049b0:	4854      	ldr	r0, [pc, #336]	; (1a004b04 <_printf_i+0x21c>)
1a0049b2:	296f      	cmp	r1, #111	; 0x6f
1a0049b4:	bf14      	ite	ne
1a0049b6:	220a      	movne	r2, #10
1a0049b8:	2208      	moveq	r2, #8
1a0049ba:	2100      	movs	r1, #0
1a0049bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a0049c0:	6865      	ldr	r5, [r4, #4]
1a0049c2:	60a5      	str	r5, [r4, #8]
1a0049c4:	2d00      	cmp	r5, #0
1a0049c6:	f2c0 8095 	blt.w	1a004af4 <_printf_i+0x20c>
1a0049ca:	6821      	ldr	r1, [r4, #0]
1a0049cc:	f021 0104 	bic.w	r1, r1, #4
1a0049d0:	6021      	str	r1, [r4, #0]
1a0049d2:	2b00      	cmp	r3, #0
1a0049d4:	d13d      	bne.n	1a004a52 <_printf_i+0x16a>
1a0049d6:	2d00      	cmp	r5, #0
1a0049d8:	f040 808e 	bne.w	1a004af8 <_printf_i+0x210>
1a0049dc:	4665      	mov	r5, ip
1a0049de:	2a08      	cmp	r2, #8
1a0049e0:	d10b      	bne.n	1a0049fa <_printf_i+0x112>
1a0049e2:	6823      	ldr	r3, [r4, #0]
1a0049e4:	07db      	lsls	r3, r3, #31
1a0049e6:	d508      	bpl.n	1a0049fa <_printf_i+0x112>
1a0049e8:	6923      	ldr	r3, [r4, #16]
1a0049ea:	6862      	ldr	r2, [r4, #4]
1a0049ec:	429a      	cmp	r2, r3
1a0049ee:	bfde      	ittt	le
1a0049f0:	2330      	movle	r3, #48	; 0x30
1a0049f2:	f805 3c01 	strble.w	r3, [r5, #-1]
1a0049f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0049fa:	ebac 0305 	sub.w	r3, ip, r5
1a0049fe:	6123      	str	r3, [r4, #16]
1a004a00:	f8cd 8000 	str.w	r8, [sp]
1a004a04:	463b      	mov	r3, r7
1a004a06:	aa03      	add	r2, sp, #12
1a004a08:	4621      	mov	r1, r4
1a004a0a:	4630      	mov	r0, r6
1a004a0c:	f7ff fef6 	bl	1a0047fc <_printf_common>
1a004a10:	3001      	adds	r0, #1
1a004a12:	d14d      	bne.n	1a004ab0 <_printf_i+0x1c8>
1a004a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a18:	b005      	add	sp, #20
1a004a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004a1e:	4839      	ldr	r0, [pc, #228]	; (1a004b04 <_printf_i+0x21c>)
1a004a20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a004a24:	6813      	ldr	r3, [r2, #0]
1a004a26:	6821      	ldr	r1, [r4, #0]
1a004a28:	1d1d      	adds	r5, r3, #4
1a004a2a:	681b      	ldr	r3, [r3, #0]
1a004a2c:	6015      	str	r5, [r2, #0]
1a004a2e:	060a      	lsls	r2, r1, #24
1a004a30:	d50b      	bpl.n	1a004a4a <_printf_i+0x162>
1a004a32:	07ca      	lsls	r2, r1, #31
1a004a34:	bf44      	itt	mi
1a004a36:	f041 0120 	orrmi.w	r1, r1, #32
1a004a3a:	6021      	strmi	r1, [r4, #0]
1a004a3c:	b91b      	cbnz	r3, 1a004a46 <_printf_i+0x15e>
1a004a3e:	6822      	ldr	r2, [r4, #0]
1a004a40:	f022 0220 	bic.w	r2, r2, #32
1a004a44:	6022      	str	r2, [r4, #0]
1a004a46:	2210      	movs	r2, #16
1a004a48:	e7b7      	b.n	1a0049ba <_printf_i+0xd2>
1a004a4a:	064d      	lsls	r5, r1, #25
1a004a4c:	bf48      	it	mi
1a004a4e:	b29b      	uxthmi	r3, r3
1a004a50:	e7ef      	b.n	1a004a32 <_printf_i+0x14a>
1a004a52:	4665      	mov	r5, ip
1a004a54:	fbb3 f1f2 	udiv	r1, r3, r2
1a004a58:	fb02 3311 	mls	r3, r2, r1, r3
1a004a5c:	5cc3      	ldrb	r3, [r0, r3]
1a004a5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a004a62:	460b      	mov	r3, r1
1a004a64:	2900      	cmp	r1, #0
1a004a66:	d1f5      	bne.n	1a004a54 <_printf_i+0x16c>
1a004a68:	e7b9      	b.n	1a0049de <_printf_i+0xf6>
1a004a6a:	6813      	ldr	r3, [r2, #0]
1a004a6c:	6825      	ldr	r5, [r4, #0]
1a004a6e:	6961      	ldr	r1, [r4, #20]
1a004a70:	1d18      	adds	r0, r3, #4
1a004a72:	6010      	str	r0, [r2, #0]
1a004a74:	0628      	lsls	r0, r5, #24
1a004a76:	681b      	ldr	r3, [r3, #0]
1a004a78:	d501      	bpl.n	1a004a7e <_printf_i+0x196>
1a004a7a:	6019      	str	r1, [r3, #0]
1a004a7c:	e002      	b.n	1a004a84 <_printf_i+0x19c>
1a004a7e:	066a      	lsls	r2, r5, #25
1a004a80:	d5fb      	bpl.n	1a004a7a <_printf_i+0x192>
1a004a82:	8019      	strh	r1, [r3, #0]
1a004a84:	2300      	movs	r3, #0
1a004a86:	6123      	str	r3, [r4, #16]
1a004a88:	4665      	mov	r5, ip
1a004a8a:	e7b9      	b.n	1a004a00 <_printf_i+0x118>
1a004a8c:	6813      	ldr	r3, [r2, #0]
1a004a8e:	1d19      	adds	r1, r3, #4
1a004a90:	6011      	str	r1, [r2, #0]
1a004a92:	681d      	ldr	r5, [r3, #0]
1a004a94:	6862      	ldr	r2, [r4, #4]
1a004a96:	2100      	movs	r1, #0
1a004a98:	4628      	mov	r0, r5
1a004a9a:	f000 f839 	bl	1a004b10 <memchr>
1a004a9e:	b108      	cbz	r0, 1a004aa4 <_printf_i+0x1bc>
1a004aa0:	1b40      	subs	r0, r0, r5
1a004aa2:	6060      	str	r0, [r4, #4]
1a004aa4:	6863      	ldr	r3, [r4, #4]
1a004aa6:	6123      	str	r3, [r4, #16]
1a004aa8:	2300      	movs	r3, #0
1a004aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004aae:	e7a7      	b.n	1a004a00 <_printf_i+0x118>
1a004ab0:	6923      	ldr	r3, [r4, #16]
1a004ab2:	462a      	mov	r2, r5
1a004ab4:	4639      	mov	r1, r7
1a004ab6:	4630      	mov	r0, r6
1a004ab8:	47c0      	blx	r8
1a004aba:	3001      	adds	r0, #1
1a004abc:	d0aa      	beq.n	1a004a14 <_printf_i+0x12c>
1a004abe:	6823      	ldr	r3, [r4, #0]
1a004ac0:	079b      	lsls	r3, r3, #30
1a004ac2:	d413      	bmi.n	1a004aec <_printf_i+0x204>
1a004ac4:	68e0      	ldr	r0, [r4, #12]
1a004ac6:	9b03      	ldr	r3, [sp, #12]
1a004ac8:	4298      	cmp	r0, r3
1a004aca:	bfb8      	it	lt
1a004acc:	4618      	movlt	r0, r3
1a004ace:	e7a3      	b.n	1a004a18 <_printf_i+0x130>
1a004ad0:	2301      	movs	r3, #1
1a004ad2:	464a      	mov	r2, r9
1a004ad4:	4639      	mov	r1, r7
1a004ad6:	4630      	mov	r0, r6
1a004ad8:	47c0      	blx	r8
1a004ada:	3001      	adds	r0, #1
1a004adc:	d09a      	beq.n	1a004a14 <_printf_i+0x12c>
1a004ade:	3501      	adds	r5, #1
1a004ae0:	68e3      	ldr	r3, [r4, #12]
1a004ae2:	9a03      	ldr	r2, [sp, #12]
1a004ae4:	1a9b      	subs	r3, r3, r2
1a004ae6:	42ab      	cmp	r3, r5
1a004ae8:	dcf2      	bgt.n	1a004ad0 <_printf_i+0x1e8>
1a004aea:	e7eb      	b.n	1a004ac4 <_printf_i+0x1dc>
1a004aec:	2500      	movs	r5, #0
1a004aee:	f104 0919 	add.w	r9, r4, #25
1a004af2:	e7f5      	b.n	1a004ae0 <_printf_i+0x1f8>
1a004af4:	2b00      	cmp	r3, #0
1a004af6:	d1ac      	bne.n	1a004a52 <_printf_i+0x16a>
1a004af8:	7803      	ldrb	r3, [r0, #0]
1a004afa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004afe:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004b02:	e76c      	b.n	1a0049de <_printf_i+0xf6>
1a004b04:	1a004ff1 	.word	0x1a004ff1
1a004b08:	1a005002 	.word	0x1a005002
1a004b0c:	ffffffff 	.word	0xffffffff

1a004b10 <memchr>:
1a004b10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004b14:	2a10      	cmp	r2, #16
1a004b16:	db2b      	blt.n	1a004b70 <memchr+0x60>
1a004b18:	f010 0f07 	tst.w	r0, #7
1a004b1c:	d008      	beq.n	1a004b30 <memchr+0x20>
1a004b1e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004b22:	3a01      	subs	r2, #1
1a004b24:	428b      	cmp	r3, r1
1a004b26:	d02d      	beq.n	1a004b84 <memchr+0x74>
1a004b28:	f010 0f07 	tst.w	r0, #7
1a004b2c:	b342      	cbz	r2, 1a004b80 <memchr+0x70>
1a004b2e:	d1f6      	bne.n	1a004b1e <memchr+0xe>
1a004b30:	b4f0      	push	{r4, r5, r6, r7}
1a004b32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004b36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004b3a:	f022 0407 	bic.w	r4, r2, #7
1a004b3e:	f07f 0700 	mvns.w	r7, #0
1a004b42:	2300      	movs	r3, #0
1a004b44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004b48:	3c08      	subs	r4, #8
1a004b4a:	ea85 0501 	eor.w	r5, r5, r1
1a004b4e:	ea86 0601 	eor.w	r6, r6, r1
1a004b52:	fa85 f547 	uadd8	r5, r5, r7
1a004b56:	faa3 f587 	sel	r5, r3, r7
1a004b5a:	fa86 f647 	uadd8	r6, r6, r7
1a004b5e:	faa5 f687 	sel	r6, r5, r7
1a004b62:	b98e      	cbnz	r6, 1a004b88 <memchr+0x78>
1a004b64:	d1ee      	bne.n	1a004b44 <memchr+0x34>
1a004b66:	bcf0      	pop	{r4, r5, r6, r7}
1a004b68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004b6c:	f002 0207 	and.w	r2, r2, #7
1a004b70:	b132      	cbz	r2, 1a004b80 <memchr+0x70>
1a004b72:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004b76:	3a01      	subs	r2, #1
1a004b78:	ea83 0301 	eor.w	r3, r3, r1
1a004b7c:	b113      	cbz	r3, 1a004b84 <memchr+0x74>
1a004b7e:	d1f8      	bne.n	1a004b72 <memchr+0x62>
1a004b80:	2000      	movs	r0, #0
1a004b82:	4770      	bx	lr
1a004b84:	3801      	subs	r0, #1
1a004b86:	4770      	bx	lr
1a004b88:	2d00      	cmp	r5, #0
1a004b8a:	bf06      	itte	eq
1a004b8c:	4635      	moveq	r5, r6
1a004b8e:	3803      	subeq	r0, #3
1a004b90:	3807      	subne	r0, #7
1a004b92:	f015 0f01 	tst.w	r5, #1
1a004b96:	d107      	bne.n	1a004ba8 <memchr+0x98>
1a004b98:	3001      	adds	r0, #1
1a004b9a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004b9e:	bf02      	ittt	eq
1a004ba0:	3001      	addeq	r0, #1
1a004ba2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004ba6:	3001      	addeq	r0, #1
1a004ba8:	bcf0      	pop	{r4, r5, r6, r7}
1a004baa:	3801      	subs	r0, #1
1a004bac:	4770      	bx	lr
1a004bae:	bf00      	nop
1a004bb0:	534f5452 	.word	0x534f5452
1a004bb4:	6c432032 	.word	0x6c432032
1a004bb8:	32657361 	.word	0x32657361
1a004bbc:	3150545f 	.word	0x3150545f
1a004bc0:	00000000 	.word	0x00000000
1a004bc4:	4b647075 	.word	0x4b647075
1a004bc8:	4d737965 	.word	0x4d737965
1a004bcc:	00006665 	.word	0x00006665
1a004bd0:	6154796d 	.word	0x6154796d
1a004bd4:	654c6b73 	.word	0x654c6b73
1a004bd8:	72655064 	.word	0x72655064
1a004bdc:	69646f69 	.word	0x69646f69
1a004be0:	00006f63 	.word	0x00006f63
1a004be4:	51647075 	.word	0x51647075
1a004be8:	65756575 	.word	0x65756575
1a004bec:	41556f54 	.word	0x41556f54
1a004bf0:	ff005452 	.word	0xff005452
1a004bf4:	75657571 	.word	0x75657571
1a004bf8:	556f5465 	.word	0x556f5465
1a004bfc:	3a545241 	.word	0x3a545241
1a004c00:	0a732520 	.word	0x0a732520
1a004c04:	ffffff00 	.word	0xffffff00
1a004c08:	6c707041 	.word	0x6c707041
1a004c0c:	74616369 	.word	0x74616369
1a004c10:	206e6f69 	.word	0x206e6f69
1a004c14:	6c6c614d 	.word	0x6c6c614d
1a004c18:	4620636f 	.word	0x4620636f
1a004c1c:	656c6961 	.word	0x656c6961
1a004c20:	6f482064 	.word	0x6f482064
1a004c24:	0d216b6f 	.word	0x0d216b6f
1a004c28:	00000000 	.word	0x00000000
1a004c2c:	7362696c 	.word	0x7362696c
1a004c30:	6572662f 	.word	0x6572662f
1a004c34:	6f747265 	.word	0x6f747265
1a004c38:	6f732f73 	.word	0x6f732f73
1a004c3c:	65637275 	.word	0x65637275
1a004c40:	6f6f682f 	.word	0x6f6f682f
1a004c44:	632e736b 	.word	0x632e736b
1a004c48:	ffffff00 	.word	0xffffff00
1a004c4c:	70410a0d 	.word	0x70410a0d
1a004c50:	63696c70 	.word	0x63696c70
1a004c54:	6f697461 	.word	0x6f697461
1a004c58:	7453206e 	.word	0x7453206e
1a004c5c:	206b6361 	.word	0x206b6361
1a004c60:	7265764f 	.word	0x7265764f
1a004c64:	776f6c66 	.word	0x776f6c66
1a004c68:	6f202121 	.word	0x6f202121
1a004c6c:	6154206e 	.word	0x6154206e
1a004c70:	203a6b73 	.word	0x203a6b73
1a004c74:	0a0d7325 	.word	0x0a0d7325
1a004c78:	ffffff00 	.word	0xffffff00
1a004c7c:	41760a0d 	.word	0x41760a0d
1a004c80:	72657373 	.word	0x72657373
1a004c84:	6c614374 	.word	0x6c614374
1a004c88:	2864656c 	.word	0x2864656c
1a004c8c:	200a0d29 	.word	0x200a0d29
1a004c90:	4c4c2020 	.word	0x4c4c2020
1a004c94:	20656e69 	.word	0x20656e69
1a004c98:	626d754e 	.word	0x626d754e
1a004c9c:	3d207265 	.word	0x3d207265
1a004ca0:	0d642520 	.word	0x0d642520
1a004ca4:	2020200a 	.word	0x2020200a
1a004ca8:	656c6946 	.word	0x656c6946
1a004cac:	6d614e20 	.word	0x6d614e20
1a004cb0:	203d2065 	.word	0x203d2065
1a004cb4:	0a0d7325 	.word	0x0a0d7325
1a004cb8:	ff000a0d 	.word	0xff000a0d
1a004cbc:	454c4449 	.word	0x454c4449
1a004cc0:	ffffff00 	.word	0xffffff00
1a004cc4:	51726d54 	.word	0x51726d54
1a004cc8:	ffffff00 	.word	0xffffff00
1a004ccc:	20726d54 	.word	0x20726d54
1a004cd0:	00637653 	.word	0x00637653

1a004cd4 <ExtRateIn>:
1a004cd4:	00000000                                ....

1a004cd8 <GpioButtons>:
1a004cd8:	08000400 09010900                       ........

1a004ce0 <GpioLeds>:
1a004ce0:	01050005 0e000205 0c010b01              ............

1a004cec <GpioPorts>:
1a004cec:	03030003 0f050403 05031005 07030603     ................
1a004cfc:	ffff0802                                ....

1a004d00 <OscRateIn>:
1a004d00:	00b71b00                                ....

1a004d04 <InitClkStates>:
1a004d04:	01010f01                                ....

1a004d08 <pinmuxing>:
1a004d08:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004d18:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004d28:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004d38:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004d48:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004d58:	00d50301 00d50401 00160107 00560207     ..............V.
1a004d68:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004d78:	00570206                                ..W.

1a004d7c <UART_BClock>:
1a004d7c:	01a201c2 01620182                       ......b.

1a004d84 <UART_PClock>:
1a004d84:	00820081 00a200a1 08040201 0f0f0f03     ................
1a004d94:	ffff00ff                                ....

1a004d98 <periph_to_base>:
1a004d98:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004da8:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004db8:	000100e0 01000100 01200003 00060120     .......... . ...
1a004dc8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004dd8:	01820013 00120182 01a201a2 01c20011     ................
1a004de8:	001001c2 01e201e2 0202000f 000e0202     ................
1a004df8:	02220222 0223000d 001c0223              "."...#.#...

1a004e04 <InitClkStates>:
1a004e04:	00010100 00010909 0001090a 01010701     ................
1a004e14:	00010902 00010906 0101090c 0001090d     ................
1a004e24:	0001090e 0001090f 00010910 00010911     ................
1a004e34:	00010912 00010913 00011114 00011119     ................
1a004e44:	0001111a 0001111b                       ........

1a004e4c <lpcUarts>:
1a004e4c:	40081000 06020406 00180205 40081000     ...@...........@
1a004e5c:	09070509 00180706 40082000 00000000     ......... .@....
1a004e6c:	00190000 400c1000 07060107 001a0602     .......@........
1a004e7c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004e8c:	02020302 001b0204                       ........

1a004e94 <gpioPinsInit>:
1a004e94:	02000104 00050701 05010d03 04080100     ................
1a004ea4:	02020002 02000304 00000403 04070002     ................
1a004eb4:	030c0300 09050402 05040103 04030208     ................
1a004ec4:	04020305 06040504 0802000c 03000b06     ................
1a004ed4:	00090607 07060503 060f0504 03030004     ................
1a004ee4:	02000404 00050404 06040502 04060200     ................
1a004ef4:	0c050408 05040a04 0003010e 14010a00     ................
1a004f04:	010f0000 0d000012 00001101 0010010c     ................
1a004f14:	07070300 000f0300 01000001 00000000     ................
1a004f24:	000a0600 08060603 06100504 04030005     ................
1a004f34:	03000106 04090400 04010d05 010b0000     ................
1a004f44:	0200000f 00000001 00010104 02010800     ................
1a004f54:	01090000 09010006 05040002 04010200     ................
1a004f64:	02020105 02020504 0e00000a 01000b02     ................
1a004f74:	000c020b ffff0c01                       ........

1a004f7c <__sf_fake_stderr>:
	...

1a004f9c <__sf_fake_stdin>:
	...

1a004fbc <__sf_fake_stdout>:
	...

1a004fdc <_global_impure_ptr>:
1a004fdc:	10000048 2b302d23 6c680020 6665004c     H...#-0+ .hlL.ef
1a004fec:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a004ffc:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00500c:	64636261 ff006665                       abcdef..
